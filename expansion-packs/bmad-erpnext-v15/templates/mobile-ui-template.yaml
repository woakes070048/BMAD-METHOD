name: "Mobile UI Component Template"
description: "Template for creating mobile-optimized Vue components with touch interactions and responsive design"
version: "1.0.0"

component_config:
  name: "{{ component_name }}"
  type: "mobile_responsive"
  framework: "vue3"
  styling: "tailwindcss"
  
mobile_layout:
  structure:
    header:
      type: "fixed"
      height: "56px"
      elements:
        left: "menu_trigger"
        center: "title"
        right: "action_menu"
        
    content:
      type: "scrollable"
      padding_top: "56px"
      padding_bottom: "56px"
      pull_to_refresh: true
      infinite_scroll: true
      
    footer:
      type: "fixed"
      height: "56px"
      navigation_type: "bottom_tabs"
      tabs_count: 4
      
    fab:
      enabled: true
      position: "bottom_right"
      offset: "16px"

responsive_breakpoints:
  mobile:
    min: "320px"
    max: "767px"
    columns: 1
    
  tablet:
    min: "768px"
    max: "1023px"
    columns: 2
    
  desktop:
    min: "1024px"
    max: "none"
    columns: 3

component_template: |
  <template>
    <div class="mobile-{{ component_name | lower }}" ref="containerRef">
      <!-- Mobile Header -->
      <header class="mobile-header fixed top-0 left-0 right-0 h-14 bg-white border-b z-50">
        <div class="flex items-center justify-between h-full px-4">
          <button 
            @click="$emit('menu-toggle')"
            class="touch-target -ml-2 p-2"
            aria-label="Menu"
          >
            <Icon name="menu" size="20" />
          </button>
          
          <h1 class="text-lg font-semibold truncate flex-1 mx-4 text-center">
            {{ "{{ title }}" }}
          </h1>
          
          <button 
            @click="showActions = !showActions"
            class="touch-target -mr-2 p-2"
            aria-label="Actions"
          >
            <Icon name="more-vertical" size="20" />
          </button>
        </div>
      </header>
      
      <!-- Pull to Refresh Indicator -->
      <div 
        v-if="isPulling"
        class="refresh-indicator fixed top-14 left-0 right-0 flex justify-center py-2 z-40"
        :style="{ transform: `translateY(${pullDistance}px)` }"
      >
        <LoadingSpinner size="sm" />
      </div>
      
      <!-- Main Content -->
      <main class="mobile-content pt-14 pb-14 min-h-screen">
        <div class="container px-4 py-4">
          <!-- Search Bar (if needed) -->
          <div v-if="showSearch" class="search-container mb-4">
            <div class="relative">
              <Icon 
                name="search" 
                class="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400"
                size="16"
              />
              <input
                v-model="searchQuery"
                type="search"
                placeholder="Search..."
                class="w-full pl-10 pr-4 py-2 border rounded-lg"
                @input="onSearch"
              />
            </div>
          </div>
          
          <!-- Content Slot -->
          <div class="content-wrapper">
            <slot :items="filteredItems" />
          </div>
          
          <!-- Empty State -->
          <div v-if="isEmpty" class="empty-state py-12 text-center">
            <Icon name="{{ empty_icon }}" size="48" class="mx-auto mb-4 text-gray-400" />
            <p class="text-gray-600">{{ "{{ emptyMessage }}" }}</p>
            <Button v-if="showEmptyAction" @click="$emit('empty-action')" class="mt-4">
              {{ "{{ emptyActionLabel }}" }}
            </Button>
          </div>
          
          <!-- Loading State -->
          <div v-if="isLoading" class="loading-state py-8">
            <div class="space-y-4">
              <div v-for="i in 5" :key="i" class="skeleton-loader">
                <div class="h-20 bg-gray-200 rounded-lg animate-pulse" />
              </div>
            </div>
          </div>
        </div>
      </main>
      
      <!-- Bottom Navigation -->
      <nav class="mobile-bottom-nav fixed bottom-0 left-0 right-0 h-14 bg-white border-t z-50">
        <div class="flex h-full">
          <button
            v-for="tab in bottomTabs"
            :key="tab.id"
            @click="activeTab = tab.id"
            class="flex-1 flex flex-col items-center justify-center touch-target"
            :class="{ 'text-primary': activeTab === tab.id }"
          >
            <Icon :name="tab.icon" size="20" />
            <span class="text-xs mt-1">{{ "{{ tab.label }}" }}</span>
          </button>
        </div>
      </nav>
      
      <!-- Floating Action Button -->
      <button
        v-if="showFAB"
        @click="$emit('fab-click')"
        class="fab fixed bottom-20 right-4 w-14 h-14 bg-primary text-white rounded-full shadow-lg z-30 flex items-center justify-center"
        :class="{ 'scale-0': hideOnScroll && isScrollingDown }"
      >
        <Icon name="{{ fab_icon }}" size="24" />
      </button>
      
      <!-- Action Sheet -->
      <Teleport to="body">
        <transition name="sheet">
          <div 
            v-if="showActions"
            class="action-sheet fixed inset-0 z-[100]"
            @click.self="showActions = false"
          >
            <div class="absolute bottom-0 left-0 right-0 bg-white rounded-t-2xl">
              <div class="p-4">
                <div class="mb-4 flex justify-between items-center">
                  <h3 class="text-lg font-semibold">Actions</h3>
                  <button @click="showActions = false" class="touch-target p-2 -mr-2">
                    <Icon name="x" size="20" />
                  </button>
                </div>
                <div class="space-y-2">
                  <slot name="actions" />
                </div>
              </div>
            </div>
          </div>
        </transition>
      </Teleport>
    </div>
  </template>

script_template: |
  <script setup>
  import { ref, computed, onMounted, onUnmounted } from 'vue'
  import { Icon, Button, LoadingSpinner } from 'frappe-ui'
  import { useSwipeGesture, usePullToRefresh, useInfiniteScroll } from '@/composables/mobile'
  
  const props = defineProps({
    title: {
      type: String,
      default: '{{ default_title }}'
    },
    items: {
      type: Array,
      default: () => []
    },
    showSearch: {
      type: Boolean,
      default: {{ show_search | default(true) }}
    },
    showFAB: {
      type: Boolean,
      default: {{ show_fab | default(true) }}
    },
    hideOnScroll: {
      type: Boolean,
      default: {{ hide_on_scroll | default(true) }}
    },
    bottomTabs: {
      type: Array,
      default: () => [
        { id: 'home', label: 'Home', icon: 'home' },
        { id: 'list', label: 'List', icon: 'list' },
        { id: 'add', label: 'Add', icon: 'plus' },
        { id: 'profile', label: 'Profile', icon: 'user' }
      ]
    }
  })
  
  const emit = defineEmits([
    'menu-toggle',
    'fab-click',
    'empty-action',
    'search',
    'refresh',
    'load-more'
  ])
  
  // Refs
  const containerRef = ref(null)
  const searchQuery = ref('')
  const activeTab = ref('home')
  const showActions = ref(false)
  const isLoading = ref(false)
  const isScrollingDown = ref(false)
  
  // Pull to refresh
  const { isPulling, pullDistance } = usePullToRefresh(async () => {
    emit('refresh')
    // Simulate refresh
    await new Promise(resolve => setTimeout(resolve, 1000))
  })
  
  // Swipe gestures
  useSwipeGesture(containerRef, {
    onSwipeLeft: () => {
      // Navigate to next tab
      const currentIndex = props.bottomTabs.findIndex(t => t.id === activeTab.value)
      if (currentIndex < props.bottomTabs.length - 1) {
        activeTab.value = props.bottomTabs[currentIndex + 1].id
      }
    },
    onSwipeRight: () => {
      // Navigate to previous tab
      const currentIndex = props.bottomTabs.findIndex(t => t.id === activeTab.value)
      if (currentIndex > 0) {
        activeTab.value = props.bottomTabs[currentIndex - 1].id
      }
    }
  })
  
  // Infinite scroll
  useInfiniteScroll(containerRef, () => {
    emit('load-more')
  })
  
  // Computed
  const filteredItems = computed(() => {
    if (!searchQuery.value) return props.items
    
    return props.items.filter(item => 
      JSON.stringify(item).toLowerCase().includes(searchQuery.value.toLowerCase())
    )
  })
  
  const isEmpty = computed(() => 
    !isLoading.value && filteredItems.value.length === 0
  )
  
  // Methods
  const onSearch = debounce(() => {
    emit('search', searchQuery.value)
  }, 300)
  
  // Scroll detection for FAB
  let lastScrollTop = 0
  const handleScroll = () => {
    const scrollTop = window.pageYOffset || document.documentElement.scrollTop
    isScrollingDown.value = scrollTop > lastScrollTop && scrollTop > 100
    lastScrollTop = scrollTop
  }
  
  onMounted(() => {
    window.addEventListener('scroll', handleScroll, { passive: true })
  })
  
  onUnmounted(() => {
    window.removeEventListener('scroll', handleScroll)
  })
  </script>

style_template: |
  <style scoped>
  /* Touch target minimum size */
  .touch-target {
    min-width: 44px;
    min-height: 44px;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  /* Smooth transitions */
  .fab {
    transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  /* Pull to refresh indicator */
  .refresh-indicator {
    transition: transform 0.2s ease-out;
  }
  
  /* Action sheet animation */
  .sheet-enter-active,
  .sheet-leave-active {
    transition: opacity 0.3s ease;
  }
  
  .sheet-enter-active .absolute,
  .sheet-leave-active .absolute {
    transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  .sheet-enter-from {
    opacity: 0;
  }
  
  .sheet-enter-from .absolute {
    transform: translateY(100%);
  }
  
  .sheet-leave-to {
    opacity: 0;
  }
  
  .sheet-leave-to .absolute {
    transform: translateY(100%);
  }
  
  /* iOS safe areas */
  @supports (padding-bottom: env(safe-area-inset-bottom)) {
    .mobile-bottom-nav {
      padding-bottom: env(safe-area-inset-bottom);
    }
  }
  
  /* Skeleton loader */
  @keyframes pulse {
    0%, 100% {
      opacity: 1;
    }
    50% {
      opacity: 0.5;
    }
  }
  
  .skeleton-loader div {
    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }
  </style>

touch_interactions:
  swipe:
    enabled: true
    directions: ["left", "right", "up", "down"]
    threshold: 50
    
  tap:
    enabled: true
    delay: 300
    
  long_press:
    enabled: true
    duration: 500
    
  pinch:
    enabled: false
    min_scale: 0.5
    max_scale: 3

performance_optimizations:
  virtual_scroll: true
  lazy_loading: true
  image_optimization: true
  debounce_search: 300
  throttle_scroll: 100
  preload_next_page: true
  cache_strategy: "network_first"

accessibility:
  aria_labels: true
  focus_management: true
  keyboard_navigation: true
  screen_reader_support: true
  high_contrast_mode: true
  reduced_motion: true

testing:
  unit_tests:
    - test_touch_interactions
    - test_responsive_layout
    - test_offline_mode
    - test_performance_metrics
    
  e2e_tests:
    - test_user_flow
    - test_gesture_navigation
    - test_form_submission
    - test_error_handling