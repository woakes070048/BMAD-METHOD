name: "vue-form-components-template"
title: "Vue Form Components Template for ERPNext Apps"
description: "Complete set of reusable form components following frappe-ui patterns"
version: "2.0.0"

parameters:
  app_name:
    type: "string"
    required: true
    description: "Name of the ERPNext app (snake_case)"

templates:
  page_header: |
    <template>
      <div class="flex items-center justify-between">
        <div class="min-w-0 flex-1">
          <h1 class="text-2xl font-bold text-gray-900">
            {{ title }}
          </h1>
          <p v-if="description" class="mt-1 text-sm text-gray-500">
            {{ description }}
          </p>
        </div>
        
        <div v-if="actions || $slots.right" class="flex items-center space-x-3">
          <Button
            v-for="action in actions"
            :key="action.label"
            :variant="action.variant || 'outline'"
            :size="action.size || 'md'"
            @click="action.onClick"
          >
            <Icon v-if="action.icon" :name="action.icon" class="h-4 w-4 mr-2" />
            {{ action.label }}
          </Button>
          
          <slot name="right" />
        </div>
      </div>
    </template>

    <script setup>
    import { Button, Icon } from 'frappe-ui'

    defineProps({
      title: {
        type: String,
        required: true,
      },
      description: {
        type: String,
        default: '',
      },
      actions: {
        type: Array,
        default: () => [],
      },
    })
    </script>

  form_builder: |
    <template>
      <div class="space-y-6">
        <div
          v-for="field in fields"
          :key="field.fieldname"
          class="form-field"
        >
          <!-- Text Input -->
          <FormControl
            v-if="field.fieldtype === 'Data'"
            v-model="modelValue[field.fieldname]"
            :label="field.label"
            :placeholder="field.placeholder"
            :required="field.reqd"
            :disabled="field.read_only"
            :description="field.description"
            @change="handleFieldChange(field.fieldname, $event)"
          />

          <!-- Textarea -->
          <FormControl
            v-else-if="field.fieldtype === 'Text'"
            v-model="modelValue[field.fieldname]"
            type="textarea"
            :label="field.label"
            :placeholder="field.placeholder"
            :required="field.reqd"
            :disabled="field.read_only"
            :description="field.description"
            :rows="field.rows || 3"
            @change="handleFieldChange(field.fieldname, $event)"
          />

          <!-- Select -->
          <FormControl
            v-else-if="field.fieldtype === 'Select'"
            v-model="modelValue[field.fieldname]"
            type="select"
            :label="field.label"
            :options="getSelectOptions(field)"
            :required="field.reqd"
            :disabled="field.read_only"
            :description="field.description"
            @change="handleFieldChange(field.fieldname, $event)"
          />

          <!-- Link Field -->
          <LinkField
            v-else-if="field.fieldtype === 'Link'"
            v-model="modelValue[field.fieldname]"
            :doctype="field.options"
            :label="field.label"
            :required="field.reqd"
            :disabled="field.read_only"
            :description="field.description"
            :filters="field.filters"
            @change="handleFieldChange(field.fieldname, $event)"
          />

          <!-- Date -->
          <FormControl
            v-else-if="field.fieldtype === 'Date'"
            v-model="modelValue[field.fieldname]"
            type="date"
            :label="field.label"
            :required="field.reqd"
            :disabled="field.read_only"
            :description="field.description"
            @change="handleFieldChange(field.fieldname, $event)"
          />

          <!-- Datetime -->
          <FormControl
            v-else-if="field.fieldtype === 'Datetime'"
            v-model="modelValue[field.fieldname]"
            type="datetime-local"
            :label="field.label"
            :required="field.reqd"
            :disabled="field.read_only"
            :description="field.description"
            @change="handleFieldChange(field.fieldname, $event)"
          />

          <!-- Check -->
          <FormControl
            v-else-if="field.fieldtype === 'Check'"
            v-model="modelValue[field.fieldname]"
            type="checkbox"
            :label="field.label"
            :disabled="field.read_only"
            :description="field.description"
            @change="handleFieldChange(field.fieldname, $event)"
          />

          <!-- Int/Float -->
          <FormControl
            v-else-if="['Int', 'Float', 'Currency'].includes(field.fieldtype)"
            v-model="modelValue[field.fieldname]"
            type="number"
            :label="field.label"
            :placeholder="field.placeholder"
            :required="field.reqd"
            :disabled="field.read_only"
            :description="field.description"
            :step="field.fieldtype === 'Float' ? '0.01' : '1'"
            @change="handleFieldChange(field.fieldname, $event)"
          />

          <!-- Table -->
          <TableField
            v-else-if="field.fieldtype === 'Table'"
            v-model="modelValue[field.fieldname]"
            :label="field.label"
            :doctype="field.options"
            :required="field.reqd"
            :disabled="field.read_only"
            :description="field.description"
            @change="handleFieldChange(field.fieldname, $event)"
          />

          <!-- Attach -->
          <FileUploadField
            v-else-if="field.fieldtype === 'Attach'"
            v-model="modelValue[field.fieldname]"
            :label="field.label"
            :required="field.reqd"
            :disabled="field.read_only"
            :description="field.description"
            :accept="field.accept"
            @change="handleFieldChange(field.fieldname, $event)"
          />

          <!-- HTML Editor -->
          <HtmlEditor
            v-else-if="field.fieldtype === 'Text Editor'"
            v-model="modelValue[field.fieldname]"
            :label="field.label"
            :required="field.reqd"
            :disabled="field.read_only"
            :description="field.description"
            @change="handleFieldChange(field.fieldname, $event)"
          />
        </div>
      </div>
    </template>

    <script setup>
    import { FormControl } from 'frappe-ui'
    import LinkField from './LinkField.vue'
    import TableField from './TableField.vue'
    import FileUploadField from './FileUploadField.vue'
    import HtmlEditor from './HtmlEditor.vue'

    const props = defineProps({
      fields: {
        type: Array,
        required: true,
      },
      modelValue: {
        type: Object,
        required: true,
      },
    })

    const emit = defineEmits(['update:modelValue', 'field-change'])

    function handleFieldChange(fieldname, value) {
      const updated = { ...props.modelValue, [fieldname]: value }
      emit('update:modelValue', updated)
      emit('field-change', { fieldname, value, doc: updated })
    }

    function getSelectOptions(field) {
      if (Array.isArray(field.options)) {
        return field.options
      }
      
      if (typeof field.options === 'string') {
        return field.options.split('\n').map(option => ({
          label: option.trim(),
          value: option.trim(),
        }))
      }
      
      return []
    }
    </script>

  link_field: |
    <template>
      <div class="form-control">
        <label v-if="label" class="form-label" :class="{ required }">
          {{ label }}
        </label>
        
        <Autocomplete
          v-model="selectedValue"
          :placeholder="placeholder || `Search ${doctype}...`"
          :loading="resource.loading"
          :options="options"
          :disabled="disabled"
          @query-change="handleQueryChange"
          @update:model-value="handleValueChange"
        />
        
        <div v-if="description" class="form-description">
          {{ description }}
        </div>
      </div>
    </template>

    <script setup>
    import { ref, computed, watch } from 'vue'
    import { createListResource } from 'frappe-ui'
    import { Autocomplete } from 'frappe-ui'

    const props = defineProps({
      modelValue: {
        type: String,
        default: '',
      },
      doctype: {
        type: String,
        required: true,
      },
      label: {
        type: String,
        default: '',
      },
      placeholder: {
        type: String,
        default: '',
      },
      required: {
        type: Boolean,
        default: false,
      },
      disabled: {
        type: Boolean,
        default: false,
      },
      description: {
        type: String,
        default: '',
      },
      filters: {
        type: Object,
        default: () => ({}),
      },
    })

    const emit = defineEmits(['update:modelValue', 'change'])

    const selectedValue = ref(props.modelValue)
    const searchQuery = ref('')

    const resource = createListResource({
      doctype: props.doctype,
      fields: ['name', 'title', 'subject'], // Common display fields
      filters: {
        ...props.filters,
        name: ['like', `%${searchQuery.value}%`],
      },
      pageLength: 20,
      auto: false,
    })

    const options = computed(() => {
      return resource.data?.map(item => ({
        label: item.title || item.subject || item.name,
        value: item.name,
        description: item.name !== (item.title || item.subject) ? item.name : undefined,
      })) || []
    })

    function handleQueryChange(query) {
      searchQuery.value = query
      if (query.length >= 2) {
        resource.update({
          filters: {
            ...props.filters,
            name: ['like', `%${query}%`],
          },
        })
        resource.fetch()
      }
    }

    function handleValueChange(value) {
      selectedValue.value = value
      emit('update:modelValue', value)
      emit('change', value)
    }

    watch(
      () => props.modelValue,
      (newValue) => {
        selectedValue.value = newValue
      }
    )
    </script>

  table_field: |
    <template>
      <div class="form-control">
        <label v-if="label" class="form-label" :class="{ required }">
          {{ label }}
        </label>
        
        <div class="border border-gray-200 rounded-lg overflow-hidden">
          <!-- Table Header -->
          <div class="bg-gray-50 px-4 py-2 border-b border-gray-200 flex items-center justify-between">
            <span class="text-sm font-medium text-gray-900">
              {{ childFields?.length || 0 }} items
            </span>
            <Button
              v-if="!disabled"
              size="sm"
              variant="ghost"
              @click="addRow"
            >
              <Icon name="plus" class="h-4 w-4 mr-1" />
              Add Row
            </Button>
          </div>

          <!-- Table Content -->
          <div v-if="rows.length === 0" class="p-8 text-center text-gray-500">
            <Icon name="table" class="h-8 w-8 mx-auto mb-2 text-gray-400" />
            <p class="text-sm">No items added yet</p>
            <Button
              v-if="!disabled"
              size="sm"
              variant="outline"
              class="mt-2"
              @click="addRow"
            >
              Add First Item
            </Button>
          </div>

          <div v-else class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
              <thead class="bg-gray-50">
                <tr>
                  <th
                    v-for="field in visibleFields"
                    :key="field.fieldname"
                    class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    {{ field.label }}
                  </th>
                  <th v-if="!disabled" class="px-4 py-3 w-16"></th>
                </tr>
              </thead>
              <tbody class="bg-white divide-y divide-gray-200">
                <tr
                  v-for="(row, index) in rows"
                  :key="row.idx || index"
                >
                  <td
                    v-for="field in visibleFields"
                    :key="field.fieldname"
                    class="px-4 py-3 text-sm"
                  >
                    <TableFieldCell
                      v-model="row[field.fieldname]"
                      :field="field"
                      :disabled="disabled"
                      @change="handleCellChange(index, field.fieldname, $event)"
                    />
                  </td>
                  <td v-if="!disabled" class="px-4 py-3 text-right">
                    <Button
                      size="sm"
                      variant="ghost"
                      @click="removeRow(index)"
                      class="text-red-600 hover:text-red-700"
                    >
                      <Icon name="trash-2" class="h-4 w-4" />
                    </Button>
                  </td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
        
        <div v-if="description" class="form-description">
          {{ description }}
        </div>
      </div>
    </template>

    <script setup>
    import { ref, computed, onMounted } from 'vue'
    import { createResource } from 'frappe-ui'
    import { Button, Icon } from 'frappe-ui'
    import TableFieldCell from './TableFieldCell.vue'

    const props = defineProps({
      modelValue: {
        type: Array,
        default: () => [],
      },
      doctype: {
        type: String,
        required: true,
      },
      label: {
        type: String,
        default: '',
      },
      required: {
        type: Boolean,
        default: false,
      },
      disabled: {
        type: Boolean,
        default: false,
      },
      description: {
        type: String,
        default: '',
      },
    })

    const emit = defineEmits(['update:modelValue', 'change'])

    const rows = ref(props.modelValue || [])
    const childFields = ref([])

    const visibleFields = computed(() => {
      return childFields.value.filter(field => 
        !field.hidden && 
        !['Section Break', 'Column Break'].includes(field.fieldtype)
      )
    })

    const childDocTypeResource = createResource({
      url: 'frappe.client.get_meta',
      auto: false,
      onSuccess(data) {
        childFields.value = data.fields || []
      },
    })

    function addRow() {
      const newRow = { idx: rows.value.length + 1 }
      childFields.value.forEach(field => {
        if (field.default) {
          newRow[field.fieldname] = field.default
        }
      })
      rows.value.push(newRow)
      updateModelValue()
    }

    function removeRow(index) {
      rows.value.splice(index, 1)
      // Reorder idx
      rows.value.forEach((row, i) => {
        row.idx = i + 1
      })
      updateModelValue()
    }

    function handleCellChange(rowIndex, fieldname, value) {
      rows.value[rowIndex][fieldname] = value
      updateModelValue()
    }

    function updateModelValue() {
      emit('update:modelValue', rows.value)
      emit('change', rows.value)
    }

    onMounted(() => {
      if (props.doctype) {
        childDocTypeResource.submit({ doctype: props.doctype })
      }
    })
    </script>

  file_upload_field: |
    <template>
      <div class="form-control">
        <label v-if="label" class="form-label" :class="{ required }">
          {{ label }}
        </label>
        
        <div
          class="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-gray-400 transition-colors"
          :class="{ 'bg-gray-50': disabled }"
          @dragover.prevent
          @drop.prevent="handleDrop"
        >
          <input
            ref="fileInput"
            type="file"
            class="hidden"
            :accept="accept"
            :disabled="disabled"
            @change="handleFileSelect"
          />
          
          <div v-if="!currentFile">
            <Icon name="upload" class="h-8 w-8 mx-auto mb-2 text-gray-400" />
            <p class="text-sm text-gray-600 mb-2">
              Drag and drop a file here, or click to select
            </p>
            <Button
              variant="outline"
              size="sm"
              :disabled="disabled"
              @click="$refs.fileInput.click()"
            >
              Choose File
            </Button>
          </div>
          
          <div v-else class="flex items-center justify-center space-x-4">
            <div class="flex items-center space-x-2">
              <Icon :name="getFileIcon(currentFile)" class="h-6 w-6 text-gray-500" />
              <div class="text-left">
                <p class="text-sm font-medium text-gray-900">
                  {{ getFileName(currentFile) }}
                </p>
                <p class="text-xs text-gray-500">
                  {{ formatFileSize(currentFileSize) }}
                </p>
              </div>
            </div>
            
            <div class="flex space-x-2">
              <Button
                v-if="currentFile && !isUploading"
                variant="ghost"
                size="sm"
                @click="downloadFile"
              >
                <Icon name="download" class="h-4 w-4" />
              </Button>
              <Button
                v-if="!disabled"
                variant="ghost"
                size="sm"
                @click="removeFile"
                class="text-red-600 hover:text-red-700"
              >
                <Icon name="x" class="h-4 w-4" />
              </Button>
            </div>
          </div>
          
          <!-- Upload Progress -->
          <div v-if="isUploading" class="mt-4">
            <div class="bg-gray-200 rounded-full h-2">
              <div
                class="bg-primary h-2 rounded-full transition-all"
                :style="{ width: `${uploadProgress}%` }"
              />
            </div>
            <p class="text-xs text-gray-500 mt-1">
              Uploading... {{ uploadProgress }}%
            </p>
          </div>
        </div>
        
        <div v-if="description" class="form-description">
          {{ description }}
        </div>
      </div>
    </template>

    <script setup>
    import { ref, computed, watch } from 'vue'
    import { createResource } from 'frappe-ui'
    import { Button, Icon } from 'frappe-ui'

    const props = defineProps({
      modelValue: {
        type: String,
        default: '',
      },
      label: {
        type: String,
        default: '',
      },
      required: {
        type: Boolean,
        default: false,
      },
      disabled: {
        type: Boolean,
        default: false,
      },
      description: {
        type: String,
        default: '',
      },
      accept: {
        type: String,
        default: '',
      },
    })

    const emit = defineEmits(['update:modelValue', 'change'])

    const fileInput = ref(null)
    const isUploading = ref(false)
    const uploadProgress = ref(0)
    const currentFileSize = ref(0)

    const currentFile = computed(() => props.modelValue)

    const uploadResource = createResource({
      url: 'upload_file',
      auto: false,
      onSuccess(data) {
        emit('update:modelValue', data.file_url)
        emit('change', data.file_url)
        isUploading.value = false
        uploadProgress.value = 0
      },
      onError() {
        isUploading.value = false
        uploadProgress.value = 0
      },
    })

    function handleFileSelect(event) {
      const file = event.target.files?.[0]
      if (file) {
        uploadFile(file)
      }
    }

    function handleDrop(event) {
      if (props.disabled) return
      
      const file = event.dataTransfer.files?.[0]
      if (file) {
        uploadFile(file)
      }
    }

    function uploadFile(file) {
      if (!file) return
      
      currentFileSize.value = file.size
      isUploading.value = true
      uploadProgress.value = 0
      
      const formData = new FormData()
      formData.append('file', file)
      formData.append('is_private', 0)
      
      // Simulate progress for now
      const interval = setInterval(() => {
        if (uploadProgress.value < 90) {
          uploadProgress.value += 10
        }
      }, 100)
      
      uploadResource.submit(formData).finally(() => {
        clearInterval(interval)
        uploadProgress.value = 100
      })
    }

    function removeFile() {
      emit('update:modelValue', '')
      emit('change', '')
      currentFileSize.value = 0
      if (fileInput.value) {
        fileInput.value.value = ''
      }
    }

    function downloadFile() {
      if (currentFile.value) {
        window.open(currentFile.value, '_blank')
      }
    }

    function getFileName(url) {
      if (!url) return ''
      return url.split('/').pop() || 'Unknown file'
    }

    function getFileIcon(url) {
      if (!url) return 'file'
      
      const extension = url.split('.').pop()?.toLowerCase()
      
      const iconMap = {
        pdf: 'file-text',
        doc: 'file-text',
        docx: 'file-text',
        xls: 'file-text',
        xlsx: 'file-text',
        jpg: 'image',
        jpeg: 'image',
        png: 'image',
        gif: 'image',
        mp4: 'video',
        avi: 'video',
        mov: 'video',
        mp3: 'music',
        wav: 'music',
        zip: 'archive',
        rar: 'archive',
      }
      
      return iconMap[extension] || 'file'
    }

    function formatFileSize(bytes) {
      if (bytes === 0) return '0 Bytes'
      
      const k = 1024
      const sizes = ['Bytes', 'KB', 'MB', 'GB']
      const i = Math.floor(Math.log(bytes) / Math.log(k))
      
      return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]
    }
    </script>

instructions:
  setup:
    - "Create form components in frontend/src/components/forms/"
    - "Import FormBuilder and other components in your pages"
    - "Configure field metadata from DocType definitions"
    - "Add form validation and error handling"
  
  integration:
    - "Components work with Frappe field types and validation"
    - "Automatic two-way data binding with v-model"
    - "Built-in support for required fields and descriptions"
    - "File upload integration with Frappe file management"
    - "Link field with autocomplete search functionality"
  
  customization:
    - "Add custom field types by extending FormBuilder"
    - "Modify table field columns based on child DocType"
    - "Customize file upload restrictions and validation"
    - "Add client-side validation rules"