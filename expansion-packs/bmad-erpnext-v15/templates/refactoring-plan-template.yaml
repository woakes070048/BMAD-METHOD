name: "refactoring-plan-template"
title: "Refactoring Plan Template"
description: "Comprehensive template for planning systematic code refactoring efforts"
version: "1.0.0"

metadata:
  author: "BMAD ERPNext Team"
  category: "Code Quality & Optimization"
  use_case: "Planning and executing code refactoring projects"
  framework: "ERPNext/Frappe applications"

template_structure:
  project_overview:
    refactoring_scope:
      name: "[Refactoring project name]"
      description: "[What is being refactored and why]"
      business_justification: "[Business reasons for refactoring]"
      technical_debt_level: "[High/Medium/Low - current technical debt]"
    
    goals_and_objectives:
      primary_goals:
        - "[Main goal 1]"
        - "[Main goal 2]"
        - "[Main goal 3]"
      
      success_metrics:
        performance:
          - metric: "[Response time improvement]"
            current: "[Current measurement]"
            target: "[Target improvement]"
        
        maintainability:
          - metric: "[Cyclomatic complexity]"
            current: "[Current average]"
            target: "[Target reduction]"
        
        quality:
          - metric: "[Code duplication percentage]"
            current: "[Current percentage]"
            target: "[Target percentage]"
    
    timeline_and_resources:
      estimated_duration: "[Total time estimate]"
      team_members: "[People involved]"
      sprint_allocation: "[How many sprints]"
      deadline_constraints: "[Any fixed deadlines]"

  current_state_analysis:
    codebase_assessment:
      files_in_scope:
        - file_path: "[Path to file]"
          file_type: "[Controller/Model/View/Utility]"
          lines_of_code: "[LOC count]"
          complexity_score: "[Cyclomatic complexity]"
          last_modified: "[Date last changed]"
          change_frequency: "[How often it changes]"
      
      quality_metrics:
        overall_stats:
          total_lines: "[Total LOC]"
          average_complexity: "[Average cyclomatic complexity]"
          duplication_percentage: "[Code duplication %]"
          test_coverage: "[Current test coverage %]"
          technical_debt_hours: "[Estimated technical debt]"
      
      identified_issues:
        code_smells:
          - smell_type: "[Long Method/Large Class/etc.]"
            location: "[File and line/function]"
            severity: "[High/Medium/Low]"
            description: "[What's wrong]"
            impact: "[How it affects maintainability]"
        
        performance_issues:
          - issue_type: "[N+1 Query/Inefficient Loop/etc.]"
            location: "[File and function]"
            performance_impact: "[Measured impact]"
            description: "[Details of issue]"
        
        maintainability_issues:
          - issue_type: "[Tight Coupling/Missing Abstraction/etc.]"
            location: "[File and function]"
            maintenance_impact: "[How it affects changes]"
            description: "[Details of issue]"

  refactoring_strategy:
    approach_selection:
      refactoring_type: "[Big Bang/Incremental/Strangler Fig]"
      justification: "[Why this approach was chosen]"
      risk_level: "[High/Medium/Low]"
      backward_compatibility: "[Must maintain/Can break/Partial]"
    
    prioritization_matrix:
      high_priority:
        - component: "[Component name]"
          reason: "[Why high priority]"
          impact: "[Expected impact]"
          effort: "[Estimated effort]"
          dependencies: "[What depends on this]"
      
      medium_priority:
        - component: "[Component name]"
          reason: "[Why medium priority]"
          impact: "[Expected impact]"
          effort: "[Estimated effort]"
      
      low_priority:
        - component: "[Component name]"
          reason: "[Why low priority]"
          impact: "[Expected impact]"
          effort: "[Estimated effort]"
    
    refactoring_patterns:
      extract_method:
        - target_function: "[Function to refactor]"
          new_methods: "[Methods to extract]"
          rationale: "[Why extract these]"
      
      extract_class:
        - target_class: "[Class to refactor]"
          new_classes: "[Classes to extract]"
          responsibilities: "[How to split responsibilities]"
      
      eliminate_duplication:
        - duplicated_code: "[Description of duplication]"
          locations: "[Where duplication exists]"
          extraction_target: "[Where to extract common code]"
      
      improve_naming:
        - current_names: "[Current confusing names]"
          proposed_names: "[Better names]"
          scope_impact: "[How widespread the change]"

  implementation_phases:
    phase_1:
      name: "[Phase 1 name]"
      duration: "[Estimated duration]"
      objectives: "[What to accomplish]"
      
      tasks:
        - task: "[Specific task]"
          type: "[Refactor/Test/Document]"
          estimate: "[Time estimate]"
          dependencies: "[Prerequisites]"
          risk_level: "[High/Medium/Low]"
      
      deliverables:
        - "[Deliverable 1]"
        - "[Deliverable 2]"
      
      success_criteria:
        - "[Success criterion 1]"
        - "[Success criterion 2]"
      
      rollback_plan:
        rollback_trigger: "[When to rollback]"
        rollback_steps: "[How to rollback]"
        data_safety: "[How to protect data]"
    
    phase_2:
      name: "[Phase 2 name]"
      duration: "[Estimated duration]"
      objectives: "[What to accomplish]"
      
      tasks:
        - task: "[Specific task]"
          type: "[Refactor/Test/Document]"
          estimate: "[Time estimate]"
          dependencies: "[Prerequisites]"
          risk_level: "[High/Medium/Low]"
      
      deliverables:
        - "[Deliverable 1]"
        - "[Deliverable 2]"
      
      success_criteria:
        - "[Success criterion 1]"
        - "[Success criterion 2]"

  technical_specifications:
    design_patterns:
      patterns_to_introduce:
        - pattern: "[Pattern name]"
          location: "[Where to apply]"
          rationale: "[Why this pattern helps]"
          implementation: "[How to implement]"
      
      patterns_to_remove:
        - anti_pattern: "[Anti-pattern name]"
          location: "[Where it exists]"
          replacement: "[What to replace it with]"
          reason: "[Why it's problematic]"
    
    architecture_improvements:
      separation_of_concerns:
        - current_mixing: "[What's currently mixed]"
          proposed_separation: "[How to separate]"
          benefits: "[Benefits of separation]"
      
      dependency_injection:
        - hard_dependencies: "[Current hard dependencies]"
          injection_strategy: "[How to inject dependencies]"
          testability_improvement: "[How it improves testing]"
      
      interface_abstractions:
        - concrete_dependencies: "[Current concrete dependencies]"
          proposed_interfaces: "[Interfaces to introduce]"
          flexibility_gains: "[How it improves flexibility]"
    
    database_optimizations:
      query_improvements:
        - problematic_query: "[Current inefficient query]"
          optimization_approach: "[How to optimize]"
          expected_improvement: "[Performance gain expected]"
      
      schema_improvements:
        - current_schema_issue: "[Schema problem]"
          proposed_change: "[Schema improvement]"
          migration_strategy: "[How to migrate data]"
      
      indexing_strategy:
        - table: "[Table name]"
          current_indexes: "[Existing indexes]"
          proposed_indexes: "[New indexes needed]"
          query_patterns: "[Queries that benefit]"

  quality_assurance_plan:
    testing_strategy:
      unit_testing:
        coverage_target: "[Target coverage percentage]"
        test_types: "[Types of unit tests needed]"
        testing_frameworks: "[Testing tools to use]"
        mock_strategy: "[How to handle dependencies]"
      
      integration_testing:
        test_scenarios: "[Integration scenarios to test]"
        api_testing: "[API endpoints to test]"
        database_testing: "[Database integration tests]"
        external_service_testing: "[External service mocks]"
      
      regression_testing:
        existing_test_suite: "[Current test coverage]"
        regression_scenarios: "[Critical scenarios to preserve]"
        automated_testing: "[Automation strategy]"
        manual_testing: "[Manual test requirements]"
    
    code_review_process:
      review_criteria:
        - "[Code quality standards]"
        - "[Performance considerations]"
        - "[Security implications]"
        - "[Maintainability improvements]"
      
      review_workflow:
        1: "[Review step 1]"
        2: "[Review step 2]"
        3: "[Review step 3]"
      
      approval_requirements:
        technical_approval: "[Who gives technical approval]"
        business_approval: "[Who gives business approval]"
        deployment_approval: "[Who approves deployment]"
    
    performance_validation:
      benchmarking_approach:
        baseline_metrics: "[Current performance baseline]"
        testing_methodology: "[How to measure improvements]"
        test_environments: "[Where to run performance tests]"
        load_testing_strategy: "[How to test under load]"
      
      monitoring_plan:
        metrics_to_track: "[Performance metrics to monitor]"
        alerting_thresholds: "[When to alert on issues]"
        rollback_triggers: "[Performance degradation triggers]"

  risk_management:
    identified_risks:
      technical_risks:
        - risk: "[Technical risk description]"
          probability: "[High/Medium/Low]"
          impact: "[High/Medium/Low]"
          mitigation: "[How to mitigate]"
          contingency: "[Backup plan]"
      
      business_risks:
        - risk: "[Business risk description]"
          probability: "[High/Medium/Low]"
          impact: "[High/Medium/Low]"
          mitigation: "[How to mitigate]"
          contingency: "[Backup plan]"
      
      operational_risks:
        - risk: "[Operational risk description]"
          probability: "[High/Medium/Low]"
          impact: "[High/Medium/Low]"
          mitigation: "[How to mitigate]"
          contingency: "[Backup plan]"
    
    risk_mitigation_strategies:
      incremental_deployment:
        strategy: "[How to deploy incrementally]"
        rollback_points: "[Points where rollback is possible]"
        monitoring: "[How to monitor each deployment]"
      
      feature_flags:
        flag_strategy: "[How to use feature flags]"
        gradual_rollout: "[How to gradually enable features]"
        quick_disable: "[How to quickly disable if needed]"
      
      backup_and_recovery:
        backup_strategy: "[How to backup before changes]"
        recovery_procedures: "[How to recover from failures]"
        data_integrity: "[How to ensure data remains intact]"

  communication_plan:
    stakeholder_communication:
      stakeholders:
        - role: "[Stakeholder role]"
          communication_frequency: "[How often to update]"
          communication_method: "[Email/Meeting/Dashboard]"
          information_needs: "[What they need to know]"
      
      progress_reporting:
        report_frequency: "[How often to report progress]"
        report_format: "[Format of progress reports]"
        key_metrics: "[Metrics to include in reports]"
        escalation_criteria: "[When to escalate issues]"
    
    team_coordination:
      daily_standups: "[How refactoring fits into standups]"
      code_review_process: "[Code review workflow]"
      knowledge_sharing: "[How to share refactoring knowledge]"
      documentation_updates: "[How to keep docs current]"
    
    change_management:
      user_impact_communication: "[How to communicate user impacts]"
      training_needs: "[Training required for team]"
      documentation_updates: "[Documentation that needs updates]"
      process_changes: "[Process changes needed]"

  post_refactoring_plan:
    success_measurement:
      metrics_collection:
        performance_metrics: "[How to measure performance improvements]"
        quality_metrics: "[How to measure code quality improvements]"
        productivity_metrics: "[How to measure development productivity]"
        maintenance_metrics: "[How to measure maintenance improvements]"
      
      reporting_schedule:
        immediate_report: "[Report immediately after completion]"
        30_day_report: "[Report 30 days after completion]"
        quarterly_review: "[Ongoing quarterly reviews]"
    
    maintenance_plan:
      ongoing_monitoring: "[How to monitor refactored code]"
      quality_gates: "[Quality gates to prevent regression]"
      team_training: "[Training on new patterns and practices]"
      documentation_maintenance: "[How to keep documentation current]"
    
    lessons_learned:
      retrospective_process: "[How to conduct retrospective]"
      knowledge_capture: "[How to capture lessons learned]"
      process_improvements: "[How to improve future refactoring]"
      team_development: "[How refactoring improved team skills]"

validation_checklist:
  plan_completeness:
    - "Clear scope and objectives defined"
    - "Current state thoroughly analyzed"
    - "Refactoring strategy well-defined"
    - "Implementation phases planned"
    - "Quality assurance plan included"
    - "Risk mitigation strategies identified"
    - "Communication plan established"
    - "Success metrics defined"
  
  technical_readiness:
    - "Technical approach validated"
    - "Dependencies identified"
    - "Testing strategy comprehensive"
    - "Performance impact considered"
    - "Security implications addressed"
    - "Backward compatibility planned"
  
  operational_readiness:
    - "Team capacity confirmed"
    - "Timeline realistic"
    - "Stakeholder buy-in obtained"
    - "Risk mitigation plans tested"
    - "Rollback procedures validated"
    - "Monitoring and alerting ready"