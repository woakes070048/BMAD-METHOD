name: "backend-api-template"
title: "Backend API Module Template for ERPNext Apps"
description: "Standardized API modules with proper permissions, security, and error handling"
version: "2.0.0"

parameters:
  app_name:
    type: "string"
    required: true
    description: "Name of the ERPNext app (snake_case)"
  module_name:
    type: "string"
    required: true
    description: "Name of the API module (snake_case)"

templates:
  api_init: |
    # {{app_name}}/api/__init__.py
    """
    API module for {{app_name}}
    
    This module contains all the whitelisted API endpoints for the {{app_name}} app.
    All endpoints should include proper permission checks and error handling.
    """
    
    from . import auth
    from . import doc
    from . import views
    from . import {{module_name}}
    from . import utils

  auth_api: |
    # {{app_name}}/api/auth.py
    """
    Authentication and session management APIs
    """
    
    import frappe
    from frappe import _
    from frappe.auth import LoginManager
    from frappe.utils import cint
    
    
    @frappe.whitelist(allow_guest=True)
    def get_logged_user():
        """Get current logged in user information"""
        try:
            if frappe.session.user == "Guest":
                return {"success": False, "message": "Not logged in"}
            
            user_doc = frappe.get_doc("User", frappe.session.user)
            
            return {
                "success": True,
                "user": {
                    "email": user_doc.email,
                    "full_name": user_doc.full_name,
                    "user_image": user_doc.user_image,
                    "roles": frappe.get_roles(frappe.session.user),
                    "permissions": get_user_permissions(),
                }
            }
        except Exception as e:
            frappe.log_error(f"Failed to get logged user: {e}")
            return {"success": False, "message": "Failed to get user information"}
    
    
    @frappe.whitelist(allow_guest=True)
    def login(usr, pwd):
        """
        Authenticate user and create session
        
        Args:
            usr (str): Username/email
            pwd (str): Password
        
        Returns:
            dict: Login result with user information
        """
        try:
            login_manager = LoginManager()
            login_manager.authenticate(user=usr, pwd=pwd)
            login_manager.post_login()
            
            if frappe.response.get("message") == "Logged In":
                user_doc = frappe.get_doc("User", frappe.session.user)
                
                return {
                    "success": True,
                    "message": "Login successful",
                    "user": usr,
                    "full_name": user_doc.full_name,
                    "user_image": user_doc.user_image,
                }
            else:
                return {
                    "success": False,
                    "message": frappe.response.get("message", "Login failed")
                }
                
        except frappe.exceptions.AuthenticationError:
            return {"success": False, "message": "Invalid credentials"}
        except Exception as e:
            frappe.log_error(f"Login error: {e}")
            return {"success": False, "message": "Login failed"}
    
    
    @frappe.whitelist()
    def logout():
        """Logout current user"""
        try:
            frappe.local.login_manager.logout()
            return {"success": True, "message": "Logged out successfully"}
        except Exception as e:
            frappe.log_error(f"Logout error: {e}")
            return {"success": False, "message": "Logout failed"}
    
    
    def get_user_permissions():
        """Get user permissions for the app"""
        user = frappe.session.user
        permissions = {}
        
        # Check app-level permissions
        permissions["{{app_name}}_access"] = has_app_permission(user)
        
        # Add other permission checks as needed
        # permissions["create_customer"] = frappe.has_permission("Customer", "create")
        # permissions["read_reports"] = frappe.has_permission("Report", "read")
        
        return permissions
    
    
    def has_app_permission(user=None):
        """Check if user has permission to access the app"""
        if not user:
            user = frappe.session.user
        
        if user == "Administrator":
            return True
        
        # Define roles that can access the app
        allowed_roles = ["System Manager", "{{app_name}} User", "{{app_name}} Manager"]
        user_roles = frappe.get_roles(user)
        
        return any(role in allowed_roles for role in user_roles)

  doc_api: |
    # {{app_name}}/api/doc.py
    """
    Generic document operations API
    """
    
    import frappe
    from frappe import _
    from frappe.model.document import Document
    from frappe.query_builder import DocType
    from frappe.utils import cint, flt
    from typing import Optional, Dict, List, Any
    
    
    @frappe.whitelist()
    def get_list(
        doctype: str,
        fields: Optional[str] = None,
        filters: Optional[str] = None,
        order_by: Optional[str] = None,
        limit: int = 20,
        offset: int = 0
    ) -> Dict[str, Any]:
        """
        Get list of documents with proper permissions
        
        Args:
            doctype: DocType name
            fields: JSON string of fields to fetch
            filters: JSON string of filters
            order_by: Order by clause
            limit: Number of records to fetch
            offset: Offset for pagination
        
        Returns:
            dict: List data with pagination info
        """
        try:
            # Permission check
            if not frappe.has_permission(doctype, "read"):
                frappe.throw(_("No permission to read {0}").format(doctype))
            
            # Parse parameters
            fields = frappe.parse_json(fields) if fields else ["*"]
            filters = frappe.parse_json(filters) if filters else {}
            limit = cint(limit) or 20
            offset = cint(offset) or 0
            
            # Validate limit
            if limit > 1000:
                frappe.throw(_("Limit cannot exceed 1000"))
            
            # Get data
            data = frappe.get_all(
                doctype,
                fields=fields,
                filters=filters,
                order_by=order_by or "modified desc",
                limit=limit,
                start=offset
            )
            
            # Get total count for pagination
            total = frappe.db.count(doctype, filters)
            
            return {
                "data": data,
                "total": total,
                "limit": limit,
                "offset": offset,
                "has_more": (offset + limit) < total
            }
            
        except frappe.PermissionError:
            frappe.throw(_("No permission to access {0}").format(doctype))
        except Exception as e:
            frappe.log_error(f"Error in get_list: {e}")
            frappe.throw(_("Failed to fetch data"))
    
    
    @frappe.whitelist()
    def get_doc(doctype: str, name: str) -> Dict[str, Any]:
        """
        Get single document with permissions
        
        Args:
            doctype: DocType name
            name: Document name
        
        Returns:
            dict: Document data
        """
        try:
            if not frappe.has_permission(doctype, "read", doc=name):
                frappe.throw(_("No permission to read {0} {1}").format(doctype, name))
            
            doc = frappe.get_doc(doctype, name)
            return doc.as_dict()
            
        except frappe.DoesNotExistError:
            frappe.throw(_("{0} {1} not found").format(doctype, name))
        except frappe.PermissionError:
            frappe.throw(_("No permission to access {0} {1}").format(doctype, name))
        except Exception as e:
            frappe.log_error(f"Error in get_doc: {e}")
            frappe.throw(_("Failed to fetch document"))
    
    
    @frappe.whitelist()
    def create_doc(doctype: str, data: str) -> Dict[str, Any]:
        """
        Create new document with validation
        
        Args:
            doctype: DocType name
            data: JSON string of document data
        
        Returns:
            dict: Created document data
        """
        try:
            if not frappe.has_permission(doctype, "create"):
                frappe.throw(_("No permission to create {0}").format(doctype))
            
            doc_data = frappe.parse_json(data)
            doc_data["doctype"] = doctype
            
            doc = frappe.get_doc(doc_data)
            doc.insert()
            
            return doc.as_dict()
            
        except frappe.ValidationError as e:
            frappe.throw(str(e))
        except frappe.PermissionError:
            frappe.throw(_("No permission to create {0}").format(doctype))
        except Exception as e:
            frappe.log_error(f"Error in create_doc: {e}")
            frappe.throw(_("Failed to create document"))
    
    
    @frappe.whitelist()
    def update_doc(doctype: str, name: str, data: str) -> Dict[str, Any]:
        """
        Update existing document
        
        Args:
            doctype: DocType name
            name: Document name
            data: JSON string of update data
        
        Returns:
            dict: Updated document data
        """
        try:
            if not frappe.has_permission(doctype, "write", doc=name):
                frappe.throw(_("No permission to update {0} {1}").format(doctype, name))
            
            update_data = frappe.parse_json(data)
            
            doc = frappe.get_doc(doctype, name)
            doc.update(update_data)
            doc.save()
            
            return doc.as_dict()
            
        except frappe.DoesNotExistError:
            frappe.throw(_("{0} {1} not found").format(doctype, name))
        except frappe.ValidationError as e:
            frappe.throw(str(e))
        except frappe.PermissionError:
            frappe.throw(_("No permission to update {0} {1}").format(doctype, name))
        except Exception as e:
            frappe.log_error(f"Error in update_doc: {e}")
            frappe.throw(_("Failed to update document"))
    
    
    @frappe.whitelist()
    def delete_doc(doctype: str, name: str) -> Dict[str, Any]:
        """
        Delete document with permissions
        
        Args:
            doctype: DocType name
            name: Document name
        
        Returns:
            dict: Success message
        """
        try:
            if not frappe.has_permission(doctype, "delete", doc=name):
                frappe.throw(_("No permission to delete {0} {1}").format(doctype, name))
            
            frappe.delete_doc(doctype, name)
            
            return {"success": True, "message": _("Document deleted successfully")}
            
        except frappe.DoesNotExistError:
            frappe.throw(_("{0} {1} not found").format(doctype, name))
        except frappe.PermissionError:
            frappe.throw(_("No permission to delete {0} {1}").format(doctype, name))
        except Exception as e:
            frappe.log_error(f"Error in delete_doc: {e}")
            frappe.throw(_("Failed to delete document"))
    
    
    @frappe.whitelist()
    def get_meta(doctype: str) -> Dict[str, Any]:
        """
        Get DocType metadata
        
        Args:
            doctype: DocType name
        
        Returns:
            dict: DocType metadata
        """
        try:
            if not frappe.has_permission(doctype, "read"):
                frappe.throw(_("No permission to read {0}").format(doctype))
            
            meta = frappe.get_meta(doctype)
            
            return {
                "name": meta.name,
                "title": meta.title or meta.name,
                "fields": [field.as_dict() for field in meta.fields],
                "permissions": meta.permissions,
                "is_submittable": meta.is_submittable,
                "naming_rule": meta.autoname,
            }
            
        except frappe.PermissionError:
            frappe.throw(_("No permission to access {0}").format(doctype))
        except Exception as e:
            frappe.log_error(f"Error in get_meta: {e}")
            frappe.throw(_("Failed to fetch metadata"))

  views_api: |
    # {{app_name}}/api/views.py
    """
    Custom views and dashboard APIs
    """
    
    import frappe
    from frappe import _
    from frappe.utils import flt, cint, getdate, add_days
    from typing import Dict, List, Any
    
    
    @frappe.whitelist()
    def get_dashboard_data() -> Dict[str, Any]:
        """
        Get dashboard statistics and recent activity
        
        Returns:
            dict: Dashboard data including stats and activity
        """
        try:
            # Check app permission
            from {{app_name}}.api.auth import has_app_permission
            if not has_app_permission():
                frappe.throw(_("No permission to access dashboard"))
            
            stats = get_dashboard_stats()
            activity = get_recent_activity()
            charts = get_dashboard_charts()
            
            return {
                "stats": stats,
                "activity": activity,
                "charts": charts,
            }
            
        except Exception as e:
            frappe.log_error(f"Error in get_dashboard_data: {e}")
            frappe.throw(_("Failed to load dashboard data"))
    
    
    def get_dashboard_stats() -> List[Dict[str, Any]]:
        """Get key statistics for dashboard"""
        stats = []
        
        try:
            # Example: Customer count
            customer_count = frappe.db.count("Customer")
            stats.append({
                "label": "Total Customers",
                "value": customer_count,
                "icon": "users",
                "color": "blue",
                "change": get_percentage_change("Customer"),
            })
            
            # Example: Item count
            item_count = frappe.db.count("Item")
            stats.append({
                "label": "Total Items",
                "value": item_count,
                "icon": "package",
                "color": "green",
                "change": get_percentage_change("Item"),
            })
            
            # Add more stats as needed
            
        except Exception as e:
            frappe.log_error(f"Error getting dashboard stats: {e}")
        
        return stats
    
    
    def get_recent_activity(limit: int = 10) -> List[Dict[str, Any]]:
        """Get recent activity across the system"""
        try:
            # Get recent documents across different DocTypes
            activity = []
            
            # Example: Recent customers
            recent_customers = frappe.get_all(
                "Customer",
                fields=["name", "customer_name", "creation", "owner"],
                order_by="creation desc",
                limit=5
            )
            
            for customer in recent_customers:
                activity.append({
                    "type": "create",
                    "doctype": "Customer",
                    "document": customer.name,
                    "title": f"New customer: {customer.customer_name}",
                    "timestamp": customer.creation,
                    "user": customer.owner,
                })
            
            # Sort by timestamp and limit
            activity.sort(key=lambda x: x["timestamp"], reverse=True)
            return activity[:limit]
            
        except Exception as e:
            frappe.log_error(f"Error getting recent activity: {e}")
            return []
    
    
    def get_dashboard_charts() -> List[Dict[str, Any]]:
        """Get chart data for dashboard"""
        try:
            charts = []
            
            # Example: Monthly registration chart
            monthly_data = get_monthly_registrations()
            if monthly_data:
                charts.append({
                    "title": "Monthly Registrations",
                    "type": "line",
                    "data": monthly_data,
                })
            
            return charts
            
        except Exception as e:
            frappe.log_error(f"Error getting dashboard charts: {e}")
            return []
    
    
    def get_percentage_change(doctype: str, days: int = 30) -> float:
        """Calculate percentage change for a DocType over specified days"""
        try:
            today = getdate()
            past_date = add_days(today, -days)
            
            current_count = frappe.db.count(
                doctype,
                filters={"creation": [">=", past_date]}
            )
            
            previous_count = frappe.db.count(
                doctype,
                filters={
                    "creation": [">=", add_days(past_date, -days)],
                    "creation": ["<", past_date]
                }
            )
            
            if previous_count == 0:
                return 100.0 if current_count > 0 else 0.0
            
            return flt((current_count - previous_count) / previous_count * 100, 2)
            
        except Exception as e:
            frappe.log_error(f"Error calculating percentage change: {e}")
            return 0.0
    
    
    def get_monthly_registrations() -> Dict[str, Any]:
        """Get monthly registration data for charts"""
        try:
            # Get last 12 months of data
            data = frappe.db.sql("""
                SELECT 
                    DATE_FORMAT(creation, '%Y-%m') as month,
                    COUNT(*) as count
                FROM `tabCustomer`
                WHERE creation >= DATE_SUB(NOW(), INTERVAL 12 MONTH)
                GROUP BY DATE_FORMAT(creation, '%Y-%m')
                ORDER BY month
            """, as_dict=True)
            
            return {
                "labels": [d.month for d in data],
                "datasets": [{
                    "label": "New Customers",
                    "data": [d.count for d in data],
                    "borderColor": "rgb(59, 130, 246)",
                    "backgroundColor": "rgba(59, 130, 246, 0.1)",
                }]
            }
            
        except Exception as e:
            frappe.log_error(f"Error getting monthly registrations: {e}")
            return {}

  utils_api: |
    # {{app_name}}/api/utils.py
    """
    Utility functions and helper APIs
    """
    
    import frappe
    from frappe import _
    from frappe.utils import validate_email_address, now
    from typing import Dict, List, Any, Optional
    
    
    @frappe.whitelist()
    def search_link(
        doctype: str,
        query: str,
        filters: Optional[str] = None,
        limit: int = 20
    ) -> List[Dict[str, Any]]:
        """
        Search for link field options
        
        Args:
            doctype: DocType to search
            query: Search query
            filters: Additional filters as JSON string
            limit: Maximum results to return
        
        Returns:
            list: Search results
        """
        try:
            if not frappe.has_permission(doctype, "read"):
                return []
            
            filters = frappe.parse_json(filters) if filters else {}
            
            # Add search query to filters
            if query:
                filters["name"] = ["like", f"%{query}%"]
            
            # Get standard fields to search
            meta = frappe.get_meta(doctype)
            title_field = meta.title_field or "name"
            
            fields = ["name"]
            if title_field != "name":
                fields.append(title_field)
            
            # Add common display fields
            if meta.has_field("subject"):
                fields.append("subject")
            if meta.has_field("title"):
                fields.append("title")
            
            results = frappe.get_all(
                doctype,
                fields=list(set(fields)),  # Remove duplicates
                filters=filters,
                limit=cint(limit) or 20,
                order_by="modified desc"
            )
            
            # Format results for display
            formatted_results = []
            for result in results:
                display_name = (
                    result.get(title_field) or 
                    result.get("subject") or 
                    result.get("title") or 
                    result.get("name")
                )
                
                formatted_results.append({
                    "value": result.name,
                    "label": display_name,
                    "description": result.name if display_name != result.name else None,
                })
            
            return formatted_results
            
        except Exception as e:
            frappe.log_error(f"Error in search_link: {e}")
            return []
    
    
    @frappe.whitelist()
    def validate_data(data: str, validation_rules: str) -> Dict[str, Any]:
        """
        Validate data against custom rules
        
        Args:
            data: JSON string of data to validate
            validation_rules: JSON string of validation rules
        
        Returns:
            dict: Validation result
        """
        try:
            data = frappe.parse_json(data)
            rules = frappe.parse_json(validation_rules)
            
            errors = []
            
            for field, rule in rules.items():
                value = data.get(field)
                
                # Required validation
                if rule.get("required") and not value:
                    errors.append(f"{field} is required")
                
                # Email validation
                if rule.get("type") == "email" and value:
                    try:
                        validate_email_address(value)
                    except frappe.InvalidEmailAddressError:
                        errors.append(f"{field} must be a valid email address")
                
                # Length validation
                if value and rule.get("max_length"):
                    if len(str(value)) > rule.get("max_length"):
                        errors.append(f"{field} cannot exceed {rule.get('max_length')} characters")
                
                # Custom pattern validation
                if value and rule.get("pattern"):
                    import re
                    if not re.match(rule.get("pattern"), str(value)):
                        errors.append(f"{field} format is invalid")
            
            return {
                "valid": len(errors) == 0,
                "errors": errors,
            }
            
        except Exception as e:
            frappe.log_error(f"Error in validate_data: {e}")
            return {"valid": False, "errors": ["Validation failed"]}
    
    
    @frappe.whitelist()
    def get_options(doctype: str, field: str) -> List[str]:
        """
        Get select field options
        
        Args:
            doctype: DocType name
            field: Field name
        
        Returns:
            list: Field options
        """
        try:
            if not frappe.has_permission(doctype, "read"):
                return []
            
            meta = frappe.get_meta(doctype)
            field_meta = meta.get_field(field)
            
            if not field_meta:
                return []
            
            if field_meta.fieldtype == "Select":
                options = field_meta.options
                if options:
                    return [opt.strip() for opt in options.split("\n") if opt.strip()]
            
            return []
            
        except Exception as e:
            frappe.log_error(f"Error in get_options: {e}")
            return []
    
    
    @frappe.whitelist()
    def get_user_info(user: Optional[str] = None) -> Dict[str, Any]:
        """
        Get user information
        
        Args:
            user: User email (optional, defaults to current user)
        
        Returns:
            dict: User information
        """
        try:
            if not user:
                user = frappe.session.user
            
            if not frappe.has_permission("User", "read", doc=user):
                frappe.throw(_("No permission to access user information"))
            
            user_doc = frappe.get_doc("User", user)
            
            return {
                "name": user_doc.name,
                "full_name": user_doc.full_name,
                "email": user_doc.email,
                "user_image": user_doc.user_image,
                "roles": frappe.get_roles(user),
                "enabled": user_doc.enabled,
                "last_login": user_doc.last_login,
                "last_ip": user_doc.last_ip,
            }
            
        except Exception as e:
            frappe.log_error(f"Error in get_user_info: {e}")
            frappe.throw(_("Failed to get user information"))

instructions:
  setup:
    - "Create api directory in your app: mkdir -p {{app_name}}/api"
    - "Copy all API module files to {{app_name}}/api/"
    - "Update app permissions in role and user management"
    - "Test API endpoints with proper authentication"
  
  security:
    - "All endpoints use @frappe.whitelist() decorator"
    - "Proper permission checks before any operation"
    - "Input validation and sanitization"
    - "Error logging for debugging and security monitoring"
    - "Rate limiting can be added at nginx/application level"
  
  integration:
    - "APIs follow Frappe conventions and patterns"
    - "Consistent error handling and response format"
    - "Support for pagination and filtering"
    - "Integration with Frappe's permission system"
    - "Automatic CSRF protection when called from frontend"
  
  customization:
    - "Add app-specific API endpoints in {{module_name}}.py"
    - "Extend permission checking for complex business rules"
    - "Add custom validation logic in utils.py"
    - "Implement app-specific dashboard metrics"