---
template_name: "Service Worker Template"
template_type: "pwa_service_worker"
version: "1.0.0"
description: "Template for implementing service workers for Progressive Web Apps in ERPNext"

# Service worker structure
service_worker_structure:
  basic_service_worker: |
    // Service Worker Version
    const CACHE_VERSION = 'v{VERSION}';
    const CACHE_NAME = `{APP_NAME}-${CACHE_VERSION}`;
    
    // Assets to cache
    const STATIC_CACHE_URLS = [
      '/',
      '/index.html',
      '/manifest.json',
      '/css/app.css',
      '/js/app.js',
      '/images/logo.png',
      '/images/icons/icon-192x192.png',
      '/images/icons/icon-512x512.png',
      '/offline.html'
    ];
    
    // Install event - cache static assets
    self.addEventListener('install', (event) => {
      console.log('[ServiceWorker] Install');
      
      event.waitUntil(
        caches.open(CACHE_NAME)
          .then((cache) => {
            console.log('[ServiceWorker] Caching app shell');
            return cache.addAll(STATIC_CACHE_URLS);
          })
          .then(() => self.skipWaiting())
      );
    });
    
    // Activate event - clean up old caches
    self.addEventListener('activate', (event) => {
      console.log('[ServiceWorker] Activate');
      
      event.waitUntil(
        caches.keys().then((cacheNames) => {
          return Promise.all(
            cacheNames
              .filter((cacheName) => cacheName !== CACHE_NAME)
              .map((cacheName) => {
                console.log('[ServiceWorker] Removing old cache:', cacheName);
                return caches.delete(cacheName);
              })
          );
        }).then(() => self.clients.claim())
      );
    });
    
    // Fetch event - serve from cache or network
    self.addEventListener('fetch', (event) => {
      event.respondWith(
        caches.match(event.request)
          .then((response) => {
            // Cache hit - return response
            if (response) {
              return response;
            }
            return fetch(event.request);
          })
          .catch(() => {
            // Offline fallback
            if (event.request.mode === 'navigate') {
              return caches.match('/offline.html');
            }
          })
      );
    });

  advanced_service_worker: |
    import { precacheAndRoute } from 'workbox-precaching';
    import { registerRoute } from 'workbox-routing';
    import { StaleWhileRevalidate, CacheFirst, NetworkFirst } from 'workbox-strategies';
    import { ExpirationPlugin } from 'workbox-expiration';
    import { CacheableResponsePlugin } from 'workbox-cacheable-response';
    import { BackgroundSyncPlugin } from 'workbox-background-sync';
    
    // Precache files
    precacheAndRoute(self.__WB_MANIFEST);
    
    // Cache strategies
    const cacheStrategies = {
      staleWhileRevalidate: new StaleWhileRevalidate({
        cacheName: 'dynamic-cache',
        plugins: [
          new CacheableResponsePlugin({
            statuses: [0, 200]
          }),
          new ExpirationPlugin({
            maxEntries: 50,
            maxAgeSeconds: 30 * 24 * 60 * 60 // 30 days
          })
        ]
      }),
      
      cacheFirst: new CacheFirst({
        cacheName: 'static-cache',
        plugins: [
          new CacheableResponsePlugin({
            statuses: [0, 200]
          }),
          new ExpirationPlugin({
            maxEntries: 100,
            maxAgeSeconds: 60 * 24 * 60 * 60 // 60 days
          })
        ]
      }),
      
      networkFirst: new NetworkFirst({
        cacheName: 'api-cache',
        networkTimeoutSeconds: 5,
        plugins: [
          new CacheableResponsePlugin({
            statuses: [0, 200]
          }),
          new ExpirationPlugin({
            maxEntries: 50,
            maxAgeSeconds: 5 * 60 // 5 minutes
          })
        ]
      })
    };

# Caching strategies
caching_strategies:
  static_assets: |
    // Cache static assets (CSS, JS, fonts)
    registerRoute(
      ({ request }) => 
        request.destination === 'style' ||
        request.destination === 'script' ||
        request.destination === 'font',
      new CacheFirst({
        cacheName: 'static-resources',
        plugins: [
          new CacheableResponsePlugin({
            statuses: [0, 200]
          }),
          new ExpirationPlugin({
            maxEntries: 60,
            maxAgeSeconds: 30 * 24 * 60 * 60 // 30 days
          })
        ]
      })
    );

  images: |
    // Cache images
    registerRoute(
      ({ request }) => request.destination === 'image',
      new CacheFirst({
        cacheName: 'images',
        plugins: [
          new CacheableResponsePlugin({
            statuses: [0, 200]
          }),
          new ExpirationPlugin({
            maxEntries: 100,
            maxAgeSeconds: 30 * 24 * 60 * 60, // 30 days
            purgeOnQuotaError: true
          })
        ]
      })
    );

  api_requests: |
    // Cache API requests
    registerRoute(
      ({ url }) => url.pathname.startsWith('/api/'),
      new NetworkFirst({
        cacheName: 'api-cache',
        networkTimeoutSeconds: 5,
        plugins: [
          new CacheableResponsePlugin({
            statuses: [0, 200],
            headers: {
              'X-Is-Cacheable': 'true'
            }
          }),
          new ExpirationPlugin({
            maxEntries: 50,
            maxAgeSeconds: 5 * 60 // 5 minutes
          })
        ]
      })
    );

  html_pages: |
    // Cache HTML pages
    registerRoute(
      ({ request }) => request.mode === 'navigate',
      new NetworkFirst({
        cacheName: 'pages',
        plugins: [
          new CacheableResponsePlugin({
            statuses: [0, 200]
          })
        ]
      })
    );

# Offline functionality
offline_functionality:
  offline_detection: |
    // Detect online/offline status
    self.addEventListener('online', () => {
      console.log('[ServiceWorker] Online');
      // Sync any queued data
      syncQueuedData();
    });
    
    self.addEventListener('offline', () => {
      console.log('[ServiceWorker] Offline');
      // Show offline notification
      self.registration.showNotification('You are offline', {
        body: 'Some features may be limited',
        icon: '/images/icons/offline.png'
      });
    });

  offline_queue: |
    // Queue for offline requests
    const requestQueue = [];
    
    // Handle failed requests
    const queueFailedRequest = (request) => {
      const serializedRequest = {
        url: request.url,
        method: request.method,
        headers: Object.fromEntries(request.headers.entries()),
        body: request.body,
        mode: request.mode,
        credentials: request.credentials,
        cache: request.cache,
        redirect: request.redirect,
        referrer: request.referrer
      };
      
      requestQueue.push(serializedRequest);
      
      // Store in IndexedDB for persistence
      saveToIndexedDB('offline-queue', serializedRequest);
    };
    
    // Sync queued requests when online
    const syncQueuedData = async () => {
      const queue = await getFromIndexedDB('offline-queue');
      
      for (const request of queue) {
        try {
          const response = await fetch(request.url, {
            method: request.method,
            headers: request.headers,
            body: request.body
          });
          
          if (response.ok) {
            // Remove from queue
            await removeFromIndexedDB('offline-queue', request);
          }
        } catch (error) {
          console.error('[ServiceWorker] Sync failed:', error);
        }
      }
    };

  offline_page: |
    <!-- offline.html -->
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Offline - {APP_NAME}</title>
      <style>
        body {
          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, sans-serif;
          display: flex;
          justify-content: center;
          align-items: center;
          height: 100vh;
          margin: 0;
          background: #f5f5f5;
        }
        .offline-container {
          text-align: center;
          padding: 2rem;
        }
        .offline-icon {
          width: 120px;
          height: 120px;
          margin: 0 auto 1rem;
        }
        h1 {
          color: #333;
          margin-bottom: 0.5rem;
        }
        p {
          color: #666;
          margin-bottom: 1.5rem;
        }
        .btn {
          display: inline-block;
          padding: 0.75rem 1.5rem;
          background: #007bff;
          color: white;
          text-decoration: none;
          border-radius: 4px;
        }
      </style>
    </head>
    <body>
      <div class="offline-container">
        <svg class="offline-icon" viewBox="0 0 24 24">
          <path fill="#ccc" d="M1,21L12,2L23,21H1Z M3.5,19H20.5L12,5.5L3.5,19Z"/>
          <path fill="#666" d="M11,14H13V16H11V14M11,10H13V13H11V10Z"/>
        </svg>
        <h1>You're Offline</h1>
        <p>It looks like you've lost your internet connection.<br>Some features may not be available.</p>
        <a href="/" class="btn" onclick="window.location.reload()">Try Again</a>
      </div>
    </body>
    </html>

# Background sync
background_sync:
  basic_sync: |
    // Register background sync
    self.addEventListener('sync', (event) => {
      if (event.tag === 'sync-data') {
        event.waitUntil(syncData());
      }
    });
    
    const syncData = async () => {
      try {
        // Get pending data from IndexedDB
        const pendingData = await getPendingData();
        
        // Sync each item
        for (const item of pendingData) {
          await syncItem(item);
        }
        
        // Clear synced data
        await clearPendingData();
        
        // Notify client
        self.clients.matchAll().then(clients => {
          clients.forEach(client => {
            client.postMessage({
              type: 'SYNC_COMPLETE',
              message: 'Data synchronized successfully'
            });
          });
        });
      } catch (error) {
        console.error('[ServiceWorker] Sync failed:', error);
        // Retry later
        throw error;
      }
    };

  periodic_sync: |
    // Periodic background sync (requires permission)
    self.addEventListener('periodicsync', (event) => {
      if (event.tag === 'update-data') {
        event.waitUntil(updateData());
      }
    });
    
    const updateData = async () => {
      // Fetch latest data
      const response = await fetch('/api/updates');
      const data = await response.json();
      
      // Update cache
      const cache = await caches.open('data-cache');
      await cache.put('/api/updates', new Response(JSON.stringify(data)));
      
      // Notify if there are updates
      if (data.hasUpdates) {
        self.registration.showNotification('New Updates Available', {
          body: data.updateMessage,
          icon: '/images/icons/update.png',
          badge: '/images/icons/badge.png'
        });
      }
    };

# Push notifications
push_notifications:
  push_listener: |
    // Push notification listener
    self.addEventListener('push', (event) => {
      const options = {
        body: 'Default notification body',
        icon: '/images/icons/icon-192x192.png',
        badge: '/images/icons/badge-72x72.png',
        vibrate: [100, 50, 100],
        data: {
          dateOfArrival: Date.now(),
          primaryKey: 1
        },
        actions: [
          {
            action: 'view',
            title: 'View',
            icon: '/images/icons/view.png'
          },
          {
            action: 'close',
            title: 'Close',
            icon: '/images/icons/close.png'
          }
        ]
      };
      
      if (event.data) {
        const data = event.data.json();
        options.body = data.body || options.body;
        options.title = data.title || 'Notification';
        options.icon = data.icon || options.icon;
        options.data = data.data || options.data;
      }
      
      event.waitUntil(
        self.registration.showNotification(options.title, options)
      );
    });

  notification_click: |
    // Handle notification clicks
    self.addEventListener('notificationclick', (event) => {
      event.notification.close();
      
      if (event.action === 'view') {
        // Open specific page
        event.waitUntil(
          clients.openWindow(event.notification.data.url || '/')
        );
      } else if (event.action === 'close') {
        // Just close the notification
        return;
      } else {
        // Default action - focus or open app
        event.waitUntil(
          clients.matchAll({
            type: 'window',
            includeUncontrolled: true
          }).then((clientList) => {
            // Focus if app is open
            for (const client of clientList) {
              if (client.url === '/' && 'focus' in client) {
                return client.focus();
              }
            }
            // Open new window if not open
            if (clients.openWindow) {
              return clients.openWindow('/');
            }
          })
        );
      }
    });

# Message handling
message_handling:
  client_communication: |
    // Listen for messages from clients
    self.addEventListener('message', (event) => {
      switch (event.data.type) {
        case 'SKIP_WAITING':
          self.skipWaiting();
          break;
          
        case 'CACHE_URLS':
          event.waitUntil(
            cacheUrls(event.data.urls)
          );
          break;
          
        case 'CLEAR_CACHE':
          event.waitUntil(
            clearCache(event.data.cacheName)
          );
          break;
          
        case 'GET_VERSION':
          event.ports[0].postMessage({
            version: CACHE_VERSION
          });
          break;
          
        default:
          console.log('[ServiceWorker] Unknown message type:', event.data.type);
      }
    });
    
    // Send message to all clients
    const broadcastMessage = (message) => {
      self.clients.matchAll().then(clients => {
        clients.forEach(client => {
          client.postMessage(message);
        });
      });
    };

  update_notification: |
    // Notify clients of updates
    self.addEventListener('activate', (event) => {
      event.waitUntil(
        self.clients.claim().then(() => {
          broadcastMessage({
            type: 'SERVICE_WORKER_UPDATED',
            version: CACHE_VERSION
          });
        })
      );
    });

# IndexedDB integration
indexeddb_integration:
  database_setup: |
    // IndexedDB setup
    const DB_NAME = '{APP_NAME}_offline';
    const DB_VERSION = 1;
    
    const openDatabase = () => {
      return new Promise((resolve, reject) => {
        const request = indexedDB.open(DB_NAME, DB_VERSION);
        
        request.onerror = () => reject(request.error);
        request.onsuccess = () => resolve(request.result);
        
        request.onupgradeneeded = (event) => {
          const db = event.target.result;
          
          // Create object stores
          if (!db.objectStoreNames.contains('offline-queue')) {
            db.createObjectStore('offline-queue', { keyPath: 'id', autoIncrement: true });
          }
          
          if (!db.objectStoreNames.contains('cached-data')) {
            const store = db.createObjectStore('cached-data', { keyPath: 'key' });
            store.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
      });
    };

  data_operations: |
    // Save data to IndexedDB
    const saveToIndexedDB = async (storeName, data) => {
      const db = await openDatabase();
      const transaction = db.transaction([storeName], 'readwrite');
      const store = transaction.objectStore(storeName);
      
      return new Promise((resolve, reject) => {
        const request = store.add(data);
        request.onsuccess = () => resolve(request.result);
        request.onerror = () => reject(request.error);
      });
    };
    
    // Get data from IndexedDB
    const getFromIndexedDB = async (storeName, key = null) => {
      const db = await openDatabase();
      const transaction = db.transaction([storeName], 'readonly');
      const store = transaction.objectStore(storeName);
      
      return new Promise((resolve, reject) => {
        const request = key ? store.get(key) : store.getAll();
        request.onsuccess = () => resolve(request.result);
        request.onerror = () => reject(request.error);
      });
    };
    
    // Remove data from IndexedDB
    const removeFromIndexedDB = async (storeName, key) => {
      const db = await openDatabase();
      const transaction = db.transaction([storeName], 'readwrite');
      const store = transaction.objectStore(storeName);
      
      return new Promise((resolve, reject) => {
        const request = store.delete(key);
        request.onsuccess = () => resolve();
        request.onerror = () => reject(request.error);
      });
    };

# Performance optimization
performance_optimization:
  navigation_preload: |
    // Enable navigation preload
    self.addEventListener('activate', (event) => {
      event.waitUntil(
        (async () => {
          if (self.registration.navigationPreload) {
            await self.registration.navigationPreload.enable();
          }
        })()
      );
    });
    
    // Use preloaded response
    self.addEventListener('fetch', (event) => {
      if (event.request.mode === 'navigate') {
        event.respondWith(
          (async () => {
            const preloadResponse = await event.preloadResponse;
            if (preloadResponse) {
              return preloadResponse;
            }
            
            const cache = await caches.open(CACHE_NAME);
            const cachedResponse = await cache.match(event.request);
            
            return cachedResponse || fetch(event.request);
          })()
        );
      }
    });

  resource_hints: |
    // Prefetch critical resources
    const prefetchResources = async () => {
      const criticalResources = [
        '/api/user/profile',
        '/api/dashboard/data',
        '/css/critical.css',
        '/js/vendor.bundle.js'
      ];
      
      const cache = await caches.open('prefetch-cache');
      
      for (const url of criticalResources) {
        try {
          const response = await fetch(url);
          if (response.ok) {
            await cache.put(url, response);
          }
        } catch (error) {
          console.error(`[ServiceWorker] Failed to prefetch ${url}:`, error);
        }
      }
    };

# Error handling
error_handling:
  fetch_error_handling: |
    self.addEventListener('fetch', (event) => {
      event.respondWith(
        fetch(event.request)
          .then(response => {
            // Check if response is valid
            if (!response || response.status !== 200 || response.type !== 'basic') {
              return response;
            }
            
            // Clone response for caching
            const responseToCache = response.clone();
            
            caches.open(CACHE_NAME)
              .then(cache => {
                cache.put(event.request, responseToCache);
              });
            
            return response;
          })
          .catch(error => {
            console.error('[ServiceWorker] Fetch failed:', error);
            
            // Try to serve from cache
            return caches.match(event.request)
              .then(cachedResponse => {
                if (cachedResponse) {
                  return cachedResponse;
                }
                
                // Return offline page for navigation requests
                if (event.request.mode === 'navigate') {
                  return caches.match('/offline.html');
                }
                
                // Return error response
                return new Response('Network error', {
                  status: 503,
                  statusText: 'Service Unavailable',
                  headers: new Headers({
                    'Content-Type': 'text/plain'
                  })
                });
              });
          })
      );
    });

# Registration script
registration_script: |
  // Register service worker (in main app)
  if ('serviceWorker' in navigator) {
    window.addEventListener('load', () => {
      navigator.serviceWorker.register('/service-worker.js')
        .then(registration => {
          console.log('ServiceWorker registered:', registration);
          
          // Check for updates
          registration.addEventListener('updatefound', () => {
            const newWorker = registration.installing;
            
            newWorker.addEventListener('statechange', () => {
              if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
                // New service worker available
                showUpdateNotification();
              }
            });
          });
        })
        .catch(error => {
          console.error('ServiceWorker registration failed:', error);
        });
    });
    
    // Handle controller change
    navigator.serviceWorker.addEventListener('controllerchange', () => {
      window.location.reload();
    });
    
    // Listen for messages from service worker
    navigator.serviceWorker.addEventListener('message', (event) => {
      handleServiceWorkerMessage(event.data);
    });
  }

# Best practices
best_practices:
  - "Version your service worker and caches"
  - "Implement proper cache invalidation"
  - "Use appropriate caching strategies for different resources"
  - "Handle offline scenarios gracefully"
  - "Implement background sync for offline actions"
  - "Clean up old caches during activation"
  - "Use navigation preload for better performance"
  - "Implement proper error handling"
  - "Test service worker updates thoroughly"
  - "Monitor cache storage usage"
  - "Implement cache expiration policies"
  - "Use IndexedDB for complex offline data"
  - "Provide offline fallback pages"
  - "Handle push notifications properly"
  - "Test on various network conditions"