name: "example-app-template"
title: "Complete Working Example App Implementation"
description: "Full-featured customer management app demonstrating all modern patterns"
version: "2.0.0"

parameters:
  app_name:
    type: "string"
    required: true
    description: "Name of the example app (default: customer_portal)"
    default: "customer_portal"
  site_name:
    type: "string"
    required: true
    description: "Site name for development"

templates:
  app_structure: |
    # Complete App Structure for {{app_name}}
    
    {{app_name}}/
    ├── {{app_name}}/
    │   ├── __init__.py
    │   ├── hooks.py                    # App configuration
    │   ├── modules.txt                 # Module definitions
    │   ├── patches.txt                 # Database patches
    │   │
    │   ├── api/                        # Backend API modules
    │   │   ├── __init__.py
    │   │   ├── auth.py                 # Authentication APIs
    │   │   ├── customer.py             # Customer management APIs
    │   │   ├── order.py                # Order management APIs
    │   │   └── dashboard.py            # Dashboard APIs
    │   │
    │   ├── customer_management/        # Main module
    │   │   ├── doctype/
    │   │   │   ├── customer_profile/   # Custom customer profile
    │   │   │   │   ├── customer_profile.json
    │   │   │   │   ├── customer_profile.py
    │   │   │   │   └── customer_profile.js
    │   │   │   │
    │   │   │   ├── customer_order/     # Customer orders
    │   │   │   │   ├── customer_order.json
    │   │   │   │   ├── customer_order.py
    │   │   │   │   └── customer_order.js
    │   │   │   │
    │   │   │   └── order_item/         # Child table for order items
    │   │   │       ├── order_item.json
    │   │   │       └── order_item.py
    │   │   │
    │   │   ├── report/                 # Custom reports
    │   │   │   └── customer_analytics/
    │   │   │       ├── customer_analytics.py
    │   │   │       └── customer_analytics.js
    │   │   │
    │   │   └── web_form/               # Public web forms
    │   │       └── customer_registration/
    │   │           ├── customer_registration.py
    │   │           └── customer_registration.json
    │   │
    │   ├── templates/                  # Jinja templates
    │   │   ├── base.html
    │   │   └── pages/
    │   │       └── app.html
    │   │
    │   ├── www/                        # Web pages
    │   │   └── app.py                  # SPA entry point
    │   │
    │   └── public/                     # Static assets
    │       ├── css/
    │       ├── js/
    │       └── images/
    │
    │   └── public/                     # Native Vue components
    │       ├── js/
    │       │   ├── dashboard.bundle.js         # Dashboard entry point
    │       │   ├── dashboard/
    │       │   │   ├── Dashboard.vue
    │       │   │   ├── components/
    │       │   │   │   ├── MetricCard.vue
    │       │   │   │   └── RecentActivity.vue
    │       │   │   └── stores/
    │       │   │       └── dashboard.js
    │       │   │
    │       │   ├── customer.bundle.js          # Customer management entry
    │       │   ├── customer/
    │       │   │   ├── CustomerList.vue
    │       │   │   ├── CustomerDetail.vue
    │       │   │   ├── components/
    │       │   │   │   ├── CustomerForm.vue
    │       │   │   │   ├── CustomerCard.vue
    │       │   │   │   └── ContactInfo.vue
    │       │   │   └── stores/
    │       │   │       └── customer.js
    │       │   │
    │       │   ├── order.bundle.js             # Order management entry
    │       │   ├── order/
    │       │   │   ├── OrderList.vue
    │       │   │   ├── OrderDetail.vue
    │       │   │   ├── components/
    │       │   │   │   ├── OrderForm.vue
    │       │   │   │   ├── OrderItem.vue
    │       │   │   │   └── OrderStatus.vue
    │       │   │   └── stores/
    │       │   │       └── order.js
    │       │   │
    │       │   └── common/
    │       │       ├── DataTable.vue
    │       │       ├── LoadingSpinner.vue
    │       │       └── ErrorMessage.vue
    │       │
    │       ├── css/
    │       │   └── {{app_name}}.css
    │       └── images/
    │
    ├── requirements.txt
    └── setup.py

  hooks_py: |
    # {{app_name}}/hooks.py
    app_name = "{{app_name}}"
    app_title = "Customer Portal"
    app_publisher = "BMAD Team"
    app_description = "Modern customer management portal with Vue SPA frontend"
    app_version = "1.0.0"
    app_icon = "fa fa-users"
    app_color = "#3B82F6"

    # Required apps
    required_apps = ["frappe", "erpnext"]

    # Included in modules
    modules_path = "{{app_name}}.modules"

    # Website routing for SPA
    website_route_rules = [
        {"from_route": "/{{app_name}}/<path:app_path>", "to_route": "{{app_name}}"},
    ]

    # Add to Desk
    add_to_apps_screen = [
        {
            "name": "{{app_name}}",
            "logo": "/assets/{{app_name}}/images/logo.svg",
            "title": "Customer Portal",
            "route": "/{{app_name}}",
            "has_permission": "{{app_name}}.api.auth.has_app_permission"
        }
    ]

    # Document Events for real-time updates
    doc_events = {
        "Customer": {
            "after_insert": "{{app_name}}.realtime_hooks.emit_document_create",
            "on_update": "{{app_name}}.realtime_hooks.emit_document_update",
            "on_trash": "{{app_name}}.realtime_hooks.emit_document_delete",
        },
        "Sales Order": {
            "after_insert": "{{app_name}}.realtime_hooks.emit_document_create",
            "on_update": "{{app_name}}.realtime_hooks.emit_document_update",
            "on_submit": "{{app_name}}.realtime_hooks.emit_document_update",
            "on_cancel": "{{app_name}}.realtime_hooks.emit_document_update",
        },
        "Customer Profile": {
            "after_insert": "{{app_name}}.realtime_hooks.emit_document_create",
            "on_update": "{{app_name}}.realtime_hooks.emit_document_update",
        }
    }

    # Scheduled Tasks
    scheduler_events = {
        "daily": [
            "{{app_name}}.tasks.daily_cleanup",
            "{{app_name}}.tasks.send_daily_reports"
        ],
        "hourly": [
            "{{app_name}}.tasks.sync_customer_data"
        ]
    }

    # Permissions
    permission_query_conditions = {
        "Customer": "{{app_name}}.permissions.get_customer_permission_query_conditions",
        "Sales Order": "{{app_name}}.permissions.get_order_permission_query_conditions",
    }

    has_permission = {
        "Customer": "{{app_name}}.permissions.has_customer_permission",
        "Sales Order": "{{app_name}}.permissions.has_order_permission",
    }

    # Boot session
    boot_session = "{{app_name}}.boot.boot_session"

    # Website context
    website_context = {
        "favicon": "/assets/{{app_name}}/images/favicon.ico",
        "splash_image": "/assets/{{app_name}}/images/splash.png"
    }

    # Override standard methods
    override_whitelisted_methods = {
        "frappe.desk.doctype.event.event.get_events": "{{app_name}}.overrides.get_events"
    }

  customer_profile_json: |
    {
        "actions": [],
        "allow_copy": 0,
        "allow_events_in_timeline": 0,
        "allow_guest_to_view": 0,
        "allow_import": 1,
        "allow_rename": 0,
        "autoname": "naming_series:",
        "beta": 0,
        "creation": "2024-01-01 00:00:00.000000",
        "custom": 0,
        "docstatus": 0,
        "doctype": "DocType",
        "document_type": "Document",
        "engine": "InnoDB",
        "field_order": [
            "naming_series",
            "customer",
            "customer_name",
            "column_break_4",
            "email",
            "phone",
            "section_break_7",
            "address_line_1",
            "address_line_2",
            "column_break_10",
            "city",
            "state",
            "postal_code",
            "country",
            "section_break_15",
            "preferences",
            "communication_preferences",
            "column_break_18",
            "preferred_language",
            "timezone",
            "section_break_21",
            "notes",
            "tags",
            "section_break_24",
            "profile_image",
            "last_activity"
        ],
        "fields": [
            {
                "fieldname": "naming_series",
                "fieldtype": "Select",
                "label": "Series",
                "options": "CUST-PROF-.####",
                "reqd": 1
            },
            {
                "fieldname": "customer",
                "fieldtype": "Link",
                "label": "Customer",
                "options": "Customer",
                "reqd": 1,
                "unique": 1
            },
            {
                "fieldname": "customer_name",
                "fieldtype": "Data",
                "label": "Customer Name",
                "reqd": 1
            },
            {
                "fieldname": "column_break_4",
                "fieldtype": "Column Break"
            },
            {
                "fieldname": "email",
                "fieldtype": "Data",
                "label": "Email",
                "options": "Email"
            },
            {
                "fieldname": "phone",
                "fieldtype": "Data",
                "label": "Phone",
                "options": "Phone"
            },
            {
                "fieldname": "section_break_7",
                "fieldtype": "Section Break",
                "label": "Address Information"
            },
            {
                "fieldname": "address_line_1",
                "fieldtype": "Data",
                "label": "Address Line 1"
            },
            {
                "fieldname": "address_line_2",
                "fieldtype": "Data",
                "label": "Address Line 2"
            },
            {
                "fieldname": "column_break_10",
                "fieldtype": "Column Break"
            },
            {
                "fieldname": "city",
                "fieldtype": "Data",
                "label": "City"
            },
            {
                "fieldname": "state",
                "fieldtype": "Data",
                "label": "State"
            },
            {
                "fieldname": "postal_code",
                "fieldtype": "Data",
                "label": "Postal Code"
            },
            {
                "fieldname": "country",
                "fieldtype": "Link",
                "label": "Country",
                "options": "Country"
            },
            {
                "fieldname": "section_break_15",
                "fieldtype": "Section Break",
                "label": "Preferences"
            },
            {
                "fieldname": "preferences",
                "fieldtype": "Text",
                "label": "Customer Preferences"
            },
            {
                "fieldname": "communication_preferences",
                "fieldtype": "Select",
                "label": "Communication Preferences",
                "options": "Email\nPhone\nSMS\nWhatsApp"
            },
            {
                "fieldname": "column_break_18",
                "fieldtype": "Column Break"
            },
            {
                "fieldname": "preferred_language",
                "fieldtype": "Select",
                "label": "Preferred Language",
                "options": "English\nSpanish\nFrench\nGerman"
            },
            {
                "fieldname": "timezone",
                "fieldtype": "Select",
                "label": "Timezone",
                "options": "UTC\nAmerica/New_York\nAmerica/Los_Angeles\nEurope/London\nAsia/Tokyo"
            },
            {
                "fieldname": "section_break_21",
                "fieldtype": "Section Break",
                "label": "Additional Information"
            },
            {
                "fieldname": "notes",
                "fieldtype": "Text Editor",
                "label": "Notes"
            },
            {
                "fieldname": "tags",
                "fieldtype": "Data",
                "label": "Tags"
            },
            {
                "fieldname": "section_break_24",
                "fieldtype": "Section Break",
                "label": "Profile"
            },
            {
                "fieldname": "profile_image",
                "fieldtype": "Attach Image",
                "label": "Profile Image"
            },
            {
                "fieldname": "last_activity",
                "fieldtype": "Datetime",
                "label": "Last Activity",
                "read_only": 1
            }
        ],
        "has_web_view": 0,
        "hide_heading": 0,
        "hide_toolbar": 0,
        "icon": "fa fa-user",
        "idx": 0,
        "image_view": 0,
        "in_create": 0,
        "is_submittable": 0,
        "is_tree": 0,
        "issingle": 0,
        "istable": 0,
        "max_attachments": 5,
        "modified": "2024-01-01 00:00:00.000000",
        "modified_by": "Administrator",
        "module": "Customer Management",
        "name": "Customer Profile",
        "naming_rule": "By \"Naming Series\" field",
        "owner": "Administrator",
        "permissions": [
            {
                "create": 1,
                "delete": 1,
                "email": 1,
                "export": 1,
                "print": 1,
                "read": 1,
                "report": 1,
                "role": "Customer Manager",
                "share": 1,
                "write": 1
            },
            {
                "email": 1,
                "export": 1,
                "print": 1,
                "read": 1,
                "report": 1,
                "role": "Customer User",
                "share": 1
            }
        ],
        "quick_entry": 1,
        "read_only": 0,
        "read_only_onload": 0,
        "search_fields": "customer_name,email,phone,city",
        "show_name_in_global_search": 1,
        "sort_field": "modified",
        "sort_order": "DESC",
        "title_field": "customer_name",
        "track_changes": 1,
        "track_seen": 1,
        "track_views": 1
    }

  customer_profile_py: |
    # {{app_name}}/customer_management/doctype/customer_profile/customer_profile.py

    import frappe
    from frappe.model.document import Document
    from frappe.utils import now, validate_email_address
    from frappe import _


    class CustomerProfile(Document):
        def validate(self):
            """Validate customer profile data"""
            self.validate_email()
            self.validate_customer_link()
            self.update_last_activity()
            
        def before_insert(self):
            """Before inserting new customer profile"""
            self.sync_customer_data()
            
        def on_update(self):
            """After updating customer profile"""
            self.sync_back_to_customer()
            
        def validate_email(self):
            """Validate email format"""
            if self.email:
                try:
                    validate_email_address(self.email)
                except frappe.InvalidEmailAddressError:
                    frappe.throw(_("Please enter a valid email address"))
                    
        def validate_customer_link(self):
            """Ensure customer exists and is unique"""
            if self.customer:
                # Check if customer exists
                if not frappe.db.exists("Customer", self.customer):
                    frappe.throw(_("Customer {0} does not exist").format(self.customer))
                
                # Check if profile already exists for this customer
                existing = frappe.db.get_value(
                    "Customer Profile", 
                    {"customer": self.customer, "name": ["!=", self.name]}, 
                    "name"
                )
                if existing:
                    frappe.throw(_("Customer Profile already exists for {0}").format(self.customer))
                    
        def sync_customer_data(self):
            """Sync data from Customer doctype"""
            if self.customer:
                customer_doc = frappe.get_doc("Customer", self.customer)
                
                # Update basic information
                if not self.customer_name:
                    self.customer_name = customer_doc.customer_name
                    
                # Sync contact information
                contact = get_customer_primary_contact(self.customer)
                if contact:
                    if not self.email and contact.email_id:
                        self.email = contact.email_id
                    if not self.phone and contact.phone:
                        self.phone = contact.phone
                        
                # Sync address information
                address = get_customer_primary_address(self.customer)
                if address:
                    if not self.address_line_1 and address.address_line1:
                        self.address_line_1 = address.address_line1
                    if not self.address_line_2 and address.address_line2:
                        self.address_line_2 = address.address_line2
                    if not self.city and address.city:
                        self.city = address.city
                    if not self.state and address.state:
                        self.state = address.state
                    if not self.postal_code and address.pincode:
                        self.postal_code = address.pincode
                    if not self.country and address.country:
                        self.country = address.country
                        
        def sync_back_to_customer(self):
            """Sync changes back to Customer doctype"""
            if not self.customer:
                return
                
            customer_doc = frappe.get_doc("Customer", self.customer)
            
            # Update customer name if changed
            if self.customer_name != customer_doc.customer_name:
                customer_doc.customer_name = self.customer_name
                customer_doc.save(ignore_permissions=True)
                
        def update_last_activity(self):
            """Update last activity timestamp"""
            self.last_activity = now()
            
        def get_dashboard_data(self):
            """Get data for customer dashboard"""
            return {
                "orders": get_customer_orders(self.customer),
                "invoices": get_customer_invoices(self.customer),
                "payments": get_customer_payments(self.customer),
                "support_tickets": get_customer_support_tickets(self.customer),
            }
            
        def get_activity_timeline(self, limit=10):
            """Get customer activity timeline"""
            activities = []
            
            # Recent orders
            orders = frappe.get_all(
                "Sales Order",
                filters={"customer": self.customer},
                fields=["name", "transaction_date", "grand_total", "status"],
                order_by="creation desc",
                limit=limit//2
            )
            
            for order in orders:
                activities.append({
                    "type": "order",
                    "title": f"Order {order.name}",
                    "description": f"Amount: {order.grand_total}, Status: {order.status}",
                    "timestamp": order.transaction_date,
                    "icon": "shopping-cart",
                    "color": "blue"
                })
                
            # Recent support tickets (if exists)
            tickets = frappe.get_all(
                "Issue",
                filters={"customer": self.customer},
                fields=["name", "creation", "subject", "status"],
                order_by="creation desc",
                limit=limit//2
            )
            
            for ticket in tickets:
                activities.append({
                    "type": "support",
                    "title": f"Ticket {ticket.name}",
                    "description": ticket.subject,
                    "timestamp": ticket.creation,
                    "icon": "help-circle",
                    "color": "orange"
                })
                
            # Sort by timestamp and limit
            activities.sort(key=lambda x: x["timestamp"], reverse=True)
            return activities[:limit]


    def get_customer_primary_contact(customer):
        """Get primary contact for customer"""
        contact_name = frappe.db.get_value(
            "Dynamic Link",
            {"link_doctype": "Customer", "link_name": customer, "parenttype": "Contact"},
            "parent"
        )
        
        if contact_name:
            return frappe.get_doc("Contact", contact_name)
        return None


    def get_customer_primary_address(customer):
        """Get primary address for customer"""
        address_name = frappe.db.get_value(
            "Dynamic Link",
            {"link_doctype": "Customer", "link_name": customer, "parenttype": "Address"},
            "parent"
        )
        
        if address_name:
            return frappe.get_doc("Address", address_name)
        return None


    def get_customer_orders(customer, limit=5):
        """Get recent customer orders"""
        return frappe.get_all(
            "Sales Order",
            filters={"customer": customer},
            fields=[
                "name", "transaction_date", "grand_total", 
                "status", "delivery_date", "currency"
            ],
            order_by="creation desc",
            limit=limit
        )


    def get_customer_invoices(customer, limit=5):
        """Get recent customer invoices"""
        return frappe.get_all(
            "Sales Invoice",
            filters={"customer": customer},
            fields=[
                "name", "posting_date", "grand_total", 
                "status", "due_date", "currency", "outstanding_amount"
            ],
            order_by="creation desc",
            limit=limit
        )


    def get_customer_payments(customer, limit=5):
        """Get recent customer payments"""
        return frappe.get_all(
            "Payment Entry",
            filters={"party": customer, "party_type": "Customer"},
            fields=[
                "name", "posting_date", "paid_amount", 
                "payment_type", "mode_of_payment", "currency"
            ],
            order_by="creation desc",
            limit=limit
        )


    def get_customer_support_tickets(customer, limit=5):
        """Get recent support tickets"""
        return frappe.get_all(
            "Issue",
            filters={"customer": customer},
            fields=[
                "name", "creation", "subject", "status", 
                "priority", "issue_type"
            ],
            order_by="creation desc",
            limit=limit
        )

  customer_api: |
    # {{app_name}}/api/customer.py
    """
    Customer management APIs
    """

    import frappe
    from frappe import _
    from frappe.utils import cint, flt, getdate
    from typing import Dict, List, Any, Optional


    @frappe.whitelist()
    def get_customer_profile(customer_name: str) -> Dict[str, Any]:
        """
        Get detailed customer profile with dashboard data
        
        Args:
            customer_name: Customer ID
            
        Returns:
            dict: Complete customer profile data
        """
        try:
            # Check permissions
            if not frappe.has_permission("Customer", "read", doc=customer_name):
                frappe.throw(_("No permission to access customer {0}").format(customer_name))
            
            # Get customer profile
            profile = frappe.db.get_value(
                "Customer Profile",
                {"customer": customer_name},
                "*",
                as_dict=True
            )
            
            if not profile:
                # Create profile if not exists
                profile = create_customer_profile(customer_name)
            
            # Get dashboard data
            dashboard_data = get_customer_dashboard_data(customer_name)
            
            # Get activity timeline
            timeline = get_customer_activity_timeline(customer_name)
            
            return {
                "profile": profile,
                "dashboard": dashboard_data,
                "timeline": timeline,
                "success": True
            }
            
        except Exception as e:
            frappe.log_error(f"Error getting customer profile: {e}")
            frappe.throw(_("Failed to load customer profile"))


    @frappe.whitelist()
    def update_customer_profile(customer_name: str, profile_data: str) -> Dict[str, Any]:
        """
        Update customer profile information
        
        Args:
            customer_name: Customer ID
            profile_data: JSON string of profile data
            
        Returns:
            dict: Updated profile data
        """
        try:
            if not frappe.has_permission("Customer", "write", doc=customer_name):
                frappe.throw(_("No permission to update customer {0}").format(customer_name))
            
            profile_data = frappe.parse_json(profile_data)
            
            # Get or create profile
            profile_name = frappe.db.get_value(
                "Customer Profile",
                {"customer": customer_name},
                "name"
            )
            
            if profile_name:
                profile_doc = frappe.get_doc("Customer Profile", profile_name)
            else:
                profile_doc = frappe.new_doc("Customer Profile")
                profile_doc.customer = customer_name
            
            # Update fields
            for field, value in profile_data.items():
                if hasattr(profile_doc, field) and field not in ["name", "customer"]:
                    setattr(profile_doc, field, value)
            
            profile_doc.save()
            
            return {
                "profile": profile_doc.as_dict(),
                "success": True,
                "message": _("Profile updated successfully")
            }
            
        except frappe.ValidationError as e:
            frappe.throw(str(e))
        except Exception as e:
            frappe.log_error(f"Error updating customer profile: {e}")
            frappe.throw(_("Failed to update profile"))


    @frappe.whitelist()
    def get_customer_orders(customer_name: str, limit: int = 10, offset: int = 0) -> Dict[str, Any]:
        """Get customer orders with pagination"""
        try:
            if not frappe.has_permission("Customer", "read", doc=customer_name):
                frappe.throw(_("No permission to access customer {0}").format(customer_name))
            
            orders = frappe.get_all(
                "Sales Order",
                filters={"customer": customer_name},
                fields=[
                    "name", "transaction_date", "delivery_date", 
                    "grand_total", "currency", "status", "per_delivered",
                    "customer_name", "territory", "sales_partner"
                ],
                order_by="transaction_date desc",
                limit=cint(limit),
                start=cint(offset)
            )
            
            total_orders = frappe.db.count("Sales Order", {"customer": customer_name})
            
            return {
                "orders": orders,
                "total": total_orders,
                "has_more": (offset + limit) < total_orders,
                "success": True
            }
            
        except Exception as e:
            frappe.log_error(f"Error getting customer orders: {e}")
            frappe.throw(_("Failed to load customer orders"))


    @frappe.whitelist()
    def create_customer_order(customer_name: str, order_data: str) -> Dict[str, Any]:
        """Create new order for customer"""
        try:
            if not frappe.has_permission("Sales Order", "create"):
                frappe.throw(_("No permission to create orders"))
            
            order_data = frappe.parse_json(order_data)
            
            # Create sales order
            order_doc = frappe.new_doc("Sales Order")
            order_doc.customer = customer_name
            order_doc.transaction_date = getdate()
            order_doc.delivery_date = order_data.get("delivery_date") or getdate()
            
            # Add items
            for item_data in order_data.get("items", []):
                item = order_doc.append("items", {})
                item.item_code = item_data["item_code"]
                item.qty = flt(item_data["qty"])
                item.rate = flt(item_data.get("rate", 0))
                
            order_doc.save()
            order_doc.submit()
            
            return {
                "order": order_doc.as_dict(),
                "success": True,
                "message": _("Order created successfully")
            }
            
        except frappe.ValidationError as e:
            frappe.throw(str(e))
        except Exception as e:
            frappe.log_error(f"Error creating customer order: {e}")
            frappe.throw(_("Failed to create order"))


    @frappe.whitelist()
    def get_customer_analytics(customer_name: str) -> Dict[str, Any]:
        """Get customer analytics data"""
        try:
            if not frappe.has_permission("Customer", "read", doc=customer_name):
                frappe.throw(_("No permission to access customer {0}").format(customer_name))
            
            # Sales analytics
            sales_data = frappe.db.sql("""
                SELECT 
                    MONTH(transaction_date) as month,
                    YEAR(transaction_date) as year,
                    SUM(grand_total) as total_sales,
                    COUNT(*) as order_count
                FROM `tabSales Order`
                WHERE customer = %s
                    AND docstatus = 1
                    AND transaction_date >= DATE_SUB(NOW(), INTERVAL 12 MONTH)
                GROUP BY YEAR(transaction_date), MONTH(transaction_date)
                ORDER BY year DESC, month DESC
            """, customer_name, as_dict=True)
            
            # Payment analytics
            payment_data = frappe.db.sql("""
                SELECT 
                    mode_of_payment,
                    COUNT(*) as count,
                    SUM(paid_amount) as total_amount
                FROM `tabPayment Entry`
                WHERE party = %s AND party_type = 'Customer'
                    AND docstatus = 1
                GROUP BY mode_of_payment
            """, customer_name, as_dict=True)
            
            # Order status distribution
            order_status = frappe.db.sql("""
                SELECT 
                    status,
                    COUNT(*) as count
                FROM `tabSales Order`
                WHERE customer = %s AND docstatus = 1
                GROUP BY status
            """, customer_name, as_dict=True)
            
            return {
                "sales_trend": sales_data,
                "payment_methods": payment_data,
                "order_status": order_status,
                "success": True
            }
            
        except Exception as e:
            frappe.log_error(f"Error getting customer analytics: {e}")
            frappe.throw(_("Failed to load analytics"))


    def create_customer_profile(customer_name: str) -> Dict[str, Any]:
        """Create customer profile from customer data"""
        try:
            customer_doc = frappe.get_doc("Customer", customer_name)
            
            profile_doc = frappe.new_doc("Customer Profile")
            profile_doc.customer = customer_name
            profile_doc.customer_name = customer_doc.customer_name
            
            profile_doc.insert(ignore_permissions=True)
            
            return profile_doc.as_dict()
            
        except Exception as e:
            frappe.log_error(f"Error creating customer profile: {e}")
            return {}


    def get_customer_dashboard_data(customer_name: str) -> Dict[str, Any]:
        """Get dashboard summary data"""
        try:
            # Order statistics
            order_stats = frappe.db.sql("""
                SELECT 
                    COUNT(*) as total_orders,
                    SUM(CASE WHEN status = 'Draft' THEN 1 ELSE 0 END) as draft_orders,
                    SUM(CASE WHEN status = 'Completed' THEN 1 ELSE 0 END) as completed_orders,
                    SUM(grand_total) as total_order_value,
                    AVG(grand_total) as avg_order_value
                FROM `tabSales Order`
                WHERE customer = %s AND docstatus != 2
            """, customer_name, as_dict=True)[0]
            
            # Payment statistics
            payment_stats = frappe.db.sql("""
                SELECT 
                    SUM(paid_amount) as total_paid,
                    COUNT(*) as total_payments
                FROM `tabPayment Entry`
                WHERE party = %s AND party_type = 'Customer' AND docstatus = 1
            """, customer_name, as_dict=True)[0]
            
            # Outstanding amount
            outstanding = frappe.db.sql("""
                SELECT SUM(outstanding_amount) as outstanding
                FROM `tabSales Invoice`
                WHERE customer = %s AND docstatus = 1
            """, customer_name, as_dict=True)[0]
            
            return {
                "orders": order_stats,
                "payments": payment_stats,
                "outstanding": outstanding.get("outstanding", 0) if outstanding else 0
            }
            
        except Exception as e:
            frappe.log_error(f"Error getting dashboard data: {e}")
            return {}


    def get_customer_activity_timeline(customer_name: str, limit: int = 20) -> List[Dict[str, Any]]:
        """Get customer activity timeline"""
        try:
            profile_doc = frappe.get_doc("Customer Profile", {"customer": customer_name})
            return profile_doc.get_activity_timeline(limit)
        except:
            return []

  vue_customer_store: |
    // stores/customer.js
    import { defineStore } from 'pinia'
    import { ref, computed } from 'vue'
    // REMOVED: frappe-ui import - use native components

    export const useCustomerStore = defineStore('customer', () => {
      // State
      const customers = ref(new Map())
      const currentCustomer = ref(null)
      const searchResults = ref([])
      const loading = ref(false)
      const error = ref(null)
      
      // Resources
      const customerListResource = // REMOVED: createResource - use frappe.call()({
        url: '{{app_name}}.api.customer.get_customer_list',
        auto: false,
        onSuccess(data) {
          // Update customers map
          data.customers?.forEach(customer => {
            customers.value.set(customer.name, customer)
          })
        }
      })
      
      const customerProfileResource = // REMOVED: createResource - use frappe.call()({
        url: '{{app_name}}.api.customer.get_customer_profile',
        auto: false,
        onSuccess(data) {
          if (data.profile) {
            currentCustomer.value = data
            customers.value.set(data.profile.customer, data.profile)
          }
        }
      })
      
      const updateProfileResource = // REMOVED: createResource - use frappe.call()({
        url: '{{app_name}}.api.customer.update_customer_profile',
        auto: false,
        onSuccess(data) {
          if (data.profile && currentCustomer.value) {
            currentCustomer.value.profile = data.profile
            customers.value.set(data.profile.customer, data.profile)
          }
        }
      })
      
      // Getters
      const customerList = computed(() => Array.from(customers.value.values()))
      const isLoading = computed(() => 
        customerListResource.loading || 
        customerProfileResource.loading ||
        updateProfileResource.loading
      )
      
      // Actions
      async function fetchCustomerList(filters = {}, limit = 20, offset = 0) {
        loading.value = true
        error.value = null
        
        try {
          await customerListResource.submit({
            filters: JSON.stringify(filters),
            limit,
            offset
          })
        } catch (err) {
          error.value = err.message
          throw err
        } finally {
          loading.value = false
        }
      }
      
      async function fetchCustomerProfile(customerName) {
        if (!customerName) return
        
        loading.value = true
        error.value = null
        
        try {
          await customerProfileResource.submit({
            customer_name: customerName
          })
        } catch (err) {
          error.value = err.message
          throw err
        } finally {
          loading.value = false
        }
      }
      
      async function updateCustomerProfile(customerName, profileData) {
        if (!customerName || !profileData) return
        
        loading.value = true
        error.value = null
        
        try {
          await updateProfileResource.submit({
            customer_name: customerName,
            profile_data: JSON.stringify(profileData)
          })
          
          return updateProfileResource.data
        } catch (err) {
          error.value = err.message
          throw err
        } finally {
          loading.value = false
        }
      }
      
      async function searchCustomers(query, limit = 10) {
        if (!query || query.length < 2) {
          searchResults.value = []
          return
        }
        
        try {
          const response = await // REMOVED: createResource - use frappe.call()({
            url: 'frappe.client.get_list',
            auto: false
          }).submit({
            doctype: 'Customer',
            filters: [
              ['customer_name', 'like', `%${query}%`]
            ],
            fields: ['name', 'customer_name', 'email_id', 'mobile_no'],
            limit,
            order_by: 'customer_name'
          })
          
          searchResults.value = response || []
          return response
        } catch (err) {
          error.value = err.message
          searchResults.value = []
          throw err
        }
      }
      
      function getCustomer(customerName) {
        return customers.value.get(customerName)
      }
      
      function clearError() {
        error.value = null
      }
      
      function clearSearch() {
        searchResults.value = []
      }
      
      return {
        // State
        customers,
        currentCustomer,
        searchResults,
        loading,
        error,
        
        // Getters
        customerList,
        isLoading,
        
        // Actions
        fetchCustomerList,
        fetchCustomerProfile,
        updateCustomerProfile,
        searchCustomers,
        getCustomer,
        clearError,
        clearSearch
      }
    })

instructions:
  implementation:
    - "Use the complete app structure as a reference for your implementation"
    - "Customer Profile DocType demonstrates proper ERPNext field types and validation"
    - "Backend APIs show proper permission checking and error handling"
    - "Vue store demonstrates proper state management with frappe-ui resources"
    - "All templates follow the modern patterns established in previous templates"
  
  customization:
    - "Modify field definitions in DocType JSON to match your requirements"
    - "Add custom validation logic in Python controllers"
    - "Extend API endpoints for specific business logic"
    - "Customize Vue components and store actions"
    - "Add real-time features using the WebSocket templates"
  
  deployment:
    - "Use this example as a starting point for your own customer portal"
    - "Add proper permissions and user roles"
    - "Implement security middleware and CSRF protection"
    - "Add comprehensive testing using the testing templates"
    - "Deploy using the production configuration templates"