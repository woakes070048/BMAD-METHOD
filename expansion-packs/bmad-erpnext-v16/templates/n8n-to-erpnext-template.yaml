name: "n8n-to-erpnext-template"
title: "n8n to ERPNext Workflow Conversion Template"
description: "Complete template for converting n8n workflows into ERPNext automation modules"
version: "1.0.0"

parameters:
  workflow_name:
    type: "string"
    required: true
    description: "Name of the n8n workflow being converted"
  app_name:
    type: "string"
    required: true
    description: "ERPNext app name (snake_case)"
  module_name:
    type: "string"
    required: true
    description: "Module name for the automation (e.g., workflow_automation)"
  workflow_description:
    type: "string"
    required: false
    description: "Description of the workflow's business purpose"
  trigger_types:
    type: "array"
    required: true
    description: "Types of triggers (webhook, scheduled, document, form, etc.)"
  external_integrations:
    type: "array"
    required: false
    description: "List of external services integrated in the workflow"
  complexity_level:
    type: "string"
    required: true
    enum: ["simple", "moderate", "complex"]
    description: "Complexity level of the workflow"

templates:
  module_structure: |
    # n8n to ERPNext Conversion Module Structure
    # Workflow: {{workflow_name}}
    # Generated: {{generation_date}}
    
    {{app_name}}/
    ├── {{app_name}}/
    │   ├── {{module_name}}/
    │   │   ├── __init__.py
    │   │   ├── triggers.py          # Converted trigger handlers
    │   │   ├── automation.py        # Core automation logic
    │   │   ├── integrations.py      # External API integrations
    │   │   ├── notifications.py     # Email and alert systems
    │   │   ├── utils.py             # Utility functions
    │   │   └── scheduled_jobs.py    # Cron-based automation
    │   ├── fixtures/
    │   │   ├── email_template.json  # Email templates
    │   │   ├── custom_field.json    # Custom fields
    │   │   └── workflow_state.json  # Workflow definitions
    │   └── hooks.py                 # App hooks configuration
    ├── requirements.txt             # Python dependencies
    └── setup.py                     # App setup configuration

  hooks_configuration: |
    # hooks.py - ERPNext App Hooks Configuration
    # Generated from n8n workflow: {{workflow_name}}
    
    from . import __version__ as app_version
    
    app_name = "{{app_name}}"
    app_title = "{{app_name|title}} Automation"
    app_publisher = "Your Company"
    app_description = "{{workflow_description}}"
    app_icon = "octicon octicon-workflow"
    app_color = "blue"
    app_email = "admin@company.com"
    app_license = "MIT"
    
    # Document Events - Converted from n8n document triggers
    doc_events = {
        {% for trigger in document_triggers %}
        "{{trigger.doctype}}": {
            "{{trigger.event}}": "{{app_name}}.{{module_name}}.triggers.{{trigger.handler_name}}"
        },
        {% endfor %}
    }
    
    # Scheduled Events - Converted from n8n cron triggers
    scheduler_events = {
        {% for schedule in scheduled_triggers %}
        "{{schedule.frequency}}": [
            "{{app_name}}.{{module_name}}.scheduled_jobs.{{schedule.job_name}}"
        ],
        {% endfor %}
    }
    
    # Boot Session - Initialize automation system
    boot_session = "{{app_name}}.{{module_name}}.boot.boot_session"
    
    # Fixtures - Install predefined data
    fixtures = [
        {% for integration in external_integrations %}
        "Email Template",
        {% endfor %}
        "Custom Field",
        "Property Setter"
    ]
    
    # Installation hooks
    after_install = "{{app_name}}.setup.after_install"
    
    # Permission overrides
    permission_query_conditions = {
        "{{primary_doctype}}": "{{app_name}}.{{module_name}}.permissions.get_permission_query_conditions"
    }

  triggers_module: |
    """
    Trigger Handlers - Converted from n8n workflow triggers
    Workflow: {{workflow_name}}
    """
    
    import frappe
    from frappe import _
    import json
    from datetime import datetime
    
    # Webhook Triggers
    {% for webhook in webhook_triggers %}
    @frappe.whitelist(allow_guest={{webhook.allow_guest|default('False')}})
    def {{webhook.handler_name}}():
        """
        Webhook trigger: {{webhook.original_name}}
        Original n8n config: {{webhook.config}}
        """
        try:
            # Validate request
            if frappe.request.method != 'POST':
                return {"success": False, "error": "Only POST requests allowed"}
            
            # Get webhook data
            data = frappe.request.get_json()
            if not data:
                return {"success": False, "error": "No data received"}
            
            # Validate webhook authentication
            if not validate_webhook_auth("{{webhook.handler_name}}", frappe.request.headers):
                return {"success": False, "error": "Authentication failed"}
            
            # Process webhook
            from .automation import process_{{webhook.automation_function}}
            result = process_{{webhook.automation_function}}(data)
            
            # Log successful processing
            log_webhook_activity("{{webhook.handler_name}}", data, result, "Success")
            
            return {
                "success": True,
                "message": "Webhook processed successfully",
                "data": result
            }
            
        except Exception as e:
            # Log error
            log_webhook_activity("{{webhook.handler_name}}", 
                               frappe.request.get_json() or {}, 
                               str(e), "Error")
            frappe.log_error(frappe.get_traceback(), "Webhook Processing Error")
            
            return {"success": False, "error": str(e)}
    
    {% endfor %}
    
    # Document Event Triggers
    {% for doc_trigger in document_triggers %}
    def {{doc_trigger.handler_name}}(doc, method):
        """
        Document trigger: {{doc_trigger.original_name}}
        Event: {{doc_trigger.event}} on {{doc_trigger.doctype}}
        """
        try:
            # Check trigger conditions
            if not check_{{doc_trigger.handler_name}}_conditions(doc):
                return
            
            # Execute automation
            from .automation import execute_{{doc_trigger.automation_function}}
            result = execute_{{doc_trigger.automation_function}}(doc)
            
            # Log execution
            log_trigger_execution(doc, method, result, "Success")
            
        except Exception as e:
            # Log error without breaking document save
            log_trigger_execution(doc, method, str(e), "Error")
            frappe.log_error(frappe.get_traceback(), 
                           f"Document Trigger Error: {{doc_trigger.handler_name}}")
    
    def check_{{doc_trigger.handler_name}}_conditions(doc):
        """Check if trigger should execute"""
        # Implement conditions from n8n workflow
        {{doc_trigger.conditions}}
        return True
    
    {% endfor %}
    
    # Form Triggers
    {% for form_trigger in form_triggers %}
    @frappe.whitelist(allow_guest=True)
    def handle_{{form_trigger.form_name}}_submission():
        """
        Form submission handler: {{form_trigger.original_name}}
        """
        try:
            # Get form data
            form_data = frappe.request.get_json() if frappe.request.method == 'POST' else frappe.request.args
            
            # Validate form data
            validation_result = validate_{{form_trigger.form_name}}_data(form_data)
            if not validation_result['valid']:
                return {"success": False, "errors": validation_result['errors']}
            
            # Process form
            from .automation import process_{{form_trigger.automation_function}}
            result = process_{{form_trigger.automation_function}}(form_data)
            
            # Send confirmation
            if form_data.get('email'):
                send_{{form_trigger.form_name}}_confirmation(form_data['email'], result)
            
            return {"success": True, "reference": result.get('reference')}
            
        except Exception as e:
            frappe.log_error(frappe.get_traceback(), "Form Processing Error")
            return {"success": False, "error": "Form submission failed"}
    
    def validate_{{form_trigger.form_name}}_data(data):
        """Validate form submission data"""
        errors = []
        required_fields = {{form_trigger.required_fields}}
        
        for field in required_fields:
            if not data.get(field):
                errors.append(f"{field} is required")
        
        return {"valid": len(errors) == 0, "errors": errors}
    
    {% endfor %}
    
    # Utility Functions
    def validate_webhook_auth(webhook_name, headers):
        """Validate webhook authentication"""
        # Implement based on external service requirements
        return True
    
    def log_webhook_activity(webhook_name, data, result, status):
        """Log webhook processing activity"""
        frappe.get_doc({
            "doctype": "Webhook Log",
            "webhook_name": webhook_name,
            "request_data": json.dumps(data, default=str),
            "response_data": json.dumps(result, default=str),
            "status": status,
            "timestamp": frappe.utils.now()
        }).insert(ignore_permissions=True)
    
    def log_trigger_execution(doc, method, result, status):
        """Log trigger execution"""
        frappe.get_doc({
            "doctype": "Automation Log",
            "document_type": doc.doctype,
            "document_name": doc.name,
            "trigger_method": method,
            "result": str(result),
            "status": status,
            "timestamp": frappe.utils.now()
        }).insert(ignore_permissions=True)

  automation_module: |
    """
    Core Automation Logic - Converted from n8n workflow nodes
    Workflow: {{workflow_name}}
    """
    
    import frappe
    from frappe import _
    from frappe.utils import cint, flt, cstr, now_datetime
    import json
    import requests
    
    # Main Automation Functions
    {% for automation in automation_functions %}
    def {{automation.function_name}}(input_data):
        """
        {{automation.description}}
        Converted from n8n nodes: {{automation.original_nodes}}
        """
        try:
            # Data validation and preparation
            validated_data = validate_{{automation.function_name}}_input(input_data)
            
            # Execute automation steps
            result = {}
            
            {% for step in automation.steps %}
            # Step {{loop.index}}: {{step.description}}
            step_{{loop.index}}_result = execute_{{step.function_name}}(
                validated_data, result
            )
            result.update(step_{{loop.index}}_result)
            
            {% endfor %}
            
            # Final processing
            final_result = finalize_{{automation.function_name}}(result)
            
            return {
                "success": True,
                "data": final_result,
                "processed_at": now_datetime()
            }
            
        except Exception as e:
            frappe.log_error(frappe.get_traceback(), 
                           f"Automation Error: {{automation.function_name}}")
            return {
                "success": False,
                "error": str(e),
                "failed_at": now_datetime()
            }
    
    def validate_{{automation.function_name}}_input(data):
        """Validate input data for {{automation.function_name}}"""
        required_fields = {{automation.required_fields}}
        
        for field in required_fields:
            if field not in data:
                frappe.throw(_("Missing required field: {0}").format(field))
        
        return data
    
    def finalize_{{automation.function_name}}(result):
        """Finalize automation results"""
        # Final processing logic
        return result
    
    {% endfor %}
    
    # Step Functions - Individual automation steps
    {% for step in automation_steps %}
    def execute_{{step.function_name}}(input_data, context):
        """
        {{step.description}}
        Original n8n node: {{step.original_node_type}}
        """
        {% if step.type == 'api_call' %}
        # External API call
        return make_api_call(
            url="{{step.api_url}}",
            method="{{step.method}}",
            data=prepare_api_data(input_data, context),
            headers=get_api_headers("{{step.service_name}}")
        )
        
        {% elif step.type == 'data_transform' %}
        # Data transformation
        transformed_data = {}
        {% for transform in step.transformations %}
        transformed_data["{{transform.target_field}}"] = {{transform.logic}}
        {% endfor %}
        return transformed_data
        
        {% elif step.type == 'conditional' %}
        # Conditional logic
        {% for condition in step.conditions %}
        if {{condition.expression}}:
            return {{condition.result}}
        {% endfor %}
        return {}
        
        {% elif step.type == 'database_operation' %}
        # Database operation
        {% if step.operation == 'create' %}
        doc = frappe.get_doc({
            "doctype": "{{step.doctype}}",
            **prepare_doc_data(input_data, context)
        })
        doc.insert()
        return {"created_doc": doc.name}
        
        {% elif step.operation == 'update' %}
        doc = frappe.get_doc("{{step.doctype}}", input_data.get("name"))
        doc.update(prepare_update_data(input_data, context))
        doc.save()
        return {"updated_doc": doc.name}
        
        {% elif step.operation == 'query' %}
        results = frappe.get_all("{{step.doctype}}", 
            filters=prepare_filters(input_data, context),
            fields={{step.fields}}
        )
        return {"query_results": results}
        {% endif %}
        
        {% elif step.type == 'notification' %}
        # Send notification
        send_notification(
            recipients=get_notification_recipients(input_data, context),
            template="{{step.template_name}}",
            context=prepare_notification_context(input_data, context)
        )
        return {"notification_sent": True}
        {% endif %}
    
    {% endfor %}
    
    # Integration Helper Functions
    def make_api_call(url, method, data, headers):
        """Make external API call"""
        try:
            response = requests.request(
                method=method.upper(),
                url=url,
                json=data,
                headers=headers,
                timeout=30
            )
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            frappe.throw(_("API call failed: {0}").format(str(e)))
    
    def get_api_headers(service_name):
        """Get API headers for external service"""
        settings = frappe.get_single("Integration Settings")
        return {
            "Authorization": f"Bearer {getattr(settings, f'{service_name.lower()}_api_key', '')}",
            "Content-Type": "application/json"
        }
    
    def send_notification(recipients, template, context):
        """Send notification using email template"""
        template_doc = frappe.get_doc("Email Template", template)
        
        frappe.sendmail(
            recipients=recipients,
            subject=frappe.render_template(template_doc.subject, context),
            message=frappe.render_template(template_doc.response, context)
        )

  scheduled_jobs_module: |
    """
    Scheduled Jobs - Converted from n8n cron triggers
    Workflow: {{workflow_name}}
    """
    
    import frappe
    from frappe import _
    from frappe.utils import now_datetime, add_days, get_datetime
    
    {% for job in scheduled_jobs %}
    def {{job.function_name}}():
        """
        {{job.description}}
        Original n8n schedule: {{job.original_cron}}
        ERPNext schedule: {{job.schedule_frequency}}
        """
        try:
            # Check if job should run
            if not should_run_{{job.function_name}}():
                return
            
            # Get job settings
            settings = get_job_settings("{{job.function_name}}")
            
            # Execute job logic
            from .automation import {{job.automation_function}}
            result = {{job.automation_function}}(settings)
            
            # Update job status
            update_job_status("{{job.function_name}}", "Success", result)
            
            # Log completion
            frappe.log_error(f"Scheduled job completed: {{job.function_name}}", 
                           "Scheduled Job Success")
            
        except Exception as e:
            # Log error and update status
            update_job_status("{{job.function_name}}", "Error", str(e))
            frappe.log_error(frappe.get_traceback(), 
                           f"Scheduled Job Error: {{job.function_name}}")
            
            # Notify administrators
            notify_job_failure("{{job.function_name}}", str(e))
    
    def should_run_{{job.function_name}}():
        """Check if job should run based on conditions"""
        # Job-specific conditions
        {{job.run_conditions}}
        return True
    
    {% endfor %}
    
    # Job Management Functions
    def get_job_settings(job_name):
        """Get job-specific settings"""
        return frappe.get_single("Automation Settings")
    
    def update_job_status(job_name, status, details):
        """Update job execution status"""
        job_status = frappe.get_doc("Job Status", job_name) if frappe.db.exists("Job Status", job_name) else frappe.new_doc("Job Status")
        job_status.update({
            "job_name": job_name,
            "last_run": now_datetime(),
            "status": status,
            "details": str(details)[:1000]  # Limit details length
        })
        job_status.save(ignore_permissions=True)
        frappe.db.commit()
    
    def notify_job_failure(job_name, error):
        """Notify administrators of job failure"""
        admin_emails = frappe.get_all("User", 
            filters={"role_profile_name": "System Manager"}, 
            pluck="email"
        )
        
        if admin_emails:
            frappe.sendmail(
                recipients=admin_emails,
                subject=f"Scheduled Job Failed: {job_name}",
                message=f"The scheduled job '{job_name}' failed with the following error:\n\n{error}"
            )

  integrations_module: |
    """
    External Service Integrations - Converted from n8n HTTP nodes
    Workflow: {{workflow_name}}
    """
    
    import frappe
    from frappe import _
    import requests
    import json
    from datetime import datetime, timedelta
    
    {% for integration in external_integrations %}
    class {{integration.class_name}}Integration:
        """
        {{integration.service_name}} Integration
        Converted from n8n HTTP Request nodes
        """
        
        def __init__(self):
            self.settings = frappe.get_single("Integration Settings")
            self.base_url = self.settings.{{integration.service_name.lower()}}_url
            self.api_key = self.settings.{{integration.service_name.lower()}}_api_key
        
        def authenticate(self):
            """Authenticate with {{integration.service_name}}"""
            # Authentication logic based on service requirements
            {% if integration.auth_type == 'oauth' %}
            return self.oauth_authenticate()
            {% elif integration.auth_type == 'api_key' %}
            return {"Authorization": f"Bearer {self.api_key}"}
            {% else %}
            return {}
            {% endif %}
        
        {% for method in integration.methods %}
        def {{method.function_name}}(self, data):
            """{{method.description}}"""
            try:
                headers = self.authenticate()
                headers.update({"Content-Type": "application/json"})
                
                # Prepare request data
                payload = self.prepare_{{method.function_name}}_payload(data)
                
                # Make API call
                response = requests.{{method.http_method.lower()}}(
                    url=f"{self.base_url}{{method.endpoint}}",
                    json=payload,
                    headers=headers,
                    timeout=30
                )
                
                if response.status_code == {{method.success_code}}:
                    result = response.json()
                    return self.process_{{method.function_name}}_response(result)
                else:
                    self.handle_api_error(response)
                    
            except requests.exceptions.RequestException as e:
                frappe.log_error(f"{{integration.service_name}} API Error: {str(e)}", 
                               "Integration Error")
                frappe.throw(_("{{integration.service_name}} integration failed"))
        
        def prepare_{{method.function_name}}_payload(self, data):
            """Prepare API payload for {{method.function_name}}"""
            # Data transformation logic
            {{method.payload_transformation}}
            return payload
        
        def process_{{method.function_name}}_response(self, response):
            """Process API response from {{method.function_name}}"""
            # Response processing logic  
            {{method.response_processing}}
            return response
        
        {% endfor %}
        
        def handle_api_error(self, response):
            """Handle API error responses"""
            error_msg = f"API Error {response.status_code}: {response.text}"
            frappe.log_error(error_msg, "{{integration.service_name}} API Error")
            frappe.throw(_(error_msg))
        
        {% if integration.auth_type == 'oauth' %}
        def oauth_authenticate(self):
            """OAuth authentication flow"""
            # Implement OAuth flow specific to the service
            access_token = self.get_access_token()
            return {"Authorization": f"Bearer {access_token}"}
        
        def get_access_token(self):
            """Get or refresh OAuth access token"""
            # Token management logic
            return self.settings.{{integration.service_name.lower()}}_access_token
        {% endif %}
    
    {% endfor %}
    
    # Integration Factory
    def get_integration(service_name):
        """Get integration instance by service name"""
        integrations = {
            {% for integration in external_integrations %}
            "{{integration.service_name.lower()}}": {{integration.class_name}}Integration,
            {% endfor %}
        }
        
        integration_class = integrations.get(service_name.lower())
        if not integration_class:
            frappe.throw(_("Integration not found: {0}").format(service_name))
        
        return integration_class()

  setup_module: |
    """
    Setup and Installation - Post-installation configuration
    """
    
    import frappe
    from frappe import _
    
    def after_install():
        """Execute after app installation"""
        print("Setting up {{app_name}} automation...")
        
        # Create custom fields
        create_custom_fields()
        
        # Install email templates
        install_email_templates()
        
        # Create default settings
        create_default_settings()
        
        # Set up webhooks (if any)
        setup_webhooks()
        
        print("{{app_name}} setup completed!")
    
    def create_custom_fields():
        """Create custom fields for automation"""
        custom_fields = {
            {% for field_group in custom_fields %}
            "{{field_group.doctype}}": [
                {% for field in field_group.fields %}
                {
                    "fieldname": "{{field.fieldname}}",
                    "label": "{{field.label}}",
                    "fieldtype": "{{field.fieldtype}}",
                    "options": "{{field.options}}",
                    "default": "{{field.default}}",
                    "reqd": {{field.required|default('0')}},
                    "read_only": {{field.read_only|default('0')}}
                },
                {% endfor %}
            ],
            {% endfor %}
        }
        
        for doctype, fields in custom_fields.items():
            for field_config in fields:
                if not frappe.db.exists("Custom Field", 
                    {"dt": doctype, "fieldname": field_config["fieldname"]}):
                    
                    custom_field = frappe.get_doc({
                        "doctype": "Custom Field",
                        "dt": doctype,
                        **field_config
                    })
                    custom_field.insert()
    
    def install_email_templates():
        """Install email templates for automation"""
        templates = [
            {% for template in email_templates %}
            {
                "name": "{{template.name}}",
                "subject": "{{template.subject}}",
                "response": """{{template.content}}"""
            },
            {% endfor %}
        ]
        
        for template_config in templates:
            if not frappe.db.exists("Email Template", template_config["name"]):
                template = frappe.get_doc({
                    "doctype": "Email Template",
                    **template_config
                })
                template.insert()
    
    def create_default_settings():
        """Create default settings documents"""
        # Integration Settings
        if not frappe.db.exists("Integration Settings"):
            settings = frappe.get_doc({
                "doctype": "Integration Settings",
                {% for integration in external_integrations %}
                "{{integration.service_name.lower()}}_url": "",
                "{{integration.service_name.lower()}}_api_key": "",
                {% endfor %}
            })
            settings.insert()
        
        # Automation Settings  
        if not frappe.db.exists("Automation Settings"):
            settings = frappe.get_doc({
                "doctype": "Automation Settings",
                {% for job in scheduled_jobs %}
                "enable_{{job.function_name}}": 1,
                {% endfor %}
            })
            settings.insert()
    
    def setup_webhooks():
        """Set up webhook configurations"""
        # Webhook setup logic if needed
        pass

instructions:
  conversion_process:
    - "Export n8n workflow as JSON"
    - "Analyze workflow structure using n8n-workflow-analyst"
    - "Map triggers using trigger-mapper agent"
    - "Generate conversion code using workflow-converter"
    - "Apply this template with workflow-specific parameters"
    - "Customize generated code for specific business requirements"
    - "Test automation thoroughly before deployment"
    - "Document any manual conversion steps required"
  
  deployment_steps:
    - "Install ERPNext app: bench get-app [app_path]"
    - "Install on site: bench --site [site] install-app {{app_name}}"
    - "Configure integration settings in ERPNext"
    - "Set up external service credentials"
    - "Test webhook endpoints with sample data"
    - "Verify scheduled jobs are configured correctly"
    - "Monitor automation execution and logs"
  
  customization_guidelines:
    - "Replace template placeholders with actual values"
    - "Implement business-specific validation logic"
    - "Configure external service authentication"
    - "Customize error handling for specific requirements"
    - "Add monitoring and alerting as needed"
    - "Document any deviations from template"

testing:
  unit_tests:
    - "Test individual automation functions"
    - "Verify data transformation logic"
    - "Check error handling scenarios"
    - "Validate input/output data formats"
  
  integration_tests:
    - "Test webhook endpoints with real data"
    - "Verify external API integrations"
    - "Check email template rendering"
    - "Test scheduled job execution"
  
  performance_tests:
    - "Load test webhook endpoints"
    - "Verify scheduled job performance"
    - "Test with large data volumes"
    - "Monitor resource usage"

maintenance:
  monitoring:
    - "Set up log monitoring for errors"
    - "Monitor API call success rates" 
    - "Track automation execution times"
    - "Alert on job failures"
  
  updates:
    - "Keep external service integrations updated"
    - "Review and optimize automation logic"
    - "Update email templates as needed"
    - "Maintain documentation"