---
template_name: "API Documentation Template"
template_type: "api_documentation"
version: "1.0.0"
description: "Comprehensive template for documenting ERPNext API endpoints"

# API documentation structure
api_structure:
  overview_template: |
    # {API_NAME} API Documentation
    
    ## Overview
    {API_DESCRIPTION}
    
    **Version:** {VERSION}
    **Base URL:** `{BASE_URL}`
    **Authentication:** {AUTH_METHOD}
    
    ## Quick Start
    ```bash
    # Example request
    curl -X {METHOD} \
      -H "Authorization: token {API_KEY}:{API_SECRET}" \
      -H "Content-Type: application/json" \
      -d '{SAMPLE_PAYLOAD}' \
      {BASE_URL}/{ENDPOINT}
    ```

  endpoint_template: |
    ## {ENDPOINT_NAME}
    
    {ENDPOINT_DESCRIPTION}
    
    ### Endpoint
    ```
    {METHOD} {PATH}
    ```
    
    ### Parameters
    {PARAMETERS_TABLE}
    
    ### Request Body
    ```json
    {REQUEST_BODY_EXAMPLE}
    ```
    
    ### Response
    ```json
    {RESPONSE_EXAMPLE}
    ```
    
    ### Error Responses
    {ERROR_RESPONSES}
    
    ### Example Usage
    {USAGE_EXAMPLES}

# Endpoint documentation patterns
endpoint_patterns:
  rest_endpoint:
    structure: |
      ### {METHOD} /{resource}
      
      **Description:** {description}
      
      **Authentication Required:** {auth_required}
      
      **Permissions:** {permissions}
      
      #### URL Parameters
      | Parameter | Type | Required | Description |
      |-----------|------|----------|-------------|
      {url_params}
      
      #### Query Parameters
      | Parameter | Type | Required | Description | Default |
      |-----------|------|----------|-------------|---------|  
      {query_params}
      
      #### Request Headers
      | Header | Required | Description | Example |
      |--------|----------|-------------|---------|  
      {headers}
      
      #### Request Body
      | Field | Type | Required | Description | Validation |
      |-------|------|----------|-------------|------------|
      {body_fields}
      
      #### Success Response
      **Code:** {success_code}
      **Content:**
      ```json
      {success_response}
      ```
      
      #### Error Responses
      {error_responses}
      
      #### Sample Call
      {sample_calls}

  rpc_endpoint:
    structure: |
      ### {method_name}
      
      **Module:** `{module}`
      **Method:** `{method}`
      
      **Description:** {description}
      
      #### Parameters
      ```python
      @frappe.whitelist()
      def {method_name}({parameters}):
          """{docstring}"""
      ```
      
      #### Arguments
      {arguments_documentation}
      
      #### Returns
      {return_documentation}
      
      #### Exceptions
      {exceptions_documentation}
      
      #### Example Request
      ```javascript
      frappe.call({
          method: "{module}.{method}",
          args: {args_example},
          callback: function(r) {
              // Handle response
          }
      })
      ```

# Request/Response schemas
schema_templates:
  request_schema: |
    ```yaml
    type: object
    required:
      - {required_fields}
    properties:
      {property_definitions}
    additionalProperties: false
    ```

  response_schema: |
    ```yaml
    type: object
    properties:
      success:
        type: boolean
        description: "Indicates if the request was successful"
      data:
        type: {data_type}
        description: "{data_description}"
      message:
        type: string
        description: "Human-readable message"
      meta:
        type: object
        properties:
          timestamp:
            type: string
            format: date-time
          version:
            type: string
          request_id:
            type: string
    ```

# Authentication documentation
authentication_patterns:
  token_auth: |
    ## Authentication
    
    This API uses token-based authentication. Include your API credentials in the request header.
    
    ### Obtaining Credentials
    1. Log in to ERPNext
    2. Go to Settings > API Access
    3. Generate new API Key and Secret
    
    ### Using Credentials
    Include the following header in all requests:
    ```
    Authorization: token {api_key}:{api_secret}
    ```
    
    ### Example
    ```bash
    curl -H "Authorization: token abc123:xyz789" \
         {base_url}/api/resource/Customer
    ```

  oauth2: |
    ## OAuth 2.0 Authentication
    
    ### Authorization Flow
    1. **Authorization Request**
       ```
       GET /api/method/frappe.integrations.oauth2.authorize
       ?client_id={client_id}
       &redirect_uri={redirect_uri}
       &response_type=code
       &scope={scope}
       ```
    
    2. **Token Exchange**
       ```
       POST /api/method/frappe.integrations.oauth2.get_token
       Content-Type: application/x-www-form-urlencoded
       
       grant_type=authorization_code
       &code={authorization_code}
       &client_id={client_id}
       &client_secret={client_secret}
       ```
    
    3. **Using Access Token**
       ```
       Authorization: Bearer {access_token}
       ```

# Error documentation
error_documentation:
  standard_errors: |
    ## Error Responses
    
    ### Standard Error Format
    ```json
    {
      "exc_type": "ValidationError",
      "exception": "frappe.exceptions.ValidationError: {details}",
      "exc": "[\"Traceback...\"]",
      "_server_messages": "[...]"
    }
    ```
    
    ### Common Error Codes
    | HTTP Code | Error Type | Description |
    |-----------|------------|-------------|
    | 400 | Bad Request | Invalid request parameters |
    | 401 | Unauthorized | Missing or invalid authentication |
    | 403 | Forbidden | Insufficient permissions |
    | 404 | Not Found | Resource not found |
    | 409 | Conflict | Resource conflict (e.g., duplicate) |
    | 422 | Validation Error | Request validation failed |
    | 429 | Too Many Requests | Rate limit exceeded |
    | 500 | Internal Server Error | Server error |
    | 503 | Service Unavailable | Service temporarily unavailable |

  custom_errors: |
    ### Application-Specific Errors
    | Error Code | Description | Resolution |
    |------------|-------------|------------|
    | {error_codes_table}

# Code examples
code_examples:
  python: |
    ```python
    import requests
    import json
    
    # Configuration
    BASE_URL = "{base_url}"
    API_KEY = "{api_key}"
    API_SECRET = "{api_secret}"
    
    # Headers
    headers = {
        "Authorization": f"token {API_KEY}:{API_SECRET}",
        "Content-Type": "application/json"
    }
    
    # GET Request
    response = requests.get(
        f"{BASE_URL}/api/resource/Customer",
        headers=headers,
        params={"filters": json.dumps([["customer_group", "=", "Commercial"]])}
    )
    
    # POST Request
    data = {
        "customer_name": "Test Customer",
        "customer_group": "Commercial"
    }
    response = requests.post(
        f"{BASE_URL}/api/resource/Customer",
        headers=headers,
        json=data
    )
    
    # Handle response
    if response.status_code == 200:
        result = response.json()
        print(result["data"])
    else:
        print(f"Error: {response.status_code}")
        print(response.json())
    ```

  javascript: |
    ```javascript
    // Using frappe.call
    frappe.call({
        method: '{method_path}',
        args: {
            param1: 'value1',
            param2: 'value2'
        },
        freeze: true,
        freeze_message: 'Processing...',
        callback: function(r) {
            if (r.message) {
                // Success
                console.log(r.message);
                frappe.msgprint('Success!');
            }
        },
        error: function(r) {
            // Error handling
            frappe.msgprint({
                title: 'Error',
                indicator: 'red',
                message: r.message
            });
        }
    });
    
    // Using fetch API
    const headers = {
        'Authorization': 'token {api_key}:{api_secret}',
        'Content-Type': 'application/json'
    };
    
    fetch('{base_url}/api/resource/Customer', {
        method: 'GET',
        headers: headers
    })
    .then(response => response.json())
    .then(data => console.log(data))
    .catch(error => console.error('Error:', error));
    ```

  curl: |
    ```bash
    # GET request
    curl -X GET \
      -H "Authorization: token {API_KEY}:{API_SECRET}" \
      "{BASE_URL}/api/resource/Customer?filters=[[\"customer_group\",\"=\",\"Commercial\"]]"
    
    # POST request
    curl -X POST \
      -H "Authorization: token {API_KEY}:{API_SECRET}" \
      -H "Content-Type: application/json" \
      -d '{
        "customer_name": "Test Customer",
        "customer_group": "Commercial",
        "territory": "India"
      }' \
      "{BASE_URL}/api/resource/Customer"
    
    # PUT request
    curl -X PUT \
      -H "Authorization: token {API_KEY}:{API_SECRET}" \
      -H "Content-Type: application/json" \
      -d '{"customer_group": "Individual"}' \
      "{BASE_URL}/api/resource/Customer/CUST-00001"
    
    # DELETE request
    curl -X DELETE \
      -H "Authorization: token {API_KEY}:{API_SECRET}" \
      "{BASE_URL}/api/resource/Customer/CUST-00001"
    ```

# Rate limiting documentation
rate_limiting:
  documentation: |
    ## Rate Limiting
    
    API requests are rate limited to ensure fair usage and system stability.
    
    ### Limits
    | Tier | Requests/Hour | Requests/Minute | Burst Limit |
    |------|---------------|-----------------|-------------|
    | Basic | 1,000 | 20 | 50 |
    | Standard | 5,000 | 100 | 200 |
    | Premium | 20,000 | 500 | 1000 |
    | Enterprise | Unlimited | Unlimited | Unlimited |
    
    ### Rate Limit Headers
    ```
    X-RateLimit-Limit: 1000
    X-RateLimit-Remaining: 999
    X-RateLimit-Reset: 1640995200
    ```
    
    ### Handling Rate Limits
    When rate limited, the API returns:
    ```json
    {
      "error": "Rate limit exceeded",
      "retry_after": 60
    }
    ```
    HTTP Status: `429 Too Many Requests`

# Pagination documentation
pagination:
  documentation: |
    ## Pagination
    
    List endpoints support pagination to handle large datasets efficiently.
    
    ### Parameters
    | Parameter | Type | Default | Description |
    |-----------|------|---------|-------------|
    | limit_start | int | 0 | Starting index |
    | limit_page_length | int | 20 | Number of records |
    | order_by | string | modified desc | Sort order |
    
    ### Example Request
    ```
    GET /api/resource/Customer?limit_start=20&limit_page_length=20
    ```
    
    ### Response Headers
    ```
    X-Total-Count: 150
    X-Page-Count: 8
    X-Current-Page: 2
    ```

# Filtering documentation
filtering:
  documentation: |
    ## Filtering
    
    ### Simple Filters
    ```
    filters=[["field", "operator", "value"]]
    ```
    
    ### Operators
    | Operator | Description | Example |
    |----------|-------------|---------|  
    | = | Equals | ["status", "=", "Active"] |
    | != | Not equals | ["status", "!=", "Inactive"] |
    | > | Greater than | ["amount", ">", 1000] |
    | < | Less than | ["amount", "<", 5000] |
    | >= | Greater than or equal | ["date", ">=", "2024-01-01"] |
    | <= | Less than or equal | ["date", "<=", "2024-12-31"] |
    | like | Pattern match | ["name", "like", "%John%"] |
    | not like | Negative pattern | ["name", "not like", "%test%"] |
    | in | In list | ["status", "in", ["Active", "Pending"]] |
    | not in | Not in list | ["status", "not in", ["Cancelled"]] |
    | is | Is null/not null | ["field", "is", "set"] |
    
    ### Complex Filters
    ```json
    {
      "filters": [
        ["customer_group", "=", "Commercial"],
        ["territory", "=", "India"]
      ],
      "or_filters": [
        ["status", "=", "Active"],
        ["status", "=", "Pending"]
      ]
    }
    ```

# Webhook documentation
webhook_documentation:
  template: |
    ## Webhooks
    
    ### Webhook Events
    | Event | Trigger | Payload |
    |-------|---------|---------|  
    {webhook_events}
    
    ### Webhook Configuration
    ```json
    {
      "webhook_url": "https://your-endpoint.com/webhook",
      "webhook_events": ["on_update", "after_insert"],
      "webhook_headers": {
        "X-Custom-Header": "value"
      }
    }
    ```
    
    ### Webhook Security
    - Signature verification using HMAC-SHA256
    - IP whitelisting available
    - Retry mechanism with exponential backoff
    
    ### Verifying Webhook Signature
    ```python
    import hmac
    import hashlib
    
    def verify_webhook(payload, signature, secret):
        expected_sig = hmac.new(
            secret.encode(),
            payload.encode(),
            hashlib.sha256
        ).hexdigest()
        return hmac.compare_digest(expected_sig, signature)
    ```

# API versioning
versioning:
  documentation: |
    ## API Versioning
    
    ### Version Format
    The API version is included in the URL path:
    ```
    /api/v1/resource/Customer
    /api/v2/resource/Customer
    ```
    
    ### Supported Versions
    | Version | Status | Deprecation Date | End of Life |
    |---------|--------|------------------|-------------|
    | v1 | Deprecated | 2024-01-01 | 2024-12-31 |
    | v2 | Current | - | - |
    | v3 | Beta | - | - |
    
    ### Version Changes
    {version_changelog}
    
    ### Migration Guide
    {migration_guide}

# Testing documentation
testing:
  template: |
    ## Testing the API
    
    ### Test Environment
    Base URL: `https://test-api.example.com`
    
    ### Test Credentials
    ```
    API Key: test_key_xxxxx
    API Secret: test_secret_xxxxx
    ```
    
    ### Postman Collection
    [Download Postman Collection](link-to-collection)
    
    ### Test Data
    The test environment is reset daily with sample data.
    
    ### Testing Checklist
    - [ ] Authentication works
    - [ ] CRUD operations on main resources
    - [ ] Error handling for invalid requests
    - [ ] Rate limiting behavior
    - [ ] Pagination with large datasets
    - [ ] Filtering and sorting
    - [ ] Webhook delivery

# SDK documentation
sdk_documentation:
  template: |
    ## SDK Libraries
    
    ### Python SDK
    ```bash
    pip install frappe-client
    ```
    
    ```python
    from frappeclient import FrappeClient
    
    client = FrappeClient("https://example.com")
    client.login("user@example.com", "password")
    
    # Get list
    customers = client.get_list(
        "Customer",
        filters={"customer_group": "Commercial"},
        fields=["name", "customer_name"]
    )
    
    # Get single document
    customer = client.get_doc("Customer", "CUST-00001")
    
    # Create document
    client.insert({
        "doctype": "Customer",
        "customer_name": "New Customer"
    })
    ```
    
    ### JavaScript SDK
    ```bash
    npm install frappe-js-sdk
    ```
    
    ```javascript
    import { FrappeApp } from 'frappe-js-sdk';
    
    const frappe = new FrappeApp('https://example.com');
    
    // Authentication
    await frappe.auth.loginWithUsernamePassword({
        username: 'user@example.com',
        password: 'password'
    });
    
    // API calls
    const customers = await frappe.db.getList('Customer', {
        filters: {customer_group: 'Commercial'},
        fields: ['name', 'customer_name']
    });
    ```

# OpenAPI/Swagger spec
openapi_template: |
  openapi: 3.0.0
  info:
    title: {api_title}
    description: {api_description}
    version: {version}
    contact:
      email: {contact_email}
    license:
      name: {license}
      url: {license_url}
  servers:
    - url: {base_url}
      description: Production server
    - url: {test_url}
      description: Test server
  security:
    - tokenAuth: []
  paths:
    {paths_definition}
  components:
    schemas:
      {schemas_definition}
    securitySchemes:
      tokenAuth:
        type: apiKey
        in: header
        name: Authorization
        description: Use format 'token api_key:api_secret'

# Best practices section
best_practices: |
  ## API Best Practices
  
  ### General Guidelines
  1. **Use HTTPS** - Always use SSL/TLS encryption
  2. **Version your API** - Include version in URL or header
  3. **Use proper HTTP methods** - GET for read, POST for create, etc.
  4. **Return appropriate status codes** - 200 for success, 404 for not found, etc.
  5. **Implement pagination** - Don't return unlimited results
  6. **Use consistent naming** - Stick to snake_case or camelCase
  7. **Document everything** - Keep documentation up-to-date
  8. **Handle errors gracefully** - Return meaningful error messages
  9. **Implement rate limiting** - Protect against abuse
  10. **Use authentication** - Secure your endpoints
  
  ### ERPNext Specific
  1. **Use @frappe.whitelist()** - Always whitelist public methods
  2. **Check permissions** - Use frappe.has_permission()
  3. **Validate input** - Use frappe.validate_value()
  4. **Use DocType controllers** - Leverage built-in validation
  5. **Follow naming conventions** - Use ERPNext standard names
  6. **Cache when possible** - Use frappe.cache()
  7. **Log errors** - Use frappe.log_error()
  8. **Use transactions** - Wrap in frappe.db.begin/commit
  9. **Sanitize queries** - Prevent SQL injection
  10. **Test thoroughly** - Write unit and integration tests

# Change log template
changelog_template: |
  ## API Changelog
  
  ### [{version}] - {date}
  
  #### Added
  {added_items}
  
  #### Changed  
  {changed_items}
  
  #### Deprecated
  {deprecated_items}
  
  #### Removed
  {removed_items}
  
  #### Fixed
  {fixed_items}
  
  #### Security
  {security_items}