---
template_name: "README Template"
template_type: "project_documentation"
version: "1.0.0"
description: "Comprehensive template for creating project README files for ERPNext applications"

# README structure
readme_structure:
  header: |
    # {PROJECT_NAME}
    
    [![License: {LICENSE}](https://img.shields.io/badge/License-{LICENSE}-blue.svg)](LICENSE)
    [![Version](https://img.shields.io/badge/version-{VERSION}-green.svg)](CHANGELOG.md)
    [![Build Status](https://img.shields.io/badge/build-passing-brightgreen.svg)]({BUILD_URL})
    [![Documentation](https://img.shields.io/badge/docs-available-blue.svg)]({DOCS_URL})
    [![ERPNext](https://img.shields.io/badge/ERPNext-v{ERPNEXT_VERSION}-orange.svg)](https://erpnext.com)
    [![Frappe](https://img.shields.io/badge/Frappe-v{FRAPPE_VERSION}-red.svg)](https://frappe.io)
    
    {PROJECT_TAGLINE}
    
    ![Screenshot]({SCREENSHOT_URL})

  table_of_contents: |
    ## Table of Contents
    
    - [Overview](#overview)
    - [Features](#features)
    - [Demo](#demo)
    - [Requirements](#requirements)
    - [Installation](#installation)
    - [Configuration](#configuration)
    - [Usage](#usage)
    - [Development](#development)
    - [Testing](#testing)
    - [Deployment](#deployment)
    - [API Documentation](#api-documentation)
    - [Contributing](#contributing)
    - [Support](#support)
    - [License](#license)
    - [Credits](#credits)

  overview: |
    ## Overview
    
    {PROJECT_DESCRIPTION}
    
    ### Why {PROJECT_NAME}?
    
    {VALUE_PROPOSITION}
    
    ### Key Benefits
    
    - ✨ **{BENEFIT_1}**: {BENEFIT_1_DESCRIPTION}
    - 🚀 **{BENEFIT_2}**: {BENEFIT_2_DESCRIPTION}
    - 🔒 **{BENEFIT_3}**: {BENEFIT_3_DESCRIPTION}
    - 📊 **{BENEFIT_4}**: {BENEFIT_4_DESCRIPTION}
    
    ### Use Cases
    
    {USE_CASES_LIST}

  features: |
    ## Features
    
    ### Core Features
    
    - ✅ **{FEATURE_1}**
      - {SUBFEATURE_1_1}
      - {SUBFEATURE_1_2}
    
    - ✅ **{FEATURE_2}**
      - {SUBFEATURE_2_1}
      - {SUBFEATURE_2_2}
    
    - ✅ **{FEATURE_3}**
      - {SUBFEATURE_3_1}
      - {SUBFEATURE_3_2}
    
    ### Advanced Features
    
    - 🎆 **{ADVANCED_FEATURE_1}**
    - 🎆 **{ADVANCED_FEATURE_2}**
    - 🎆 **{ADVANCED_FEATURE_3}**
    
    ### Upcoming Features
    
    - 🔄 {UPCOMING_FEATURE_1}
    - 🔄 {UPCOMING_FEATURE_2}
    - 🔄 {UPCOMING_FEATURE_3}

  demo: |
    ## Demo
    
    ### Live Demo
    
    🌐 **[Try the Live Demo]({DEMO_URL})**
    
    **Demo Credentials:**
    - Username: `demo@example.com`
    - Password: `demo123`
    
    ### Video Walkthrough
    
    [![Video Thumbnail]({VIDEO_THUMBNAIL})]({VIDEO_URL})
    
    ### Screenshots
    
    <details>
    <summary>Click to view screenshots</summary>
    
    #### Dashboard
    ![Dashboard]({SCREENSHOT_DASHBOARD})
    
    #### Feature 1
    ![Feature 1]({SCREENSHOT_FEATURE_1})
    
    #### Feature 2
    ![Feature 2]({SCREENSHOT_FEATURE_2})
    
    </details>

# Installation section
installation:
  requirements: |
    ## Requirements
    
    ### System Requirements
    
    - **OS**: Ubuntu 20.04+ / macOS 11+ / Windows WSL2
    - **Python**: 3.8+
    - **Node.js**: 16+
    - **MariaDB**: 10.3+ / MySQL 5.7+
    - **Redis**: 5+
    - **RAM**: Minimum 4GB (8GB recommended)
    - **Storage**: Minimum 20GB free space
    
    ### Framework Requirements
    
    - **Frappe Framework**: v{FRAPPE_VERSION}
    - **ERPNext**: v{ERPNEXT_VERSION} (if applicable)
    - **Bench**: Latest version

  quick_install: |
    ## Installation
    
    ### Quick Install (Recommended)
    
    ```bash
    # Clone the repository
    git clone {REPO_URL}
    cd {PROJECT_NAME}
    
    # Run installation script
    ./install.sh
    ```
    
    ### Manual Installation
    
    #### 1. Install Bench (if not already installed)
    
    ```bash
    pip3 install frappe-bench
    ```
    
    #### 2. Initialize Bench
    
    ```bash
    bench init frappe-bench --frappe-branch version-{FRAPPE_VERSION}
    cd frappe-bench
    ```
    
    #### 3. Create a New Site
    
    ```bash
    bench new-site {SITE_NAME}
    bench use {SITE_NAME}
    ```
    
    #### 4. Get the App
    
    ```bash
    bench get-app {APP_NAME} {REPO_URL}
    ```
    
    #### 5. Install the App
    
    ```bash
    bench --site {SITE_NAME} install-app {APP_NAME}
    ```
    
    #### 6. Start Development Server
    
    ```bash
    bench start
    ```
    
    Access the application at: `http://localhost:8000`

  docker_install: |
    ### Docker Installation
    
    ```bash
    # Clone the repository
    git clone {REPO_URL}
    cd {PROJECT_NAME}
    
    # Build and run with Docker Compose
    docker-compose up -d
    ```
    
    Access the application at: `http://localhost:8080`
    
    #### Docker Commands
    
    ```bash
    # Stop containers
    docker-compose down
    
    # View logs
    docker-compose logs -f
    
    # Execute bench commands
    docker-compose exec backend bench {command}
    ```

# Configuration section
configuration:
  template: |
    ## Configuration
    
    ### Environment Variables
    
    Create a `.env` file in the project root:
    
    ```env
    # Database Configuration
    DB_HOST=localhost
    DB_PORT=3306
    DB_NAME={DB_NAME}
    DB_USER={DB_USER}
    DB_PASSWORD={DB_PASSWORD}
    
    # Redis Configuration
    REDIS_HOST=localhost
    REDIS_PORT=6379
    REDIS_PASSWORD=
    
    # Application Settings
    APP_ENV=development
    APP_DEBUG=true
    APP_URL=http://localhost:8000
    
    # Email Configuration
    MAIL_DRIVER=smtp
    MAIL_HOST={MAIL_HOST}
    MAIL_PORT=587
    MAIL_USERNAME={MAIL_USERNAME}
    MAIL_PASSWORD={MAIL_PASSWORD}
    MAIL_ENCRYPTION=tls
    
    # API Keys (if applicable)
    API_KEY={API_KEY}
    API_SECRET={API_SECRET}
    ```
    
    ### Site Configuration
    
    Edit `sites/{site_name}/site_config.json`:
    
    ```json
    {
      "db_name": "_{DB_NAME}",
      "db_password": "{DB_PASSWORD}",
      "db_type": "mariadb",
      "developer_mode": 1,
      "disable_website_cache": 1,
      "encryption_key": "{ENCRYPTION_KEY}",
      "limits": {
        "space_usage": {
          "backup_size": 5.0,
          "database_size": 10.0,
          "files_size": 5.0,
          "total": 20.0
        }
      }
    }
    ```
    
    ### Custom Settings
    
    Navigate to **Settings > {APP_NAME} Settings** in the application to configure:
    
    - Feature toggles
    - Integration settings
    - Notification preferences
    - Workflow configurations

# Usage section
usage:
  template: |
    ## Usage
    
    ### Getting Started
    
    1. **Login** with your credentials
    2. **Navigate** to the {MODULE_NAME} module
    3. **Create** your first {DOCUMENT_TYPE}
    
    ### Basic Operations
    
    #### Creating a {DOCUMENT_TYPE}
    
    ```python
    # Via API
    import frappe
    
    doc = frappe.get_doc({
        "doctype": "{DOCUMENT_TYPE}",
        "field1": "value1",
        "field2": "value2"
    })
    doc.insert()
    doc.submit()  # If submittable
    ```
    
    #### Via UI
    
    1. Click **New {DOCUMENT_TYPE}**
    2. Fill in required fields
    3. Click **Save**
    4. Click **Submit** (if applicable)
    
    ### Advanced Usage
    
    #### API Endpoints
    
    ```bash
    # Get list
    GET /api/resource/{DocType}
    
    # Get single document
    GET /api/resource/{DocType}/{name}
    
    # Create document
    POST /api/resource/{DocType}
    
    # Update document
    PUT /api/resource/{DocType}/{name}
    
    # Delete document
    DELETE /api/resource/{DocType}/{name}
    ```
    
    #### Custom Methods
    
    ```javascript
    // Client-side
    frappe.call({
        method: '{app_name}.{module}.{method}',
        args: {
            param1: 'value1',
            param2: 'value2'
        },
        callback: function(r) {
            console.log(r.message);
        }
    });
    ```

# Development section
development:
  template: |
    ## Development
    
    ### Development Setup
    
    ```bash
    # Enable developer mode
    bench --site {SITE_NAME} set-config developer_mode 1
    
    # Watch for changes
    bench start
    
    # In another terminal, watch frontend
    cd apps/{APP_NAME}
    yarn watch
    ```
    
    ### Project Structure
    
    ```
    {APP_NAME}/
    ├── {app_name}/
    │   ├── {module_name}/
    │   │   ├── doctype/
    │   │   │   └── {doctype_name}/
    │   │   │       ├── {doctype_name}.js
    │   │   │       ├── {doctype_name}.json
    │   │   │       ├── {doctype_name}.py
    │   │   │       └── test_{doctype_name}.py
    │   │   ├── page/
    │   │   ├── report/
    │   │   └── web_form/
    │   ├── public/
    │   │   ├── css/
    │   │   ├── js/
    │   │   └── images/
    │   ├── templates/
    │   ├── www/
    │   ├── hooks.py
    │   └── patches.txt
    ├── requirements.txt
    ├── setup.py
    ├── LICENSE
    └── README.md
    ```
    
    ### Coding Standards
    
    - **Python**: Follow PEP 8
    - **JavaScript**: Use ESLint configuration
    - **SQL**: Use uppercase for keywords
    - **Git**: Follow conventional commits
    
    ### Making Changes
    
    1. Create a new branch
       ```bash
       git checkout -b feature/your-feature-name
       ```
    
    2. Make your changes
    
    3. Run tests
       ```bash
       bench --site {SITE_NAME} run-tests --app {APP_NAME}
       ```
    
    4. Commit changes
       ```bash
       git add .
       git commit -m "feat: add new feature"
       ```
    
    5. Push and create PR
       ```bash
       git push origin feature/your-feature-name
       ```

# Testing section
testing:
  template: |
    ## Testing
    
    ### Running Tests
    
    ```bash
    # Run all tests
    bench --site {SITE_NAME} run-tests --app {APP_NAME}
    
    # Run specific test
    bench --site {SITE_NAME} run-tests --app {APP_NAME} --test test_{module_name}
    
    # Run with coverage
    bench --site {SITE_NAME} run-tests --app {APP_NAME} --coverage
    
    # Run in CI mode
    bench --site {SITE_NAME} run-tests --app {APP_NAME} --ci
    ```
    
    ### Test Structure
    
    ```python
    # test_{module_name}.py
    import frappe
    import unittest
    
    class Test{ModuleName}(unittest.TestCase):
        def setUp(self):
            """Setup test data"""
            pass
        
        def test_{feature}(self):
            """Test {feature} functionality"""
            # Arrange
            # Act
            # Assert
            pass
        
        def tearDown(self):
            """Clean up test data"""
            pass
    ```
    
    ### Frontend Testing
    
    ```bash
    # Run Jest tests
    cd apps/{APP_NAME}
    yarn test
    
    # Run with coverage
    yarn test:coverage
    
    # Run in watch mode
    yarn test:watch
    ```
    
    ### E2E Testing
    
    ```bash
    # Run Cypress tests
    cd apps/{APP_NAME}
    yarn cypress:open  # Interactive mode
    yarn cypress:run   # Headless mode
    ```

# Deployment section
deployment:
  template: |
    ## Deployment
    
    ### Production Deployment
    
    #### Prerequisites
    
    - Production server with Ubuntu 20.04+
    - Domain name configured
    - SSL certificate
    
    #### Deployment Steps
    
    1. **Setup Production Server**
       ```bash
       # Use Frappe's easy install script
       wget https://raw.githubusercontent.com/frappe/bench/develop/install.py
       sudo python3 install.py --production
       ```
    
    2. **Deploy Application**
       ```bash
       cd /home/frappe/frappe-bench
       bench get-app {APP_NAME} {REPO_URL}
       bench --site {PRODUCTION_SITE} install-app {APP_NAME}
       ```
    
    3. **Configure Nginx**
       ```bash
       bench setup nginx
       sudo ln -s `pwd`/config/nginx.conf /etc/nginx/conf.d/frappe-bench.conf
       sudo systemctl reload nginx
       ```
    
    4. **Setup Supervisor**
       ```bash
       bench setup supervisor
       sudo ln -s `pwd`/config/supervisor.conf /etc/supervisor/conf.d/frappe-bench.conf
       sudo supervisorctl reread
       sudo supervisorctl update
       ```
    
    5. **Enable Production Mode**
       ```bash
       bench --site {PRODUCTION_SITE} set-config developer_mode 0
       bench setup production {USER}
       ```
    
    ### CI/CD Pipeline
    
    ```yaml
    # .github/workflows/deploy.yml
    name: Deploy to Production
    
    on:
      push:
        branches: [main]
    
    jobs:
      deploy:
        runs-on: ubuntu-latest
        steps:
          - uses: actions/checkout@v2
          - name: Deploy to server
            run: |
              # Your deployment script
    ```
    
    ### Monitoring
    
    - **Application Monitoring**: New Relic / Datadog
    - **Error Tracking**: Sentry
    - **Logs**: ELK Stack
    - **Uptime**: Pingdom / UptimeRobot

# API documentation section
api_documentation:
  template: |
    ## API Documentation
    
    ### REST API
    
    Base URL: `https://your-domain.com/api`
    
    #### Authentication
    
    ```bash
    # Token Authentication
    curl -H "Authorization: token {api_key}:{api_secret}" \
         https://your-domain.com/api/resource/{DocType}
    ```
    
    #### Endpoints
    
    | Method | Endpoint | Description |
    |--------|----------|-------------|
    | GET | `/resource/{DocType}` | List documents |
    | GET | `/resource/{DocType}/{name}` | Get single document |
    | POST | `/resource/{DocType}` | Create document |
    | PUT | `/resource/{DocType}/{name}` | Update document |
    | DELETE | `/resource/{DocType}/{name}` | Delete document |
    
    #### Custom Endpoints
    
    {CUSTOM_ENDPOINTS_TABLE}
    
    ### SDK Usage
    
    #### Python
    ```python
    from {app_name}.api import {method_name}
    
    result = {method_name}(param1="value1", param2="value2")
    ```
    
    #### JavaScript
    ```javascript
    frappe.call({
        method: '{app_name}.api.{method_name}',
        args: { param1: 'value1' },
        callback: (r) => console.log(r.message)
    });
    ```
    
    📖 **[Full API Documentation]({API_DOCS_URL})**

# Contributing section
contributing:
  template: |
    ## Contributing
    
    We welcome contributions! Please see our [Contributing Guide](CONTRIBUTING.md) for details.
    
    ### How to Contribute
    
    1. Fork the repository
    2. Create your feature branch (`git checkout -b feature/AmazingFeature`)
    3. Commit your changes (`git commit -m 'Add some AmazingFeature'`)
    4. Push to the branch (`git push origin feature/AmazingFeature`)
    5. Open a Pull Request
    
    ### Development Process
    
    1. Check existing issues or create a new one
    2. Get issue assigned to you
    3. Follow coding standards
    4. Write tests for new features
    5. Update documentation
    6. Submit PR for review
    
    ### Code of Conduct
    
    Please read our [Code of Conduct](CODE_OF_CONDUCT.md) before contributing.

# Support section
support:
  template: |
    ## Support
    
    ### Getting Help
    
    - 📚 **Documentation**: [{DOCS_URL}]({DOCS_URL})
    - 💬 **Discussions**: [GitHub Discussions]({REPO_URL}/discussions)
    - 🐛 **Issues**: [GitHub Issues]({REPO_URL}/issues)
    - 📧 **Email**: {SUPPORT_EMAIL}
    - 💬 **Chat**: [Discord Server]({DISCORD_URL})
    
    ### Commercial Support
    
    For enterprise support, custom development, and training:
    
    - **Email**: {ENTERPRISE_EMAIL}
    - **Website**: [{COMPANY_WEBSITE}]({COMPANY_WEBSITE})
    - **Phone**: {SUPPORT_PHONE}
    
    ### Community
    
    - [Forum]({FORUM_URL})
    - [Stack Overflow]({SO_TAG_URL})
    - [Twitter]({TWITTER_URL})
    - [LinkedIn]({LINKEDIN_URL})

# License section
license:
  template: |
    ## License
    
    This project is licensed under the {LICENSE_TYPE} - see the [LICENSE](LICENSE) file for details.
    
    ### Third-Party Licenses
    
    This project uses the following open-source packages:
    
    | Package | License | Link |
    |---------|---------|------|
    {THIRD_PARTY_LICENSES}

# Credits section
credits:
  template: |
    ## Credits
    
    ### Contributors
    
    Thanks to all contributors who have helped this project grow:
    
    <!-- ALL-CONTRIBUTORS-LIST:START -->
    <!-- ALL-CONTRIBUTORS-LIST:END -->
    
    ### Acknowledgments
    
    - {ACKNOWLEDGMENT_1}
    - {ACKNOWLEDGMENT_2}
    - {ACKNOWLEDGMENT_3}
    
    ### Sponsors
    
    {SPONSORS_LIST}
    
    ### Built With
    
    - [Frappe Framework](https://frappe.io)
    - [ERPNext](https://erpnext.com)
    - [Vue.js](https://vuejs.org)
    - [Python](https://python.org)
    - [MariaDB](https://mariadb.org)

# Footer section
footer:
  template: |
    ---
    
    <p align="center">
      Made with ❤️ by {COMPANY_NAME}
    </p>
    
    <p align="center">
      <a href="{REPO_URL}">🌟 Star us on GitHub</a> •
      <a href="{TWITTER_URL}">🐦 Follow on Twitter</a> •
      <a href="{BLOG_URL}">📝 Read our Blog</a>
    </p>

# Changelog template
changelog:
  template: |
    # Changelog
    
    All notable changes to this project will be documented in this file.
    
    The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
    and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).
    
    ## [Unreleased]
    
    ### Added
    - {NEW_FEATURES}
    
    ### Changed
    - {CHANGES}
    
    ### Deprecated
    - {DEPRECATIONS}
    
    ### Removed
    - {REMOVALS}
    
    ### Fixed
    - {BUG_FIXES}
    
    ### Security
    - {SECURITY_FIXES}
    
    ## [{VERSION}] - {DATE}
    
    ### Added
    - Initial release
    - {FEATURE_LIST}

# Best practices
best_practices:
  - "Start with a clear, concise project description"
  - "Include badges for build status, version, license"
  - "Provide clear installation instructions"
  - "Include screenshots or GIFs for visual elements"
  - "Document all configuration options"
  - "Provide examples for common use cases"
  - "Include troubleshooting section"
  - "Keep README updated with each release"
  - "Use consistent formatting and style"
  - "Include table of contents for long READMEs"
  - "Provide links to additional resources"
  - "Credit all contributors and dependencies"
  - "Include license information clearly"
  - "Make it easy for people to contribute"
  - "Test all commands and code examples"