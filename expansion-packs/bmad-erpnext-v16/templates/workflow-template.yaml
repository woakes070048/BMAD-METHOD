name: "workflow-template"
title: "ERPNext Workflow Template"
description: "Template for creating comprehensive ERPNext workflows with states, transitions, and automation"
version: "1.0.0"

parameters:
  workflow_name:
    type: "string"
    required: true
    description: "Name of the workflow (Title Case)"
  
  target_doctype:
    type: "string"
    required: true
    description: "DocType this workflow applies to"
  
  workflow_states:
    type: "array"
    required: true
    description: "List of workflow states"
  
  workflow_actions:
    type: "array"
    required: true
    description: "List of workflow actions/transitions"
  
  approval_roles:
    type: "array"
    required: false
    description: "Roles that can approve in this workflow"
  
  notification_settings:
    type: "object"
    required: false
    description: "Email notification configuration"
  
  auto_transitions:
    type: "array"
    required: false
    description: "Automatic state transitions based on conditions"

templates:
  workflow_definition: |
    # Workflow Definition: {{ workflow_name }}
    # Target DocType: {{ target_doctype }}
    # Generated: {{ generation_date }}
    
    ## Workflow Configuration
    
    ### States
    {% for state in workflow_states %}
    - **{{ state.name }}**
      - Style: {{ state.style | default('Primary') }}
      - Color: {{ state.color | default('#007bff') }}
      - Allow Edit: {{ state.allow_edit | default('All') }}
      - Next States: {{ state.next_states | join(', ') if state.next_states else 'None' }}
      {% if state.description %}
      - Description: {{ state.description }}
      {% endif %}
    {% endfor %}
    
    ### Actions/Transitions
    {% for action in workflow_actions %}
    - **{{ action.name }}**
      - From State: {{ action.from_state }}
      - To State: {{ action.to_state }}
      - Allowed Roles: {{ action.allowed_roles | join(', ') }}
      - Allow Self Approval: {{ action.allow_self_approval | default('No') }}
      {% if action.condition %}
      - Condition: {{ action.condition }}
      {% endif %}
    {% endfor %}

  workflow_server_script: |
    import frappe
    from frappe import _
    from frappe.utils import now_datetime, cstr
    from frappe.model.workflow import apply_workflow
    
    def {{ workflow_name.lower().replace(' ', '_') }}_handler(doc, method):
        """
        {{ workflow_name }} workflow event handler
        Handles workflow state changes and automation for {{ target_doctype }}
        """
        
        if method == "on_update":
            handle_workflow_state_change(doc)
        elif method == "before_submit":
            validate_workflow_before_submit(doc)
        elif method == "on_submit":
            handle_workflow_submission(doc)
    
    def handle_workflow_state_change(doc):
        """Handle workflow state changes"""
        
        if not doc.workflow_state:
            return
        
        previous_state = doc.get_db_value("workflow_state")
        current_state = doc.workflow_state
        
        if previous_state != current_state:
            {% for state in workflow_states %}
            if current_state == "{{ state.name }}":
                handle_{{ state.name.lower().replace(' ', '_') }}_state(doc, previous_state)
            {% endfor %}
            
            # Send notifications for state change
            send_workflow_notification(doc, previous_state, current_state)
    
    {% for state in workflow_states %}
    def handle_{{ state.name.lower().replace(' ', '_') }}_state(doc, previous_state):
        """Handle {{ state.name }} state logic"""
        
        {% if state.auto_actions %}
        # Automatic actions for {{ state.name }} state
        {% for action in state.auto_actions %}
        {{ action | indent(8) }}
        {% endfor %}
        {% endif %}
        
        {% if state.validations %}
        # Validations for {{ state.name }} state
        {% for validation in state.validations %}
        {{ validation | indent(8) }}
        {% endfor %}
        {% endif %}
        
        {% if state.field_updates %}
        # Field updates for {{ state.name }} state
        {% for field_update in state.field_updates %}
        doc.{{ field_update.field }} = {{ field_update.value }}
        {% endfor %}
        {% endif %}
        
        # Log state change
        frappe.log_error(f"{{ target_doctype }} {doc.name} moved to {{ state.name }} state", "Workflow State Change")
    
    {% endfor %}
    
    def validate_workflow_before_submit(doc):
        """Validate document before submission based on workflow state"""
        
        if not doc.workflow_state:
            frappe.throw(_("Workflow state is required before submission"))
        
        {% if submission_states %}
        allowed_states = {{ submission_states }}
        if doc.workflow_state not in allowed_states:
            frappe.throw(_("Document cannot be submitted in {0} state").format(doc.workflow_state))
        {% endif %}
        
        # Additional submission validations
        {% for validation in submission_validations %}
        {{ validation | indent(8) }}
        {% endfor %}
    
    def handle_workflow_submission(doc):
        """Handle workflow actions after document submission"""
        
        # Post-submission workflow actions
        {% for action in post_submission_actions %}
        {{ action | indent(8) }}
        {% endfor %}
        
        # Update related documents if needed
        update_related_documents(doc)
    
    def send_workflow_notification(doc, previous_state, current_state):
        """Send email notifications for workflow state changes"""
        
        notification_config = get_notification_config(current_state)
        if not notification_config:
            return
        
        recipients = get_workflow_recipients(doc, notification_config)
        if not recipients:
            return
        
        # Prepare email context
        context = {
            "doc": doc,
            "previous_state": previous_state,
            "current_state": current_state,
            "workflow_name": "{{ workflow_name }}",
            "user": frappe.session.user,
            "datetime": now_datetime()
        }
        
        # Send notification email
        frappe.sendmail(
            recipients=recipients,
            subject=notification_config.get("subject", f"{{ target_doctype }} {doc.name} - Workflow Update"),
            template=notification_config.get("template", "workflow_notification"),
            args=context,
            reference_doctype=doc.doctype,
            reference_name=doc.name
        )
    
    def get_notification_config(workflow_state):
        """Get notification configuration for workflow state"""
        
        notification_configs = {
            {% for state in workflow_states %}
            {% if state.notifications %}
            "{{ state.name }}": {
                "subject": "{{ state.notifications.subject | default(target_doctype + ' - ' + state.name) }}",
                "template": "{{ state.notifications.template | default('workflow_notification') }}",
                "recipients": {{ state.notifications.recipients }}
            },
            {% endif %}
            {% endfor %}
        }
        
        return notification_configs.get(workflow_state)
    
    def get_workflow_recipients(doc, notification_config):
        """Get list of recipients for workflow notifications"""
        
        recipients = []
        recipient_config = notification_config.get("recipients", [])
        
        for recipient in recipient_config:
            if recipient.get("type") == "role":
                # Get users with specific role
                role_users = frappe.get_all("Has Role",
                    filters={"role": recipient["value"]},
                    fields=["parent"]
                )
                recipients.extend([r.parent for r in role_users])
                
            elif recipient.get("type") == "field":
                # Get user from document field
                field_value = doc.get(recipient["value"])
                if field_value:
                    recipients.append(field_value)
                    
            elif recipient.get("type") == "user":
                # Direct user email
                recipients.append(recipient["value"])
        
        # Remove duplicates and filter valid emails
        unique_recipients = list(set(recipients))
        valid_recipients = []
        
        for recipient in unique_recipients:
            if frappe.db.exists("User", recipient):
                user_email = frappe.db.get_value("User", recipient, "email")
                if user_email:
                    valid_recipients.append(user_email)
        
        return valid_recipients
    
    def update_related_documents(doc):
        """Update related documents based on workflow changes"""
        
        {% for related_update in related_document_updates %}
        # Update {{ related_update.doctype }}
        related_docs = frappe.get_all("{{ related_update.doctype }}",
            filters={{ related_update.filters }},
            fields=["name"]
        )
        
        for related_doc in related_docs:
            frappe.db.set_value("{{ related_update.doctype }}", 
                related_doc.name, 
                "{{ related_update.field }}", 
                {{ related_update.value }}
            )
        {% endfor %}
        
        frappe.db.commit()

  workflow_client_script: |
    frappe.ui.form.on('{{ target_doctype }}', {
        refresh: function(frm) {
            // Add custom buttons based on workflow state
            add_workflow_buttons(frm);
            
            // Set field properties based on workflow state
            set_workflow_field_properties(frm);
            
            // Show workflow status indicator
            show_workflow_status(frm);
        },
        
        workflow_state: function(frm) {
            // Handle workflow state changes on client side
            handle_client_workflow_change(frm);
        }
    });
    
    function add_workflow_buttons(frm) {
        // Remove existing workflow buttons
        frm.custom_buttons = {};
        
        if (!frm.doc.workflow_state || frm.is_new()) {
            return;
        }
        
        // Add workflow-specific buttons
        {% for action in workflow_actions %}
        if (frm.doc.workflow_state === "{{ action.from_state }}" && 
            has_workflow_permission("{{ action.allowed_roles | join('", "') }}")) {
            
            frm.add_custom_button(__('{{ action.name }}'), function() {
                execute_workflow_action(frm, "{{ action.name }}", "{{ action.to_state }}");
            }, __("Workflow"));
        }
        {% endfor %}
        
        // Add workflow history button
        frm.add_custom_button(__('Workflow History'), function() {
            show_workflow_history(frm);
        }, __("View"));
    }
    
    function set_workflow_field_properties(frm) {
        // Set field read-only based on workflow state
        const state_permissions = {
            {% for state in workflow_states %}
            "{{ state.name }}": {
                read_only_fields: {{ state.read_only_fields | default('[]') }},
                required_fields: {{ state.required_fields | default('[]') }},
                hidden_fields: {{ state.hidden_fields | default('[]') }}
            },
            {% endfor %}
        };
        
        const current_permissions = state_permissions[frm.doc.workflow_state];
        if (current_permissions) {
            // Set read-only fields
            current_permissions.read_only_fields.forEach(function(field) {
                frm.set_df_property(field, 'read_only', 1);
            });
            
            // Set required fields
            current_permissions.required_fields.forEach(function(field) {
                frm.set_df_property(field, 'reqd', 1);
            });
            
            // Hide fields
            current_permissions.hidden_fields.forEach(function(field) {
                frm.set_df_property(field, 'hidden', 1);
            });
        }
    }
    
    function show_workflow_status(frm) {
        // Show workflow status with colored indicator
        if (frm.doc.workflow_state) {
            const state_colors = {
                {% for state in workflow_states %}
                "{{ state.name }}": "{{ state.color | default('#007bff') }}",
                {% endfor %}
            };
            
            const color = state_colors[frm.doc.workflow_state] || '#6c757d';
            
            frm.dashboard.set_headline_alert(
                `<div style="color: ${color}; font-weight: bold;">
                    Status: ${frm.doc.workflow_state}
                </div>`
            );
        }
    }
    
    function execute_workflow_action(frm, action_name, to_state) {
        frappe.confirm(
            __('Are you sure you want to {0}?', [action_name.toLowerCase()]),
            function() {
                frappe.call({
                    method: 'frappe.model.workflow.apply_workflow',
                    args: {
                        doc: frm.doc,
                        action: action_name
                    },
                    callback: function(r) {
                        if (!r.exc) {
                            frm.reload_doc();
                            frappe.show_alert({
                                message: __('Workflow action completed successfully'),
                                indicator: 'green'
                            });
                        }
                    }
                });
            }
        );
    }
    
    function show_workflow_history(frm) {
        // Show workflow history in a dialog
        frappe.call({
            method: 'frappe.desk.form.load.get_communications',
            args: {
                doctype: frm.doc.doctype,
                name: frm.doc.name
            },
            callback: function(r) {
                if (r.message) {
                    const workflow_logs = r.message.filter(c => c.communication_type === 'Workflow');
                    show_workflow_dialog(workflow_logs);
                }
            }
        });
    }
    
    function show_workflow_dialog(logs) {
        const dialog = new frappe.ui.Dialog({
            title: __('Workflow History'),
            fields: [
                {
                    fieldtype: 'HTML',
                    fieldname: 'workflow_log'
                }
            ]
        });
        
        let html = '<div class="workflow-history">';
        logs.forEach(function(log) {
            html += `<div class="workflow-entry">
                <strong>${log.sender}</strong> - ${log.creation}<br>
                ${log.content}
            </div><hr>`;
        });
        html += '</div>';
        
        dialog.fields_dict.workflow_log.$wrapper.html(html);
        dialog.show();
    }
    
    function has_workflow_permission(roles) {
        // Check if current user has required workflow permissions
        const user_roles = frappe.user_roles;
        return roles.some(role => user_roles.includes(role));
    }
    
    function handle_client_workflow_change(frm) {
        // Handle client-side workflow state changes
        refresh_form_after_workflow_change(frm);
    }
    
    function refresh_form_after_workflow_change(frm) {
        // Refresh form elements after workflow change
        add_workflow_buttons(frm);
        set_workflow_field_properties(frm);
        show_workflow_status(frm);
    }

  email_templates: |
    <!-- Workflow Notification Email Template -->
    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <h2>{{ workflow_name }} - Status Update</h2>
        
        <div style="background-color: #f8f9fa; padding: 20px; margin: 20px 0; border-radius: 5px;">
            <h3>Document Details:</h3>
            <p><strong>Document:</strong> {{ doc.doctype }} - {{ doc.name }}</p>
            <p><strong>Title:</strong> {{ doc.title or doc.name }}</p>
            <p><strong>Status Changed:</strong> {{ previous_state }} → {{ current_state }}</p>
            <p><strong>Changed By:</strong> {{ user }}</p>
            <p><strong>Date/Time:</strong> {{ datetime }}</p>
        </div>
        
        {% if doc.description %}
        <div style="margin: 20px 0;">
            <h4>Description:</h4>
            <p>{{ doc.description }}</p>
        </div>
        {% endif %}
        
        <div style="margin: 20px 0;">
            <a href="{{ frappe.utils.get_url() }}/app/{{ doc.doctype.lower().replace(' ', '-') }}/{{ doc.name }}" 
               style="background-color: #007bff; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">
                View Document
            </a>
        </div>
        
        <div style="margin-top: 30px; font-size: 12px; color: #6c757d;">
            <p>This is an automated notification from {{ workflow_name }} workflow.</p>
        </div>
    </div>

  workflow_hooks: |
    # Add to hooks.py
    
    doc_events = {
        "{{ target_doctype }}": {
            "on_update": "{{ app_name }}.workflows.{{ workflow_name.lower().replace(' ', '_') }}_handler",
            "before_submit": "{{ app_name }}.workflows.{{ workflow_name.lower().replace(' ', '_') }}_handler",
            "on_submit": "{{ app_name }}.workflows.{{ workflow_name.lower().replace(' ', '_') }}_handler"
        }
    }
    
    # Scheduler events for workflow maintenance
    scheduler_events = {
        "daily": [
            "{{ app_name }}.workflows.cleanup_old_workflow_logs"
        ]
    }
    
    # Email templates
    fixtures = [
        "Email Template"
    ]

examples:
  purchase_order_workflow:
    workflow_name: "Purchase Order Approval"
    target_doctype: "Purchase Order"
    workflow_states:
      - name: "Draft"
        style: "Info"
        color: "#17a2b8"
        allow_edit: "All"
      - name: "Pending Approval"
        style: "Warning" 
        color: "#ffc107"
        allow_edit: "Purchase Manager"
      - name: "Approved"
        style: "Success"
        color: "#28a745"
        allow_edit: "None"
      - name: "Rejected"
        style: "Danger"
        color: "#dc3545"
        allow_edit: "All"
    
    workflow_actions:
      - name: "Submit for Approval"
        from_state: "Draft"
        to_state: "Pending Approval"
        allowed_roles: ["Purchase User"]
      - name: "Approve"
        from_state: "Pending Approval"
        to_state: "Approved"
        allowed_roles: ["Purchase Manager"]
      - name: "Reject"
        from_state: "Pending Approval"
        to_state: "Rejected"
        allowed_roles: ["Purchase Manager"]

  project_workflow:
    workflow_name: "Project Lifecycle"
    target_doctype: "Project"
    workflow_states:
      - name: "Planning"
        style: "Info"
        color: "#17a2b8"
      - name: "In Progress"
        style: "Warning"
        color: "#ffc107"
      - name: "Review"
        style: "Secondary"
        color: "#6c757d"
      - name: "Completed"
        style: "Success"
        color: "#28a745"
      - name: "On Hold"
        style: "Danger"
        color: "#dc3545"
    
    workflow_actions:
      - name: "Start Project"
        from_state: "Planning"
        to_state: "In Progress"
        allowed_roles: ["Project Manager"]
      - name: "Send for Review"
        from_state: "In Progress"
        to_state: "Review"
        allowed_roles: ["Project Manager"]
      - name: "Complete"
        from_state: "Review"
        to_state: "Completed"
        allowed_roles: ["Project Manager"]
      - name: "Put on Hold"
        from_state: "In Progress"
        to_state: "On Hold"
        allowed_roles: ["Project Manager"]

best_practices:
  workflow_design:
    - "Keep workflows simple and intuitive"
    - "Limit the number of states (5-7 maximum)"
    - "Ensure clear state transitions"
    - "Provide meaningful state names"
    - "Document business rules clearly"
    
  permission_management:
    - "Use role-based permissions"
    - "Avoid allowing self-approval when possible"
    - "Test permission combinations thoroughly"
    - "Document role requirements"
    
  notification_strategy:
    - "Send notifications for important state changes"
    - "Avoid notification spam"
    - "Include relevant context in emails"
    - "Provide direct links to documents"
    - "Allow users to customize notification preferences"
    
  performance_considerations:
    - "Minimize complex validations in workflow handlers"
    - "Use background jobs for heavy processing"
    - "Index workflow state fields"
    - "Clean up old workflow logs regularly"
    - "Monitor workflow performance"

testing_checklist:
  - "Test all state transitions"
  - "Verify permission enforcement"
  - "Test notification sending" 
  - "Validate business rules"
  - "Test with different user roles"
  - "Verify field property changes"
  - "Test workflow history tracking"
  - "Validate error handling"
  - "Test concurrent workflow actions"
  - "Verify related document updates"