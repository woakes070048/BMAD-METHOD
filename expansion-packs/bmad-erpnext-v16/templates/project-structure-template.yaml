# Project Structure Document Template
# Generated by ERPNext Architect after PRD creation
# This becomes the master reference for all file locations

project_structure_document:
  metadata:
    document_id: "PROJECT-STRUCTURE-{project_name}-{date}"
    created_by: "erpnext-architect"
    created_date: "{timestamp}"
    version: "1.0.0"
    purpose: "Master reference document for project file organization and component locations"
    
  project_overview:
    name: "{project_name}"
    description: "{project_description}"
    app_name: "{app_name}"
    module_name: "{module_name}"
    
  document_locations:
    planning:
      prd:
        path: "docs/prd.md"
        description: "Product Requirements Document with functional and non-functional requirements"
        created: "{prd_creation_date}"
        
      architecture:
        path: "docs/architecture.md"
        description: "Technical architecture including DocTypes, APIs, and integrations"
        created: "{architecture_creation_date}"
        
      project_structure:
        path: "docs/PROJECT_STRUCTURE.md"
        description: "This document - master reference for all project files"
        
    development:
      epics:
        directory: "docs/epics/"
        description: "High-level feature descriptions and acceptance criteria"
        naming_pattern: "epic-{number}-{feature-name}.md"
        
      stories:
        directory: "docs/stories/"
        description: "Detailed implementation stories with technical requirements"
        naming_pattern: "story-{number}-{task-name}.md"
        
      tasks:
        directory: "docs/tasks/"
        description: "Granular development tasks"
        naming_pattern: "task-{story-number}-{task-number}.md"
        
  code_organization:
    backend:
      root: "{app_name}/"
      structure:
        api:
          path: "{app_name}/api/"
          description: "Whitelisted API endpoints"
          pattern: "{resource}.py"
          example: "customer.py, orders.py"
          
        doctypes:
          path: "{app_name}/{module_name}/doctype/"
          description: "DocType definitions and controllers"
          structure: |
            {doctype_name}/
            ├── {doctype_name}.json  # DocType definition
            ├── {doctype_name}.py     # Server-side controller
            ├── {doctype_name}.js     # Client-side controller
            └── test_{doctype_name}.py # Tests
            
        reports:
          path: "{app_name}/{module_name}/report/"
          description: "Server-side reports"
          
        print_formats:
          path: "{app_name}/{module_name}/print_format/"
          description: "Print format definitions"
          
        workflows:
          path: "{app_name}/{module_name}/workflow/"
          description: "Workflow definitions"
          
    frontend:
      root: "{app_name}/public/"
      structure:
        javascript:
          path: "{app_name}/public/js/"
          description: "Vue components and JavaScript files"
          patterns:
            bundles: "*.bundle.js"
            components: "{feature}/components/*.vue"
            stores: "{feature}/stores/*.js"
            
        css:
          path: "{app_name}/public/css/"
          description: "Stylesheets"
          
        pages:
          path: "{app_name}/{module_name}/page/"
          description: "Frappe pages for Vue mounting"
          structure: |
            {page_name}/
            ├── {page_name}.json  # Page definition
            └── {page_name}.js    # Page initialization
            
  testing_structure:
    root: "tests/"
    organization:
      unit_tests:
        path: "tests/unit/"
        description: "Unit tests for individual components"
        pattern: "test_{component_name}.py"
        
      integration_tests:
        path: "tests/integration/"
        description: "Integration tests for workflows"
        
      test_plans:
        path: "tests/plans/"
        description: "Test planning documents"
        pattern: "{feature}-test-plan.md"
        
      test_results:
        path: "tests/results/"
        description: "Test execution results"
        pattern: "{date}-{test-type}-results.json"
        
      coverage:
        path: "tests/coverage/"
        description: "Code coverage reports"
        
      compliance:
        path: "tests/compliance/"
        description: "Frappe-first compliance reports"
        
  configuration_files:
    app_level:
      - path: "{app_name}/hooks.py"
        description: "App configuration and event hooks"
        
      - path: "{app_name}/modules.txt"
        description: "List of app modules"
        
      - path: "{app_name}/patches.txt"
        description: "Database patches"
        
      - path: "pyproject.toml"
        description: "Python project configuration"
        
    project_level:
      - path: "PROJECT_CONTEXT.yaml"
        description: "Dynamic project context for agent reference"
        
      - path: ".gitignore"
        description: "Git ignore patterns"
        
      - path: "README.md"
        description: "Project documentation"
        
  naming_conventions:
    doctypes:
      pattern: "PascalCase"
      example: "CustomerPortal, SalesOrder"
      
    python_files:
      pattern: "snake_case"
      example: "customer_api.py, order_utils.py"
      
    vue_components:
      pattern: "PascalCase"
      example: "CustomerDashboard.vue, OrderList.vue"
      
    javascript_files:
      pattern: "kebab-case"
      example: "customer-dashboard.js, order-list.js"
      
    api_methods:
      pattern: "snake_case"
      example: "get_customer_data, update_order_status"
      
  file_discovery_hints:
    for_testing:
      - "All test files mirror source structure"
      - "API endpoints contain @frappe.whitelist() decorator"
      - "DocType controllers in {doctype_name}.py files"
      
    for_compliance:
      - "Search for @frappe.whitelist() to find APIs"
      - "Check *.bundle.js for Vue entry points"
      - "Validate imports in hooks.py"
      
    for_development:
      - "Check existing patterns in similar DocTypes"
      - "Reference hooks.py for app configuration"
      - "Use existing API patterns in api/ directory"
      
  standard_file_paths:
    # Quick reference for commonly needed files
    prd: "docs/prd.md"
    architecture: "docs/architecture.md"
    project_structure: "docs/PROJECT_STRUCTURE.md"
    project_context: "PROJECT_CONTEXT.yaml"
    hooks: "{app_name}/hooks.py"
    api_directory: "{app_name}/api/"
    doctype_directory: "{app_name}/{module_name}/doctype/"
    vue_components: "{app_name}/public/js/"
    test_results: "tests/results/latest.json"
    
  agent_specific_paths:
    testing_specialist:
      looks_for:
        - "tests/plans/"
        - "tests/results/"
        - "{app_name}/api/"
        - "{app_name}/{module_name}/doctype/"
      creates_in:
        - "tests/results/"
        - "tests/coverage/"
        
    compliance_validator:
      looks_for:
        - "{app_name}/api/"
        - "{app_name}/public/js/*.bundle.js"
        - "{app_name}/hooks.py"
      creates_in:
        - "tests/compliance/"
        
    api_developer:
      works_in:
        - "{app_name}/api/"
        - "{app_name}/{module_name}/doctype/"
      references:
        - "docs/architecture.md"
        - "docs/prd.md"
        
    vue_spa_architect:
      works_in:
        - "{app_name}/public/js/"
        - "{app_name}/{module_name}/page/"
      creates:
        - "*.bundle.js files"
        - "Vue components"
        - "Pinia stores"
        
  validation_checklist:
    - "All paths use forward slashes"
    - "App name is lowercase with underscores"
    - "Module name is lowercase with underscores"
    - "DocType names are PascalCase"
    - "No /frontend/ directory (native Vue only)"
    - "All APIs have @frappe.whitelist()"
    - "Test files mirror source structure"
    
  usage_instructions:
    for_agents:
      - "Load PROJECT_CONTEXT.yaml first"
      - "Reference this document for standard paths"
      - "Update PROJECT_CONTEXT.yaml when creating files"
      - "Include explicit paths in handoffs"
      
    for_developers:
      - "Follow naming conventions strictly"
      - "Place files in designated directories"
      - "Update this document for new patterns"
      - "Reference existing code for patterns"

# This template is filled by ERPNext Architect when creating project structure
# It serves as the master reference for all agents during development