name: "Webhook Trigger Template"
description: "Template for creating webhook endpoints and trigger handlers in ERPNext"
version: "1.0.0"

webhook_config:
  endpoint:
    name: "{{ webhook_name }}"
    path: "/api/method/{{ app_name }}.{{ module }}.{{ function_name }}"
    methods: ["POST", "GET"]
    allow_guest: false
    rate_limit: 100
    
  authentication:
    type: "{{ auth_type }}"  # token, signature, oauth, api_key
    
    token_auth:
      header: "Authorization"
      prefix: "Bearer"
      validation: |
        def validate_token(token):
            # Validate against stored tokens
            valid_token = frappe.db.get_value(
                "Webhook Token",
                {"token": token, "enabled": 1},
                "name"
            )
            return bool(valid_token)
            
    signature_auth:
      header: "X-Webhook-Signature"
      algorithm: "sha256"
      secret_key: "{{ secret_key }}"
      validation: |
        def validate_signature(payload, signature):
            import hmac
            import hashlib
            
            expected = hmac.new(
                secret_key.encode(),
                payload.encode(),
                hashlib.sha256
            ).hexdigest()
            
            return hmac.compare_digest(expected, signature)
            
    api_key_auth:
      header: "X-API-Key"
      validation: |
        def validate_api_key(api_key):
            return frappe.db.exists(
                "API Key",
                {"key": api_key, "enabled": 1}
            )

webhook_handler:
  python_code: |
    import frappe
    from frappe import _
    import json
    import traceback
    
    @frappe.whitelist(allow_guest={{ allow_guest }})
    def {{ function_name }}(**kwargs):
        """
        Webhook handler for {{ webhook_name }}
        
        Accepts:
        - POST requests with JSON payload
        - GET requests with query parameters
        
        Returns:
        - JSON response with success status
        """
        
        try:
            # Get request data
            if frappe.request.method == "POST":
                data = frappe.request.get_json()
            else:
                data = frappe.form_dict
            
            # Validate authentication
            {% if auth_type != "none" %}
            if not validate_webhook_auth(frappe.request):
                frappe.throw(
                    _("Authentication failed"),
                    frappe.AuthenticationError
                )
            {% endif %}
            
            # Validate payload
            {% if validation_schema %}
            if not validate_payload(data, {{ validation_schema }}):
                frappe.throw(
                    _("Invalid payload format"),
                    frappe.ValidationError
                )
            {% endif %}
            
            # Log webhook receipt
            webhook_log = frappe.get_doc({
                "doctype": "Webhook Log",
                "webhook": "{{ webhook_name }}",
                "request_data": json.dumps(data),
                "status": "Received",
                "timestamp": frappe.utils.now()
            }).insert(ignore_permissions=True)
            
            # Process webhook data
            result = process_webhook_data(data)
            
            # Update log with success
            webhook_log.status = "Processed"
            webhook_log.response_data = json.dumps(result)
            webhook_log.save(ignore_permissions=True)
            
            # Return success response
            return {
                "success": True,
                "message": _("Webhook processed successfully"),
                "data": result,
                "webhook_id": webhook_log.name
            }
            
        except Exception as e:
            # Log error
            frappe.log_error(
                message=traceback.format_exc(),
                title=f"Webhook Error: {{ webhook_name }}"
            )
            
            # Update log with error
            if webhook_log:
                webhook_log.status = "Failed"
                webhook_log.error = str(e)
                webhook_log.save(ignore_permissions=True)
            
            # Return error response
            return {
                "success": False,
                "error": str(e),
                "message": _("Webhook processing failed")
            }
    
    def process_webhook_data(data):
        """Process the webhook payload"""
        
        {% if processing_type == "create_document" %}
        # Create new document
        doc = frappe.get_doc({
            "doctype": "{{ target_doctype }}",
            {% for field, mapping in field_mappings.items() %}
            "{{ field }}": data.get("{{ mapping }}"),
            {% endfor %}
        })
        doc.insert()
        
        return {"document": doc.name}
        
        {% elif processing_type == "update_document" %}
        # Update existing document
        doc_name = data.get("{{ identifier_field }}")
        if not doc_name:
            frappe.throw("Document identifier not provided")
            
        doc = frappe.get_doc("{{ target_doctype }}", doc_name)
        {% for field, mapping in field_mappings.items() %}
        doc.{{ field }} = data.get("{{ mapping }}")
        {% endfor %}
        doc.save()
        
        return {"updated": doc.name}
        
        {% elif processing_type == "trigger_workflow" %}
        # Trigger workflow or automation
        from {{ app_name }}.workflows import {{ workflow_handler }}
        
        result = {{ workflow_handler }}(data)
        return {"workflow_result": result}
        
        {% elif processing_type == "custom" %}
        # Custom processing logic
        {{ custom_processing_code }}
        {% endif %}

payload_validation:
  schema:
    type: "object"
    required: {{ required_fields | tojson }}
    properties:
      {% for field, config in field_schemas.items() %}
      {{ field }}:
        type: "{{ config.type }}"
        {% if config.format %}format: "{{ config.format }}"{% endif %}
        {% if config.pattern %}pattern: "{{ config.pattern }}"{% endif %}
        {% if config.min %}minimum: {{ config.min }}{% endif %}
        {% if config.max %}maximum: {{ config.max }}{% endif %}
      {% endfor %}
      
  validation_code: |
    def validate_payload(data, schema):
        """Validate webhook payload against schema"""
        
        # Check required fields
        for field in schema.get('required', []):
            if field not in data:
                frappe.throw(f"Required field missing: {field}")
        
        # Validate field types and constraints
        for field, rules in schema.get('properties', {}).items():
            if field in data:
                value = data[field]
                
                # Type validation
                if not validate_type(value, rules['type']):
                    frappe.throw(f"Invalid type for {field}")
                
                # Format validation
                if 'format' in rules:
                    if not validate_format(value, rules['format']):
                        frappe.throw(f"Invalid format for {field}")
                
                # Pattern validation
                if 'pattern' in rules:
                    import re
                    if not re.match(rules['pattern'], str(value)):
                        frappe.throw(f"Pattern mismatch for {field}")
        
        return True

trigger_actions:
  on_success:
    - action: "create_notification"
      config:
        recipients: ["{{ admin_email }}"]
        subject: "Webhook received: {{ webhook_name }}"
        
    - action: "enqueue_job"
      config:
        queue: "default"
        job: "{{ app_name }}.jobs.process_webhook"
        
    - action: "emit_event"
      config:
        event: "webhook_processed"
        namespace: "{{ webhook_name }}"
        
  on_failure:
    - action: "send_alert"
      config:
        recipients: ["{{ error_email }}"]
        subject: "Webhook failed: {{ webhook_name }}"
        
    - action: "retry"
      config:
        max_attempts: 3
        delay: 60
        backoff: "exponential"

rate_limiting:
  enabled: true
  
  limits:
    per_minute: 60
    per_hour: 1000
    per_day: 10000
    
  implementation: |
    def check_rate_limit(identifier):
        """Check if rate limit exceeded"""
        
        key = f"webhook_rate:{identifier}"
        current = frappe.cache().get(key) or 0
        
        if current >= {{ rate_limit }}:
            frappe.throw(
                "Rate limit exceeded",
                frappe.RateLimitExceededError
            )
        
        frappe.cache().setex(key, 60, current + 1)
        return True

monitoring:
  logging:
    enabled: true
    level: "INFO"
    
    log_structure:
      timestamp: "{{ timestamp }}"
      webhook: "{{ webhook_name }}"
      source_ip: "{{ source_ip }}"
      method: "{{ http_method }}"
      payload_size: "{{ payload_size }}"
      processing_time: "{{ processing_time }}"
      status: "{{ status }}"
      
  metrics:
    - name: "webhook_requests_total"
      type: "counter"
      labels: ["webhook", "status"]
      
    - name: "webhook_processing_duration"
      type: "histogram"
      labels: ["webhook"]
      
    - name: "webhook_payload_size"
      type: "histogram"
      labels: ["webhook"]
      
  alerts:
    - condition: "error_rate > 0.1"
      action: "send_email"
      recipients: ["{{ ops_email }}"]
      
    - condition: "response_time > 5000"
      action: "send_slack"
      channel: "#alerts"

testing:
  test_payload: |
    {
      "event": "test",
      "data": {
        "field1": "value1",
        "field2": 123
      },
      "timestamp": "2024-01-15T10:00:00Z"
    }
    
  test_cases:
    - name: "Valid payload"
      payload: "{{ test_payload }}"
      expected_status: 200
      expected_response: {"success": true}
      
    - name: "Invalid auth"
      headers: {"Authorization": "invalid"}
      expected_status: 401
      
    - name: "Missing required field"
      payload: {"event": "test"}
      expected_status: 400
      
    - name: "Rate limit exceeded"
      repeat: 100
      expected_status: 429

deployment:
  setup_commands: |
    # Create webhook endpoint
    bench --site {{ site }} execute {{ app_name }}.setup.create_webhook
    
    # Configure authentication
    bench --site {{ site }} set-config webhook_secret {{ secret_key }}
    
    # Enable monitoring
    bench --site {{ site }} set-config webhook_monitoring 1
    
  verification: |
    # Test webhook endpoint
    curl -X POST {{ webhook_url }} \
      -H "Content-Type: application/json" \
      -H "Authorization: Bearer {{ test_token }}" \
      -d '{{ test_payload }}'