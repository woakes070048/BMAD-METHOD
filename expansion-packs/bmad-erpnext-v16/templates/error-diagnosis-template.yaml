name: "error-diagnosis-template"
title: "Error Diagnosis Template"
description: "Structured template for systematic diagnosis of runtime errors and technical issues"
version: "1.0.0"

metadata:
  author: "BMAD ERPNext Team"
  category: "Debugging & Diagnostics"
  use_case: "Systematic analysis of errors, performance issues, and unexpected behavior"
  framework: "ERPNext/Frappe applications"

template_structure:
  incident_info:
    report_date: "[Date/time of report]"
    reporter: "[Who reported the issue]"
    environment: "[Development/Staging/Production]"
    urgency: "[Low/Medium/High/Critical]"
    impact: "[Number of users/systems affected]"
    business_impact: "[How this affects business operations]"
  
  error_details:
    primary_error:
      error_message: "[Complete error message]"
      error_type: "[ImportError, AttributeError, etc.]"
      stack_trace: |
        [Complete stack trace]
      file_location: "[File and line number]"
      timestamp: "[When error occurred]"
    
    related_errors:
      - error_message: "[Related error message]"
        frequency: "[How often it occurs]"
        correlation: "[How it relates to primary error]"
    
    symptoms:
      - "[Observable symptom 1]"
      - "[Observable symptom 2]"
      - "[Observable symptom 3]"
  
  reproduction_info:
    reproduction_steps:
      1: "[Step 1 to reproduce]"
      2: "[Step 2 to reproduce]"
      3: "[Step 3 to reproduce]"
      result: "[What happens]"
    
    consistency:
      reproducible: "[Always/Sometimes/Rarely/Never]"
      conditions: "[Conditions that affect reproduction]"
      user_specific: "[Affects specific users/roles]"
      time_specific: "[Time-related patterns]"
    
    test_data:
      sample_data: "[Data used during testing]"
      data_dependencies: "[Required data setup]"
      edge_cases: "[Special conditions tested]"

  environment_analysis:
    system_info:
      frappe_version: "[Frappe framework version]"
      erpnext_version: "[ERPNext version if applicable]"
      python_version: "[Python version]"
      database: "[MariaDB/PostgreSQL version]"
      operating_system: "[OS and version]"
      server_resources: "[RAM, CPU, disk space]"
    
    app_status:
      installed_apps:
        - name: "[App name]"
          version: "[App version]"
          status: "[Active/Inactive]"
          recent_changes: "[Recent updates]"
      
      site_config:
        key_settings: "[Important configuration settings]"
        recent_changes: "[Recent config changes]"
        custom_settings: "[Custom/non-default settings]"
    
    resource_status:
      database_status: "[Connection, performance, locks]"
      file_system: "[Disk space, permissions]"
      network: "[Connectivity, external APIs]"
      background_jobs: "[Queue status, failed jobs]"

  initial_analysis:
    error_classification:
      category: "[Import/Database/Permission/Validation/Performance]"
      severity: "[Critical/High/Medium/Low]"
      scope: "[Single user/Multiple users/System-wide]"
      data_integrity_risk: "[Yes/No - risk to data]"
    
    immediate_observations:
      - "[First observation]"
      - "[Second observation]"
      - "[Third observation]"
    
    working_hypotheses:
      primary_hypothesis:
        theory: "[Most likely cause]"
        confidence: "[High/Medium/Low]"
        test_approach: "[How to verify this theory]"
      
      alternative_hypotheses:
        - theory: "[Alternative cause]"
          confidence: "[Confidence level]"
          test_approach: "[How to verify]"

  investigation_steps:
    log_analysis:
      logs_reviewed:
        - log_type: "[bench.log, site.log, etc.]"
          time_range: "[Time period examined]"
          key_findings: "[Important log entries]"
          patterns: "[Recurring patterns]"
      
      correlation_analysis:
        related_events: "[Events around error time]"
        timing_patterns: "[When errors occur]"
        user_patterns: "[User-related patterns]"
    
    code_analysis:
      problem_code:
        file_path: "[Path to problematic code]"
        function_name: "[Function with issue]"
        code_snippet: |
          [Relevant code section]
        analysis: "[What's wrong with the code]"
      
      recent_changes:
        - commit_hash: "[Git commit if applicable]"
          date: "[Date of change]"
          description: "[What was changed]"
          risk_assessment: "[How it might relate to error]"
    
    dependency_check:
      missing_dependencies:
        - name: "[Dependency name]"
          expected_version: "[Expected version]"
          actual_status: "[Missing/wrong version]"
          impact: "[How this affects functionality]"
      
      version_conflicts:
        - component: "[Component name]"
          conflict_description: "[Nature of conflict]"
          resolution_needed: "[How to resolve]"

  testing_and_validation:
    hypothesis_testing:
      - hypothesis: "[Hypothesis being tested]"
        test_method: "[How to test]"
        expected_result: "[What should happen if true]"
        actual_result: "[What actually happened]"
        conclusion: "[Confirmed/Disproven/Inconclusive]"
    
    isolation_testing:
      minimal_reproduction:
        steps: "[Simplest steps to reproduce]"
        environment: "[Minimal test environment]"
        result: "[Can reproduce with minimal setup]"
      
      component_isolation:
        - component: "[Component being tested]"
          test_result: "[Works/Fails in isolation]"
          dependencies: "[What it depends on]"
    
    data_validation:
      data_integrity:
        check_method: "[How data was validated]"
        findings: "[Data integrity status]"
        corruption_detected: "[Yes/No - description]"
      
      schema_validation:
        expected_schema: "[What schema should be]"
        actual_schema: "[Current schema state]"
        discrepancies: "[Differences found]"

  root_cause_analysis:
    confirmed_cause:
      primary_cause: "[Verified root cause]"
      contributing_factors: "[Additional contributing factors]"
      evidence: "[Evidence supporting this conclusion]"
      confidence_level: "[High/Medium/Low confidence]"
    
    impact_assessment:
      affected_systems: "[Which systems are impacted]"
      affected_users: "[User groups affected]"
      data_impact: "[Risk to data integrity]"
      business_continuity: "[Impact on business operations]"
    
    timeline_analysis:
      when_introduced: "[When problem first appeared]"
      escalation_pattern: "[How problem evolved]"
      trigger_event: "[What triggered the current incident]"

  solution_design:
    immediate_fix:
      action_required: "[Immediate steps to resolve]"
      commands_to_run: |
        [Specific commands or code changes]
      verification_steps: "[How to verify fix worked]"
      rollback_plan: "[How to undo if fix causes problems]"
    
    permanent_solution:
      code_changes:
        - file: "[File to modify]"
          change_type: "[Bug fix/Enhancement/Refactor]"
          description: "[What needs to change]"
          code_snippet: |
            [New code or changes needed]
      
      configuration_changes:
        - setting: "[Setting to modify]"
          current_value: "[Current value]"
          new_value: "[Recommended value]"
          justification: "[Why this change is needed]"
      
      infrastructure_changes:
        - component: "[Infrastructure component]"
          change_needed: "[What needs to change]"
          implementation: "[How to implement]"
    
    prevention_measures:
      monitoring: "[What monitoring to add]"
      alerting: "[Alert conditions to set up]"
      validation: "[Additional validation to implement]"
      documentation: "[Documentation to update]"
      training: "[User/developer training needed]"

  implementation_plan:
    execution_steps:
      1:
        action: "[First action to take]"
        responsible: "[Who does this]"
        timeline: "[When to complete]"
        dependencies: "[What needs to happen first]"
      2:
        action: "[Second action]"
        responsible: "[Who does this]"
        timeline: "[When to complete]"
        dependencies: "[Dependencies]"
    
    risk_mitigation:
      risks: "[Risks in implementing fix]"
      mitigation_strategies: "[How to minimize risks]"
      rollback_triggers: "[When to rollback]"
      communication_plan: "[Who to notify and when]"
    
    testing_plan:
      pre_deployment_testing:
        - test_type: "[Unit/Integration/User acceptance]"
          test_scenarios: "[What to test]"
          success_criteria: "[How to know test passed]"
      
      post_deployment_monitoring:
        monitoring_period: "[How long to monitor closely]"
        success_metrics: "[Metrics that indicate success]"
        failure_indicators: "[Signs that fix didn't work]"

  knowledge_management:
    lessons_learned:
      what_went_wrong: "[What caused the issue]"
      what_went_right: "[What worked well in response]"
      improvements_needed: "[How to improve response]"
    
    documentation_updates:
      - document: "[Document to update]"
        update_type: "[New section/Revision/Addition]"
        content: "[What content to add]"
    
    process_improvements:
      prevention_processes: "[New processes to prevent recurrence]"
      detection_processes: "[Better ways to detect similar issues]"
      response_processes: "[Improve incident response]"
    
    knowledge_sharing:
      team_briefing: "[Key points to share with team]"
      documentation_location: "[Where solution is documented]"
      searchable_tags: "[Tags for future reference]"

quality_assurance:
  diagnosis_validation:
    - "Root cause identified with sufficient evidence"
    - "Solution addresses root cause, not just symptoms"
    - "Risks and mitigation strategies identified"
    - "Prevention measures included"
    - "Knowledge documented for future reference"
  
  solution_validation:
    - "Fix tested in development environment"
    - "No regressions introduced"
    - "Performance impact acceptable"
    - "User experience preserved or improved"
    - "Rollback plan validated"

common_error_patterns:
  import_errors:
    typical_causes: "[Module not found, path issues, version conflicts]"
    diagnostic_commands: "[Commands to check imports, paths]"
    common_solutions: "[Typical fixes for import issues]"
  
  database_errors:
    typical_causes: "[Connection issues, schema problems, data corruption]"
    diagnostic_commands: "[Database debugging commands]"
    common_solutions: "[Database issue fixes]"
  
  permission_errors:
    typical_causes: "[Role/permission issues, authentication problems]"
    diagnostic_commands: "[Permission checking commands]"
    common_solutions: "[Permission fixes]"
  
  performance_issues:
    typical_causes: "[Slow queries, memory issues, resource constraints]"
    diagnostic_commands: "[Performance analysis commands]"
    common_solutions: "[Performance optimization approaches]"

tools_and_commands:
  diagnosis_commands:
    system_status:
      - "bench status"
      - "bench list-apps"
      - "df -h"
      - "free -m"
      - "top"
    
    application_debugging:
      - "bench --site [site] console"
      - "bench logs"
      - "tail -f logs/bench.log"
      - "bench --site [site] mariadb"
    
    error_investigation:
      - "grep -r 'error_text' logs/"
      - "find . -name '*.py' -exec grep -l 'function_name' {} \\;"
      - "git log --oneline --since='1 week ago'"