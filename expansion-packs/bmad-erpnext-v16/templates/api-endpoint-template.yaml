name: "api-endpoint-template"
title: "ERPNext API Endpoint Template"
description: "Template for creating secure, well-documented API endpoints in ERPNext applications"
version: "1.0.0"

parameters:
  endpoint_name:
    type: "string"
    required: true
    description: "Name of the API endpoint function (snake_case)"
  
  endpoint_path:
    type: "string"
    required: true
    description: "API path (e.g., 'myapp.api.endpoint_name')"
  
  http_methods:
    type: "array"
    required: false
    default: ["POST"]
    description: "Allowed HTTP methods"
  
  description:
    type: "string"
    required: true
    description: "Brief description of what the endpoint does"
  
  authentication_required:
    type: "boolean"
    required: false
    default: true
    description: "Whether authentication is required"
  
  allow_guest:
    type: "boolean"
    required: false
    default: false
    description: "Whether guest users can access this endpoint"
  
  parameters:
    type: "array"
    required: false
    description: "List of endpoint parameters"
  
  return_type:
    type: "string"
    required: false
    default: "json"
    description: "Return type (json, file, redirect)"
  
  rate_limit:
    type: "integer"
    required: false
    description: "Rate limit per minute (optional)"

templates:
  api_endpoint: |
    import frappe
    from frappe import _
    {% if needs_utils %}
    from frappe.utils import cstr, cint, flt, getdate, now_datetime
    {% endif %}
    {% if needs_validation %}
    from frappe.utils.data import validate_email_address, validate_phone_number
    {% endif %}
    {% if needs_permissions %}
    from frappe.permissions import has_permission
    {% endif %}
    {% if needs_requests %}
    import requests
    {% endif %}
    import json
    
    @frappe.whitelist({% if allow_guest %}allow_guest=True{% endif %})
    def {{ endpoint_name }}({% if parameters %}{{ parameters | map(attribute='name') | join(', ') }}{% endif %}):
        """
        {{ description }}
        
        {% if parameters %}
        Args:
        {% for param in parameters %}
            {{ param.name }} ({{ param.type }}): {{ param.description }}{% if param.required %} [Required]{% endif %}
        {% endfor %}
        {% endif %}
        
        Returns:
            dict: {{ return_description | default('API response with success status and data') }}
            
        Raises:
            frappe.ValidationError: When input validation fails
            frappe.PermissionError: When user lacks required permissions
        """
        try:
            {% if rate_limit %}
            # Rate limiting check
            if not check_rate_limit("{{ endpoint_name }}", {{ rate_limit }}):
                frappe.throw(_("Rate limit exceeded. Please try again later."))
            {% endif %}
            
            {% if authentication_required and not allow_guest %}
            # Authentication check
            if frappe.session.user == "Guest":
                frappe.throw(_("Authentication required"), frappe.AuthenticationError)
            {% endif %}
            
            {% if permission_checks %}
            # Permission checks
            {% for perm_check in permission_checks %}
            {{ perm_check | indent(12) }}
            {% endfor %}
            {% endif %}
            
            {% if validation_rules %}
            # Input validation
            validation_errors = []
            {% for rule in validation_rules %}
            {{ rule | indent(12) }}
            {% endfor %}
            
            if validation_errors:
                frappe.throw(_("Validation errors: {0}").format(", ".join(validation_errors)))
            {% endif %}
            
            # Main API logic
            {% if api_logic %}
            {{ api_logic | indent(12) }}
            {% else %}
            # Template implementation - customize based on your requirements
            try:
                {% if endpoint_type == "create" %}
                # Create new document
                doc = frappe.get_doc({
                    "doctype": "{{ target_doctype }}",
                    {% for field in required_fields %}
                    "{{ field }}": data.get("{{ field }}"),
                    {% endfor %}
                })
                doc.insert()
                doc.submit() if hasattr(doc, 'submit') else None
                
                result = {
                    "message": "{{ target_doctype }} created successfully",
                    "data": doc.as_dict(),
                    "name": doc.name
                }
                {% elif endpoint_type == "read" %}
                # Read existing document
                filters = {}
                {% for field in filter_fields %}
                if data.get("{{ field }}"):
                    filters["{{ field }}"] = data.get("{{ field }}")
                {% endfor %}
                
                docs = frappe.get_all("{{ target_doctype }}", 
                    filters=filters,
                    fields=["*"],
                    limit=data.get("limit", 20)
                )
                
                result = {
                    "message": "{{ target_doctype }} data retrieved successfully",
                    "data": docs,
                    "count": len(docs)
                }
                {% elif endpoint_type == "update" %}
                # Update existing document
                doc_name = data.get("name")
                if not doc_name:
                    frappe.throw(_("Document name is required for update"))
                
                doc = frappe.get_doc("{{ target_doctype }}", doc_name)
                {% for field in updateable_fields %}
                if "{{ field }}" in data:
                    doc.{{ field }} = data.get("{{ field }}")
                {% endfor %}
                doc.save()
                
                result = {
                    "message": "{{ target_doctype }} updated successfully",
                    "data": doc.as_dict(),
                    "name": doc.name
                }
                {% elif endpoint_type == "delete" %}
                # Delete document
                doc_name = data.get("name")
                if not doc_name:
                    frappe.throw(_("Document name is required for deletion"))
                
                frappe.delete_doc("{{ target_doctype }}", doc_name)
                
                result = {
                    "message": "{{ target_doctype }} deleted successfully",
                    "name": doc_name
                }
                {% else %}
                # Custom logic implementation
                result = {
                    "message": "Custom API endpoint executed successfully",
                    "data": data,
                    "endpoint_type": "{{ endpoint_type }}"
                }
                {% endif %}
                
                result["timestamp"] = now_datetime()
                result["success"] = True
                
            except Exception as e:
                frappe.log_error(f"API endpoint error: {str(e)}", "{{ api_method }}")
                result = {
                    "message": "Operation failed",
                    "error": str(e),
                    "success": False,
                    "timestamp": now_datetime()
                }
                
            {% endif %}
            
            {% if logging_enabled %}
            # Log API usage
            log_api_usage("{{ endpoint_name }}", frappe.session.user, result)
            {% endif %}
            
            return {
                "success": True,
                "data": result,
                "message": _("Operation completed successfully")
            }
            
        except frappe.ValidationError:
            # Re-raise validation errors as-is
            raise
        except frappe.PermissionError:
            # Re-raise permission errors as-is  
            raise
        except Exception as e:
            # Log unexpected errors
            frappe.log_error(frappe.get_traceback(), f"API Error: {{ endpoint_name }}")
            
            # Return sanitized error in production
            if frappe.conf.developer_mode:
                error_message = str(e)
            else:
                error_message = _("An unexpected error occurred")
            
            return {
                "success": False,
                "error": error_message,
                "message": _("Operation failed")
            }

  validation_helpers: |
    def validate_required_params(data, required_fields):
        """Validate required parameters"""
        errors = []
        for field in required_fields:
            if not data.get(field):
                errors.append(f"{field} is required")
        return errors
    
    def validate_email_param(email):
        """Validate email parameter"""
        if email:
            try:
                validate_email_address(email)
                return True
            except:
                return False
        return True
    
    def validate_phone_param(phone):
        """Validate phone parameter"""
        if phone:
            try:
                validate_phone_number(phone)
                return True
            except:
                return False
        return True
    
    def sanitize_input(data):
        """Sanitize input data"""
        if isinstance(data, dict):
            return {k: cstr(v).strip() if isinstance(v, str) else v for k, v in data.items()}
        return data

  rate_limiting: |
    def check_rate_limit(endpoint_name, limit_per_minute):
        """Check if user has exceeded rate limit"""
        cache_key = f"rate_limit:{frappe.session.user}:{endpoint_name}"
        current_count = frappe.cache().get(cache_key) or 0
        
        if current_count >= limit_per_minute:
            return False
        
        # Increment counter with 60-second expiry
        frappe.cache().set(cache_key, current_count + 1, expires_in_sec=60)
        return True

  logging_helpers: |
    def log_api_usage(endpoint_name, user, result):
        """Log API usage for monitoring and analytics"""
        try:
            frappe.get_doc({
                "doctype": "API Usage Log",
                "endpoint": endpoint_name,
                "user": user,
                "timestamp": now_datetime(),
                "success": result.get("success", True),
                "response_size": len(json.dumps(result)),
                "ip_address": frappe.local.request.remote_addr
            }).insert(ignore_permissions=True)
        except:
            # Don't let logging errors break the API
            pass

  api_response_formats: |
    # Standard API Response Formats
    
    # Success Response
    {
        "success": true,
        "data": {
            # Your data here
        },
        "message": "Operation completed successfully",
        "timestamp": "2023-01-01T00:00:00"
    }
    
    # Error Response
    {
        "success": false,
        "error": "Validation failed",
        "message": "Please check your input",
        "timestamp": "2023-01-01T00:00:00"
    }
    
    # Paginated Response
    {
        "success": true,
        "data": [
            # Array of items
        ],
        "pagination": {
            "page": 1,
            "limit": 20,
            "total": 100,
            "has_next": true
        }
    }

examples:
  simple_get_endpoint:
    description: "Simple GET endpoint to fetch user data"
    parameters:
      endpoint_name: "get_user_profile"
      description: "Get current user profile information"
      http_methods: ["GET"]
      authentication_required: true
    generated_code: |
      @frappe.whitelist()
      def get_user_profile():
          """Get current user profile information"""
          try:
              user = frappe.get_doc("User", frappe.session.user)
              profile_data = {
                  "name": user.name,
                  "full_name": user.full_name,
                  "email": user.email,
                  "role_profile": user.role_profile_name,
                  "last_login": user.last_login
              }
              
              return {
                  "success": True,
                  "data": profile_data
              }
              
          except Exception as e:
              frappe.log_error(frappe.get_traceback(), "Get User Profile Error")
              return {"success": False, "error": str(e)}

  data_creation_endpoint:
    description: "POST endpoint to create new records"
    parameters:
      endpoint_name: "create_customer"
      description: "Create a new customer record"
      http_methods: ["POST"]
      authentication_required: true
      parameters:
        - name: "customer_name"
          type: "string"
          required: true
        - name: "email"
          type: "string"
          required: true
    generated_code: |
      @frappe.whitelist()
      def create_customer(customer_name, email, phone=None):
          """Create a new customer record"""
          try:
              # Validation
              if not customer_name or not email:
                  frappe.throw(_("Customer name and email are required"))
              
              # Check permissions
              if not frappe.has_permission("Customer", "create"):
                  frappe.throw(_("Not permitted to create customers"))
              
              # Create customer
              customer = frappe.get_doc({
                  "doctype": "Customer",
                  "customer_name": customer_name,
                  "email_id": email,
                  "mobile_no": phone
              })
              customer.insert()
              
              return {
                  "success": True,
                  "data": {
                      "customer_id": customer.name,
                      "customer_name": customer.customer_name
                  },
                  "message": _("Customer created successfully")
              }
              
          except Exception as e:
              frappe.log_error(frappe.get_traceback(), "Create Customer Error")
              return {"success": False, "error": str(e)}

  file_upload_endpoint:
    description: "File upload endpoint with validation"
    parameters:
      endpoint_name: "upload_document"
      description: "Upload and attach document to record"
      http_methods: ["POST"]
      authentication_required: true
    generated_code: |
      @frappe.whitelist()
      def upload_document(doctype, docname):
          """Upload and attach document to a record"""
          try:
              # Check permissions
              if not frappe.has_permission(doctype, "write", docname):
                  frappe.throw(_("Not permitted to upload files to this record"))
              
              # Get uploaded file
              if not frappe.request.files:
                  frappe.throw(_("No file uploaded"))
              
              file = frappe.request.files['file']
              if not file.filename:
                  frappe.throw(_("No file selected"))
              
              # Validate file type and size
              allowed_types = ['.pdf', '.doc', '.docx', '.jpg', '.png']
              file_ext = '.' + file.filename.split('.')[-1].lower()
              if file_ext not in allowed_types:
                  frappe.throw(_("File type not allowed"))
              
              # Create file document
              file_doc = frappe.get_doc({
                  "doctype": "File",
                  "file_name": file.filename,
                  "attached_to_doctype": doctype,
                  "attached_to_name": docname,
                  "content": file.read()
              })
              file_doc.insert()
              
              return {
                  "success": True,
                  "data": {
                      "file_url": file_doc.file_url,
                      "file_name": file_doc.file_name
                  },
                  "message": _("File uploaded successfully")
              }
              
          except Exception as e:
              frappe.log_error(frappe.get_traceback(), "File Upload Error")
              return {"success": False, "error": str(e)}

best_practices:
  security:
    - "Always validate input parameters"
    - "Check user permissions before data operations"
    - "Use @frappe.whitelist() decorator appropriately"
    - "Sanitize user inputs to prevent injection"
    - "Implement rate limiting for public endpoints"
    - "Use HTTPS in production"
    - "Log security events and failed attempts"

  performance:
    - "Avoid N+1 query problems"
    - "Use database pagination for large datasets"
    - "Cache expensive calculations"
    - "Use background jobs for heavy processing"
    - "Optimize database queries"
    - "Return only necessary data fields"

  error_handling:
    - "Use appropriate Frappe exception types"
    - "Provide meaningful error messages"
    - "Log errors for debugging"
    - "Don't expose sensitive information in errors"
    - "Handle edge cases gracefully"

  documentation:
    - "Document all parameters and return values"
    - "Include usage examples"
    - "Specify required permissions"
    - "Document rate limits and constraints"
    - "Keep API documentation updated"

testing:
  unit_test_template: |
    import unittest
    import frappe
    from frappe.tests.utils import FrappeTestCase
    
    class Test{{ endpoint_name | title }}(FrappeTestCase):
        def setUp(self):
            # Set up test data
            self.test_user = "test@example.com"
            frappe.set_user(self.test_user)
        
        def test_{{ endpoint_name }}_success(self):
            """Test successful API call"""
            response = frappe.call("{{ endpoint_path }}", **self.get_test_data())
            
            self.assertTrue(response.get("success"))
            self.assertIn("data", response)
        
        def test_{{ endpoint_name }}_validation(self):
            """Test input validation"""
            with self.assertRaises(frappe.ValidationError):
                frappe.call("{{ endpoint_path }}", **self.get_invalid_data())
        
        def test_{{ endpoint_name }}_permissions(self):
            """Test permission checks"""
            frappe.set_user("Guest")
            
            with self.assertRaises(frappe.PermissionError):
                frappe.call("{{ endpoint_path }}", **self.get_test_data())
        
        def get_test_data(self):
            """Return valid test data"""
            return {
                # Add your test parameters here
            }
        
        def get_invalid_data(self):
            """Return invalid test data"""
            return {
                # Add invalid test parameters here
            }
        
        def tearDown(self):
            # Clean up test data
            frappe.set_user("Administrator")

deployment_checklist:
  - "Test endpoint with various input scenarios"
  - "Verify authentication and permission checks"
  - "Test rate limiting (if implemented)"
  - "Check error handling and logging"
  - "Validate API documentation"
  - "Perform security testing"
  - "Test with production-like data volumes"
  - "Monitor API performance after deployment"