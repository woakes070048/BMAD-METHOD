name: "vue-doctype-integration-template"
title: "Vue Component Integration in DocTypes"
description: "Template for integrating Vue components directly into DocType forms using HTML fields and client scripts"
version: "1.0.0"

parameters:
  doctype_name:
    type: "string"
    required: true
    description: "Name of the DocType (PascalCase)"
  module_name:
    type: "string"
    required: true
    description: "Module name for the DocType"
  component_name:
    type: "string"
    required: true
    description: "Name of the Vue component (snake_case)"
  field_name:
    type: "string"
    required: true
    description: "HTML field name for Vue mount point"

templates:
  doctype_html_field: |
    {
      "fieldname": "{{field_name}}",
      "fieldtype": "HTML",
      "label": "{{component_name|title}}",
      "options": "<div id='{{field_name}}-vue-app' class='vue-component-wrapper'></div>"
    }

  client_script_js: |
    // {{doctype_name|lower}}/{{doctype_name|lower}}.js
    frappe.ui.form.on('{{doctype_name}}', {
      refresh: function(frm) {
        // Initialize Vue component in HTML field
        if (frm.fields_dict.{{field_name}}) {
          render_{{component_name}}_component(frm);
        }
      },
      
      onload: function(frm) {
        // Set up any initial data
        frm.{{component_name}}_data = {
          docname: frm.doc.name,
          doctype: frm.doctype
        };
      }
    });

    function render_{{component_name}}_component(frm) {
      // Clear any existing content
      const wrapper = frm.fields_dict.{{field_name}}.$wrapper[0];
      wrapper.innerHTML = '<div id="{{field_name}}-mount"></div>';
      
      // Load the Vue bundle
      frappe.require('{{component_name}}.bundle.js').then(() => {
        // Initialize the Vue component
        if (frappe.ui.{{component_name|pascalcase}}) {
          frm.{{component_name}}_instance = new frappe.ui.{{component_name|pascalcase}}({
            wrapper: wrapper.querySelector('#{{field_name}}-mount'),
            frm: frm,
            docname: frm.doc.name,
            readonly: frm.doc.docstatus === 1
          });
        }
      });
    }

  component_bundle_js: |
    // public/js/{{component_name}}.bundle.js
    import { createApp } from "vue";
    import {{component_name|pascalcase}}Component from "./{{component_name}}/{{component_name|pascalcase}}.vue";
    import { createPinia } from "pinia";

    class {{component_name|pascalcase}} {
      constructor({ wrapper, frm, docname, readonly }) {
        this.wrapper = wrapper;
        this.frm = frm;
        this.docname = docname;
        this.readonly = readonly;
        
        this.init();
      }
      
      init() {
        // Create Vue app
        const app = createApp({{component_name|pascalcase}}Component, {
          frm: this.frm,
          docname: this.docname,
          readonly: this.readonly
        });
        
        // CRITICAL: Set up Frappe globals
        SetVueGlobals(app);
        
        // Add Pinia if needed
        const pinia = createPinia();
        app.use(pinia);
        
        // Mount the app
        this.app = app.mount(this.wrapper);
        
        // Store reference on frm for external access
        this.frm.{{component_name}}_vue = this.app;
      }
      
      destroy() {
        if (this.app) {
          this.app.$destroy();
        }
      }
    }

    // Export for Frappe
    frappe.provide("frappe.ui");
    frappe.ui.{{component_name|pascalcase}} = {{component_name|pascalcase}};

  component_vue: |
    <!-- public/js/{{component_name}}/{{component_name|pascalcase}}.vue -->
    <template>
      <div class="{{component_name}}-container">
        <div v-if="loading" class="text-center py-4">
          <span class="text-muted">{{ __('Loading...') }}</span>
        </div>
        
        <div v-else class="component-content">
          <!-- Your component content here -->
          <div class="row">
            <div class="col-md-12">
              <h4>{{ __('{{component_name|title}}') }}</h4>
              <p class="text-muted">{{ __('DocType') }}: {{ docname }}</p>
            </div>
          </div>
          
          <!-- Example: Display related data -->
          <div class="mt-3">
            <button 
              v-if="!readonly"
              class="btn btn-primary btn-sm"
              @click="handleAction"
            >
              {{ __('Perform Action') }}
            </button>
          </div>
        </div>
      </div>
    </template>

    <script setup>
    import { ref, onMounted, watch } from 'vue';

    const props = defineProps({
      frm: Object,
      docname: String,
      readonly: Boolean
    });

    // Access Frappe globals
    const { __ } = window;
    const { frappe } = window;

    // Local state
    const loading = ref(false);
    const data = ref(null);

    // Watch for doc changes
    watch(() => props.frm?.doc, (newDoc) => {
      if (newDoc) {
        loadData();
      }
    }, { deep: true });

    // Methods
    async function loadData() {
      loading.value = true;
      try {
        // Load related data
        const response = await frappe.call({
          method: 'frappe.client.get_list',
          args: {
            doctype: 'Related DocType',
            filters: {
              link_field: props.docname
            },
            fields: ['*']
          }
        });
        data.value = response.message;
      } catch (error) {
        frappe.msgprint({
          title: __('Error'),
          message: error.message,
          indicator: 'red'
        });
      } finally {
        loading.value = false;
      }
    }

    function handleAction() {
      // Interact with the form
      props.frm.set_value('some_field', 'new_value');
      props.frm.save();
      
      // Show message
      frappe.show_alert({
        message: __('Action completed'),
        indicator: 'green'
      });
    }

    // Lifecycle
    onMounted(() => {
      loadData();
    });
    </script>

    <style scoped>
    .{{component_name}}-container {
      padding: 15px;
      background: var(--card-bg);
      border-radius: var(--border-radius);
    }

    .component-content {
      min-height: 200px;
    }
    </style>

instructions:
  setup: |
    1. Add HTML field to DocType:
       - Edit DocType JSON and add the HTML field from template
       - Or use Customize Form to add the field
    
    2. Create client script:
       - Create {{doctype_name|lower}}/{{doctype_name|lower}}.js
       - Add the client script code from template
    
    3. Create Vue component:
       - Create public/js/{{component_name}}.bundle.js
       - Create public/js/{{component_name}}/{{component_name|pascalcase}}.vue
       - Add any additional components in public/js/{{component_name}}/components/
    
    4. Build assets:
       ```bash
       bench build --app {{app_name}}
       ```
    
    5. Clear cache and test:
       ```bash
       bench --site [site-name] clear-cache
       ```

notes:
  - Vue component has full access to frm object
  - Can interact with form fields via frm.set_value()
  - Component updates when doc changes
  - Properly handles readonly/submitted states
  - No separate frontend needed!

use_cases:
  - Custom dashboards in DocType forms
  - Interactive data visualizations
  - Complex UI components beyond standard fields
  - Real-time data updates
  - Advanced form interactions