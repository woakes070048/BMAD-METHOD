# Coordination Workflow
# For main-dev-coordinator agent (Claudia Donovan)
# Based on SAFETY-FIRST-WORKFLOW-TEMPLATE.yaml

name: coordination-workflow
description: Multi-agent coordination and task routing workflow with adaptive context support
version: 1.0.0
agent_assignments:
  primary: main-dev-coordinator
  support: [erpnext-product-owner, erpnext-architect, business-analyst]
  verification: erpnext-product-owner

# MANDATORY SAFETY INTEGRATION
safety_integration:
  template_base: SAFETY-FIRST-WORKFLOW-TEMPLATE.yaml
  context_detection: automatic
  panic_monitoring: active
  rollback_capability: required

stages:
  # STAGE 1: MANDATORY CONTEXT GATHERING (Cannot Skip)
  - name: context_gathering
    description: "Determine coordination context and gather appropriate information"
    mandatory: true
    can_skip: false
    context_adaptive: true
    
    substages:
      - name: detect_context_type
        description: "Identify if this is troubleshooting, new development, enhancement, or migration"
        actions:
          - determine_context: ["TROUBLESHOOTING", "NEW_DEVELOPMENT", "ENHANCEMENT", "MIGRATION"]
          - log_context: "echo '## Context: [CONTEXT_TYPE] Coordination work' >> SESSION-CHANGELOG.md"
      
      - name: gather_context_specific_info
        description: "Collect information appropriate to context type"
        context_branches:
          TROUBLESHOOTING:
            - execute: "pwd && git status && tail -20 ../logs/frappe.log"
            - analyze: "coordination failures, agent conflicts, workflow breakdowns"
            - document: "current coordination problems and failed handoffs"
          
          NEW_DEVELOPMENT:
            - execute: "pwd && git status && ls -la"
            - analyze: "project requirements, agent capabilities, coordination needs"
            - document: "coordination goals and agent assignment strategy"
          
          ENHANCEMENT:
            - execute: "pwd && git status && git diff"
            - analyze: "current coordination state, improvement opportunities, workflow gaps"
            - document: "coordination enhancement goals and workflow improvements"
          
          MIGRATION:
            - execute: "pwd && git status"
            - analyze: "source coordination patterns, target workflow requirements"
            - document: "coordination migration strategy and workflow preservation"

    decision_gate:
      condition: "context_gathered AND appropriate_info_collected"
      fail_action: "RETURN_TO_CONTEXT_GATHERING"
      success_action: "PROCEED_TO_MODE_SELECTION"

  # STAGE 2: EXECUTION MODE SELECTION (Cannot Skip)
  - name: execution_mode_selection
    description: "Determine optimal execution mode for the work"
    mandatory: true
    can_skip: false
    
    substages:
      - name: analyze_work_characteristics
        description: "Analyze work to determine best execution mode"
        actions:
          - count_stories: "Determine number of stories/tasks to execute"
          - analyze_complexity: "Assess complexity level of work"
          - check_dependencies: "Map dependencies between stories"
          - assess_risk_level: "Evaluate risk level of changes"
          - check_user_preference: "Consider user mode preference"
      
      - name: mode_recommendation
        description: "Recommend execution mode based on analysis"
        decision_logic:
          single_story:
            condition: "story_count == 1"
            recommended_mode: "guided"
            reason: "Single story benefits from careful attention"
          
          multiple_simple:
            condition: "story_count > 1 AND complexity == 'low' AND dependencies < 30%"
            recommended_mode: "sequential"
            reason: "Multiple simple stories can be automated"
          
          large_independent:
            condition: "story_count > 3 AND dependencies < 30% AND risk_level != 'high'"
            recommended_mode: "smart_parallel"
            reason: "Independent work benefits from parallelization"
          
          high_risk:
            condition: "risk_level == 'high'"
            recommended_mode: "guided"
            reason: "High-risk work requires careful supervision"
      
      - name: mode_confirmation
        description: "Confirm execution mode with user"
        actions:
          - present_recommendation: "Show recommended mode with reasoning"
          - allow_override: "User can override recommendation"
          - set_execution_mode: "Finalize mode for this session"
          - log_mode_choice: "Record mode selection reasoning"
          - update_github_context: "Update execution mode in GitHub context"
          - sync_mode_selection: "Post mode selection to GitHub if enabled"

    decision_gate:
      condition: "execution_mode_selected"
      fail_action: "RETURN_TO_MODE_ANALYSIS"
      success_action: "PROCEED_TO_AGENT_ANALYSIS"

  # STAGE 3: MANDATORY AGENT ANALYSIS (Cannot Skip)
  - name: agent_analysis
    description: "Analyze available agents and coordination requirements"
    mandatory: true
    can_skip: false
    
    substages:
      - name: agent_capability_mapping
        description: "Map available agents and their capabilities"
        actions:
          - inventory_agents: "list all available agents and their specialties"
          - assess_capabilities: "evaluate agent strengths and limitations"
          - identify_gaps: "determine missing capabilities or skills"
      
      - name: task_analysis
        description: "Analyze tasks and coordination requirements"
        actions:
          - decompose_tasks: "break down complex tasks into agent-specific work"
          - identify_dependencies: "map task dependencies and prerequisites"
          - estimate_effort: "assess time and resource requirements"
      
      - name: coordination_requirement_analysis
        description: "Identify coordination and handoff needs"
        context_branches:
          TROUBLESHOOTING:
            - analyze: "coordination failures, agent conflicts, handoff issues"
            - document: "specific coordination problems and their causes"
          
          NEW_DEVELOPMENT:
            - analyze: "coordination strategy, agent workflow design, handoff planning"
            - document: "coordination architecture and workflow design"
          
          ENHANCEMENT:
            - analyze: "current coordination limitations, improvement opportunities"
            - document: "coordination enhancement strategy"
          
          MIGRATION:
            - analyze: "source coordination patterns, target workflow requirements"
            - document: "coordination migration plan and workflow adaptation"

    decision_gate:
      condition: "agents_mapped AND requirements_analyzed"
      fail_action: "ESCALATE_TO_ERPNEXT_ARCHITECT"
      success_action: "PROCEED_TO_PLANNING"

  # STAGE 3: MANDATORY COORDINATION PLANNING (Cannot Skip)
  - name: coordination_planning
    description: "Plan agent assignments and coordination strategy"
    mandatory: true
    can_skip: false
    
    substages:
      - name: agent_assignment_planning
        description: "Plan optimal agent assignments for tasks"
        actions:
          - match_agents_to_tasks: "assign agents based on capabilities and availability"
          - design_workflows: "create agent coordination workflows"
          - plan_handoffs: "design information transfer between agents"
      
      - name: parallel_execution_analysis
        description: "Analyze if work can be parallelized (for smart_parallel mode)"
        conditional: "execution_mode == 'smart_parallel'"
        actions:
          - engage_parallel_analyzer: "Use parallel-analyzer agent"
          - map_file_targets: "Identify which files each agent will modify"
          - detect_conflicts: "Check for file or dependency conflicts"
          - create_execution_blocks: "Group non-conflicting work"
          - plan_failure_recovery: "Prepare parallel failure strategies"
      
      - name: coordination_strategy_design
        description: "Design overall coordination approach based on mode"
        mode_specific_planning:
          guided:
            approach: "interactive_step_by_step"
            strategy:
              - plan_interactive_approvals: "Plan user approval points"
              - design_detailed_feedback: "Plan progress reporting"
              - prepare_learning_opportunities: "Prepare educational moments"
          
          sequential:
            approach: "automated_sequential"
            strategy:
              - plan_story_queue: "Order stories for sequential processing"
              - design_automatic_handoffs: "Plan agent-to-agent transitions"
              - prepare_batch_reporting: "Plan progress summaries"
          
          smart_parallel:
            approach: "intelligent_parallel_with_fallback"
            strategy:
              - implement_parallel_blocks: "Execute parallel execution plan"
              - design_conflict_monitoring: "Monitor for runtime conflicts"
              - prepare_failure_recovery: "Ready fallback strategies"
        
        context_branches:
          TROUBLESHOOTING:
            - plan_fixes: "coordination repair strategy and conflict resolution"
            - design_rollback: "recovery plan if coordination fails"
          
          NEW_DEVELOPMENT:
            - plan_implementation: "agent coordination implementation strategy"
            - design_monitoring: "ongoing coordination monitoring"
          
          ENHANCEMENT:
            - plan_improvements: "coordination enhancement roadmap"
            - design_migration: "safe transition to improved coordination"
          
          MIGRATION:
            - plan_conversion: "coordination pattern transformation"
            - design_validation: "post-migration coordination verification"
      
      - name: communication_planning
        description: "Plan agent communication and information sharing"
        actions:
          - design_communication_protocols: "standardize agent interaction patterns"
          - plan_status_reporting: "regular coordination status updates"
          - establish_escalation_paths: "clear escalation procedures"

    decision_gate:
      condition: "coordination_planned AND assignments_complete"
      fail_action: "REVISE_PLAN"
      success_action: "PROCEED_TO_IMPLEMENTATION"

  # STAGE 4: CONTROLLED IMPLEMENTATION WITH QUALITY GATES (With Panic Detection)
  - name: controlled_implementation
    description: "Execute coordination plan with safety monitoring and quality gate enforcement"
    panic_detection: true
    attempt_limit: 3
    quality_gate_enforcement: mandatory
    
    substages:
      - name: pre_implementation_setup
        description: "Prepare for coordination execution"
        actions:
          - initialize_changelog: "create detailed coordination log"
          - backup_current_state: "preserve current coordination state"
          - verify_agent_availability: "ensure all assigned agents are ready"
          - load_quality_gates: "initialize quality-gates-definition.yaml"
          - prepare_gate_checklist: "setup quality-gate-checklist.md tracking"
      
      - name: mode_specific_execution
        description: "Execute coordination using selected mode"
        mode_branches:
          guided:
            description: "Interactive execution with user approval at each step"
            execution_pattern:
              - present_next_step: "Show user what agent will do"
              - request_approval: "Get user approval before proceeding"
              - execute_single_agent: "Run one agent at a time"
              - show_results: "Display agent results for review"
              - run_quality_gates: "Execute quality gates with user review"
              - get_next_approval: "Request approval for next step"
            
          sequential:
            description: "Automated sequential execution of multiple stories"
            execution_pattern:
              - load_story_queue: "Load all stories to process"
              - show_execution_plan: "Display planned sequence to user"
              - get_initial_approval: "Get approval to start batch"
              - process_stories_sequentially: "Execute stories one by one"
              - run_quality_gates_automatic: "Run gates with auto-retry"
              - report_batch_progress: "Periodic progress updates"
              - handle_failures_automatically: "Auto-retry then escalate"
            
          smart_parallel:
            description: "Intelligent parallel execution with conflict detection"
            execution_pattern:
              - execute_parallel_blocks: "Run execution blocks in parallel"
              - monitor_parallel_progress: "Track all parallel agents"
              - detect_runtime_conflicts: "Watch for unexpected conflicts"
              - run_quality_gates_per_block: "Gates after each parallel block"
              - handle_parallel_failures: "Execute parallel-failure-recovery-workflow"
              - consolidate_parallel_results: "Merge parallel work"
        
        safety_checks:
          guided:
            - user_approval_required: true
            - detailed_progress_tracking: true
            - immediate_failure_escalation: true
          
          sequential:
            - automatic_retry_on_failure: true
            - batch_progress_monitoring: true
            - escalation_after_3_failures: true
          
          smart_parallel:
            - parallel_conflict_monitoring: true
            - intelligent_failure_recovery: true
            - dynamic_strategy_adjustment: true
        
        quality_gate_process:
          before_handoff:
            - execute: "quality-gate-enforcement-workflow.yaml"
            - validate_structure: "Eva Thorne compliance check"
            - run_tests: "testing-specialist verification"
            - check_documentation: "verify docs updated"
            - report_to_github: "report-quality-gate-to-github.md for each gate"
          
          handoff_criteria:
            - all_gates_passed: true
            - tests_passing: true
            - structure_compliant: true
            - documentation_complete: true
            - github_sync_successful: true
          
          failure_handling:
            - block_handoff: "prevent handoff if gates fail"
            - return_to_agent: "send work back with specific issues"
            - document_failures: "log gate failures in changelog"
            - report_github_failure: "report-quality-gate-to-github.md with failure details"
            - trigger_mode_specific_recovery: "execute mode-appropriate recovery strategy"
      
      - name: coordination_monitoring
        description: "Monitor ongoing coordination effectiveness"
        context_branches:
          TROUBLESHOOTING:
            - monitor_fixes: "track coordination repair progress"
            - validate_repairs: "verify coordination issues are resolved"
          
          NEW_DEVELOPMENT:
            - monitor_implementation: "track coordination implementation progress"
            - validate_coordination: "verify coordination effectiveness"
          
          ENHANCEMENT:
            - monitor_improvements: "track coordination enhancement progress"
            - validate_improvements: "verify coordination improvement success"
          
          MIGRATION:
            - monitor_conversion: "track coordination pattern migration"
            - validate_migration: "verify coordination migration success"

    panic_detection:
      triggers:
        - rapid_reassignments: "more than 3 agent reassignments in 5 minutes"
        - coordination_failures: "repeated handoff failures between agents"
        - agent_conflicts: "multiple agent conflicts occurring simultaneously"
      
      response:
        immediate_action: "STOP_ALL_COORDINATION"
        rollback_action: "RESTORE_PREVIOUS_ASSIGNMENTS"
        escalation: "ALERT_ERPNEXT_PRODUCT_OWNER"

    decision_gate:
      condition: "coordination_successful AND tasks_progressing"
      fail_action: "INCREMENT_ATTEMPT_COUNTER"
      success_action: "PROCEED_TO_VALIDATION"

  # STAGE 5: MANDATORY VALIDATION (Cannot Skip)
  - name: validation_and_verification
    description: "Verify coordination effectiveness and task completion"
    mandatory: true
    can_skip: false
    
    substages:
      - name: coordination_effectiveness_verification
        description: "Verify coordination is working effectively"
        actions:
          - assess_agent_performance: "evaluate individual agent performance"
          - measure_coordination_efficiency: "assess handoff effectiveness"
          - identify_bottlenecks: "detect coordination inefficiencies"
      
      - name: cross_verification
        description: "Independent verification by product owner"
        actions:
          - request_verification: "erpnext-product-owner review"
          - await_confirmation: "independent coordination assessment"
          - address_feedback: "resolve any identified coordination issues"
      
      - name: documentation_completion
        description: "Complete coordination documentation"
        actions:
          - finalize_changelog: "complete coordination change documentation"
          - generate_coordination_report: "comprehensive coordination results"
          - update_coordination_records: "maintain coordination tracking"

    decision_gate:
      condition: "coordination_verified AND documentation_complete"
      fail_action: "RETURN_TO_COORDINATION_PLANNING"
      success_action: "WORKFLOW_COMPLETE"

# FAILURE HANDLING
failure_handling:
  third_attempt_failure:
    action: "STOP_AND_ESCALATE"
    escalation_target: "erpnext-product-owner"
    documentation_required: true
  
  panic_mode_triggered:
    immediate_action: "EMERGENCY_STOP"
    rollback_required: true
    human_intervention: true
  
  coordination_timeout:
    action: "GRACEFUL_STOP"
    documentation_required: true
    retry_strategy: "manual_review_required"

# SUCCESS CRITERIA
success_criteria:
  - coordination_efficiency_above_85_percent: true
  - zero_critical_handoff_failures: true
  - all_agents_performing_effectively: true
  - all_quality_gates_passed: true
  - documentation_complete: true
  - cross_verification_passed: true

# QUALITY GATE INTEGRATION
quality_gate_integration:
  enforcement_level: mandatory
  gate_workflows:
    - quality-gate-enforcement-workflow.yaml
    - testing-execution-workflow.yaml
  
  handoff_gates:
    pre_handoff:
      - structure_validation
      - import_pattern_check
      - test_execution
      - documentation_check
    
    post_handoff:
      - receiving_agent_verification
      - integration_check
  
  gate_failure_protocol:
    first_failure: return_to_originator
    second_failure: escalate_to_coordinator
    third_failure: escalate_to_product_owner

# INTEGRATION POINTS
integration:
  prerequisite_workflows: ["universal-context-detection-workflow"]
  dependent_workflows: ["all_agent_workflows"]
  quality_gate_workflows: ["quality-gate-enforcement-workflow"]
  notification_targets: ["erpnext-product-owner", "erpnext-architect", "testing-specialist"]
  
# METRICS AND MONITORING
metrics:
  track:
    - coordination_efficiency
    - handoff_success_rate
    - agent_utilization
    - panic_mode_incidents
    - cross_verification_success_rate
  
  alerts:
    - coordination_efficiency_below_threshold
    - repeated_handoff_failures
    - panic_mode_activation
    - verification_rejection