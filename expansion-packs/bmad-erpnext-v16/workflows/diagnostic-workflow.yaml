name: "Diagnostic and Troubleshooting Workflow"
description: "Systematic workflow for diagnosing and resolving ERPNext system issues, performance problems, and errors"
version: "1.0.0"

workflow_metadata:
  category: "Troubleshooting"
  complexity: "Medium to High"
  estimated_duration: "2-8 hours"
  required_expertise: "System Administration, Development"

triggers:
  - type: "manual"
    description: "System issue reported"
  - type: "automated"
    description: "Performance threshold breached"
  - type: "scheduled"
    description: "Regular health check"
  - type: "alert"
    description: "Monitoring system alert"

prerequisites:
  - "Access to system logs"
  - "Database query permissions"
  - "Server access credentials"
  - "Monitoring tools access"
  - "Test environment available"

safety_configuration:
  panic_detection: enabled
  max_attempts_per_task: 3
  changelog_required: true
  root_cause_required: true
  rollback_plan_required: true

workflow_stages:
  # MANDATORY STAGE 0: Safety Setup
  - stage: "safety_setup"
    name: "MANDATORY: Initialize Safety Protocols"
    required: true
    cannot_skip: true
    
    tasks:
      - task: "initialize_changelog"
        description: "Create diagnostic session changelog"
        mandatory: true
        command: |
          touch SESSION-CHANGELOG-DIAGNOSTIC-$(date +%Y%m%d-%H%M%S).md
          echo "# Diagnostic Session: $(date)" >> SESSION-CHANGELOG-*.md
          echo "Issue: [initial_symptom]" >> SESSION-CHANGELOG-*.md
        validation:
          - "Changelog created"
          - "Issue documented"
          
      - task: "create_safety_checkpoint"
        description: "Create restoration point"
        mandatory: true
        command: "git stash save 'Pre-diagnostic checkpoint $(date)'"
        
      - task: "document_working_state"
        description: "Document what IS working"
        mandatory: true
        checklist:
          - "What features are still functional?"
          - "When did issue start?"
          - "What changed recently?"
          - "Who is affected?"
        outputs:
          - "working_state_document"
    
    decision_point:
      question: "Safety protocols initialized?"
      yes: "proceed_to_initial_assessment"
      no: "cannot_proceed"
      enforcement: "MANDATORY"

  - stage: "initial_assessment"
    name: "Context-Adaptive Problem Assessment"
    agents:
      - "diagnostic-specialist"
      - "bench-operator"
    max_attempts: 1  # Don't retry assessment
    context_adaptive: true
    
    tasks:
      - task: "detect_context_type"
        description: "Determine diagnostic context type"
        agent: "diagnostic-specialist"
        mandatory: true
        actions:
          - determine_context: ["TROUBLESHOOTING", "NEW_DEVELOPMENT", "ENHANCEMENT", "MIGRATION"]
          - log_context: "echo '## Context: [CONTEXT_TYPE] Diagnostic work' >> SESSION-CHANGELOG-*.md"
      
      - task: "gather_context_specific_information"
        description: "Collect information appropriate to context type"
        agent: "diagnostic-specialist"
        context_branches:
          TROUBLESHOOTING:
            - execute: "pwd && git status && tail -20 ../logs/frappe.log"
            - analyze: "runtime errors, system failures, performance issues"
            - document: "current error state and diagnostic requirements"
          
          NEW_DEVELOPMENT:
            - execute: "pwd && git status && ls -la"
            - analyze: "diagnostic requirements, monitoring needs, error detection setup"
            - document: "diagnostic goals and monitoring architecture"
          
          ENHANCEMENT:
            - execute: "pwd && git status && git diff"
            - analyze: "current diagnostic state, improvement opportunities"
            - document: "diagnostic enhancement goals and monitoring improvements"
          
          MIGRATION:
            - execute: "pwd && git status"
            - analyze: "source diagnostic patterns, target monitoring requirements"
            - document: "diagnostic migration strategy and monitoring preservation"
      
      - task: "gather_symptoms"
        description: "Collect issue symptoms and error messages"
        agent: "diagnostic-specialist"
        safety_rules:
          - "READ ONLY - no changes"
          - "Document everything"
          - "No assumptions"
          - "Context-aware analysis"
        outputs:
          - "symptom_list"
          - "error_logs"
          - "affected_areas"
          - "context_type"
          
      - task: "system_health_check"
        description: "Run initial system health diagnostics"
        agent: "bench-operator"
        command: "bench doctor"
        outputs:
          - "health_report"
          - "system_status"
          
      - task: "categorize_issue"
        description: "Categorize the type of issue"
        agent: "diagnostic-specialist"
        categories:
          - "Performance"
          - "Functionality"
          - "Data Integrity"
          - "Integration"
          - "Security"
          
    decision_point:
      question: "Is this a critical production issue?"
      yes: "proceed_to_emergency_response"
      no: "proceed_to_detailed_diagnosis"
      
  - stage: "emergency_response"
    name: "Emergency Response"
    condition: "critical_production_issue"
    agents:
      - "diagnostic-specialist"
      - "bench-operator"
      
    tasks:
      - task: "isolate_issue"
        description: "Isolate and contain the problem"
        priority: "CRITICAL"
        
      - task: "implement_workaround"
        description: "Apply temporary fix if available"
        
      - task: "notify_stakeholders"
        description: "Alert relevant teams and users"
        
      - task: "document_incident"
        description: "Create incident report"
        
  - stage: "root_cause_analysis"
    name: "MANDATORY: Root Cause Analysis"
    required: true
    agents:
      - "diagnostic-specialist"
    
    tasks:
      - task: "form_hypothesis"
        description: "Develop root cause hypothesis"
        mandatory: true
        documentation_required:
          - "What do we think is broken?"
          - "Why do we think this?"
          - "How can we test this?"
        changelog_entry: |
          ## Root Cause Investigation
          Hypothesis: [hypothesis]
          Evidence: [evidence]
          Test plan: [test]
          
      - task: "test_hypothesis"
        description: "Test hypothesis WITHOUT changing code"
        safety_rules:
          - "NO CODE CHANGES"
          - "Read-only investigation"
          - "Use test environment if needed"
        max_attempts: 3
        
      - task: "confirm_root_cause"
        description: "Validate root cause identified"
        validation_checklist:
          - "Can reproduce issue consistently"
          - "Can explain why it happens"
          - "Have evidence supporting conclusion"
          - "Documented in changelog"
    
    decision_point:
      question: "Root cause identified and documented?"
      yes: "proceed_to_solution_planning"
      no: "escalate_cannot_fix_symptoms"
      enforcement: "CANNOT_FIX_WITHOUT_ROOT_CAUSE"
      
  - stage: "solution_planning"
    name: "Plan Fix Before Implementation"
    required: true
    agents:
      - "diagnostic-specialist"
      - "refactoring-expert"
    
    tasks:
      - task: "design_solution"
        description: "Design fix for root cause"
        required_outputs:
          - "Specific changes needed"
          - "Files to be modified"
          - "Impact assessment"
          - "Rollback strategy"
          
      - task: "document_plan"
        description: "Document fix plan in changelog"
        mandatory: true
        changelog_entry: |
          ## Solution Plan
          Root cause: [cause]
          Fix: [solution]
          Files: [list]
          Impact: [assessment]
          Rollback: [strategy]
          
      - task: "get_approval"
        description: "Approval gate"
        approval_criteria:
          - "Addresses root cause"
          - "Minimal change"
          - "Has rollback plan"
    
    decision_point:
      question: "Fix plan approved?"
      yes: "proceed_to_implementation"
      no: "revise_plan"
      
  - stage: "detailed_diagnosis"
    name: "Implementation with Safety"
    agents:
      - "diagnostic-specialist"
      - "testing-specialist"
      - "data-integration-expert"
    panic_monitoring: "ACTIVE"
    
    tasks:
      - task: "implement_fix"
        description: "Apply the planned fix"
        agent: "diagnostic-specialist"
        safety_rules:
          - "ONE change at a time"
          - "Test after EACH change"
          - "Update changelog immediately"
        attempt_limit: 3
        on_failure: "rollback"
        panic_detection:
          triggers:
            - "Making multiple rapid changes"
            - "New errors appearing"
            - "Can't explain failures"
          action: "STOP_IMMEDIATELY"
          
      - task: "analyze_logs"
        description: "Verify fix in logs"
        agent: "diagnostic-specialist"
        log_sources:
          - "frappe-bench/logs/bench.log"
          - "frappe-bench/logs/worker.log"
          - "frappe-bench/logs/scheduler.log"
          - "nginx/error.log"
          
      - task: "performance_profiling"
        description: "Profile system performance"
        agent: "diagnostic-specialist"
        checks:
          - "database_queries"
          - "api_response_times"
          - "resource_utilization"
          - "cache_performance"
          
      - task: "data_integrity_check"
        description: "Verify data consistency"
        agent: "data-integration-expert"
        validations:
          - "referential_integrity"
          - "data_completeness"
          - "constraint_violations"
          
      - task: "reproduce_issue"
        description: "Attempt to reproduce in test environment"
        agent: "testing-specialist"
        outputs:
          - "reproduction_steps"
          - "test_results"
          
    analysis_techniques:
      - technique: "root_cause_analysis"
        method: "5 Whys"
        
      - technique: "pattern_recognition"
        method: "Error frequency analysis"
        
      - technique: "correlation_analysis"
        method: "Timeline correlation"
        
  - stage: "solution_identification"
    name: "Identify Solution Options"
    agents:
      - "diagnostic-specialist"
      - "refactoring-expert"
      - "erpnext-architect"
      
    tasks:
      - task: "identify_root_cause"
        description: "Determine the root cause"
        agent: "diagnostic-specialist"
        
      - task: "propose_solutions"
        description: "Generate solution options"
        agents:
          - "diagnostic-specialist"
          - "refactoring-expert"
        solution_types:
          - "Configuration change"
          - "Code fix"
          - "Database optimization"
          - "Infrastructure upgrade"
          - "Process change"
          
      - task: "evaluate_solutions"
        description: "Assess solution options"
        agent: "erpnext-architect"
        criteria:
          - "effectiveness"
          - "implementation_effort"
          - "risk_level"
          - "cost"
          - "timeline"
          
      - task: "select_solution"
        description: "Choose optimal solution"
        approval_required: true
        
  - stage: "solution_implementation"
    name: "Implement Solution"
    agents:
      - "diagnostic-specialist"
      - "api-developer"
      - "bench-operator"
      - "testing-specialist"
      
    tasks:
      - task: "prepare_fix"
        description: "Develop and prepare the fix"
        agent: "api-developer"
        outputs:
          - "fix_code"
          - "deployment_plan"
          
      - task: "test_fix"
        description: "Test solution in staging"
        agent: "testing-specialist"
        test_types:
          - "unit_tests"
          - "integration_tests"
          - "regression_tests"
          
      - task: "deploy_fix"
        description: "Deploy solution to production"
        agent: "bench-operator"
        deployment_steps:
          - "backup_system"
          - "apply_fix"
          - "verify_deployment"
          - "monitor_system"
          
      - task: "validate_resolution"
        description: "Confirm issue is resolved"
        agent: "diagnostic-specialist"
        validation_checks:
          - "symptom_elimination"
          - "performance_improvement"
          - "no_new_issues"
          
  - stage: "optimization"
    name: "System Optimization"
    condition: "performance_issue"
    agents:
      - "diagnostic-specialist"
      - "refactoring-expert"
      
    tasks:
      - task: "performance_tuning"
        description: "Optimize system performance"
        optimizations:
          - "database_indexing"
          - "query_optimization"
          - "cache_configuration"
          - "code_refactoring"
          
      - task: "resource_optimization"
        description: "Optimize resource usage"
        areas:
          - "memory_management"
          - "cpu_utilization"
          - "disk_io"
          - "network_bandwidth"
          
  - stage: "monitoring_setup"
    name: "Enhanced Monitoring"
    agents:
      - "diagnostic-specialist"
      - "testing-specialist"
      
    tasks:
      - task: "implement_monitoring"
        description: "Set up monitoring for the issue"
        monitoring_types:
          - "performance_metrics"
          - "error_tracking"
          - "custom_alerts"
          
      - task: "define_thresholds"
        description: "Set alert thresholds"
        
      - task: "create_dashboards"
        description: "Create monitoring dashboards"
        
  - stage: "documentation"
    name: "Document Resolution"
    agents:
      - "documentation-specialist"
      - "diagnostic-specialist"
      
    tasks:
      - task: "create_kb_article"
        description: "Document issue and resolution"
        sections:
          - "problem_description"
          - "symptoms"
          - "root_cause"
          - "solution_steps"
          - "prevention_measures"
          
      - task: "update_runbook"
        description: "Update operational runbooks"
        
      - task: "post_mortem"
        description: "Conduct post-mortem if critical"
        includes:
          - "timeline"
          - "impact_analysis"
          - "lessons_learned"
          - "action_items"
          
  - stage: "preventive_measures"
    name: "Implement Preventive Measures"
    agents:
      - "diagnostic-specialist"
      - "erpnext-architect"
      
    tasks:
      - task: "identify_prevention"
        description: "Identify preventive measures"
        
      - task: "implement_safeguards"
        description: "Implement preventive safeguards"
        safeguard_types:
          - "validation_rules"
          - "automated_tests"
          - "monitoring_alerts"
          - "process_improvements"
          
      - task: "update_procedures"
        description: "Update operational procedures"

decision_points:
  - point: "severity_assessment"
    question: "What is the severity level?"
    options:
      critical: "emergency_response"
      high: "expedited_diagnosis"
      medium: "standard_diagnosis"
      low: "scheduled_diagnosis"
      
  - point: "solution_complexity"
    question: "How complex is the solution?"
    options:
      simple: "quick_fix"
      moderate: "standard_implementation"
      complex: "phased_implementation"
      
  - point: "regression_risk"
    question: "Risk of regression?"
    options:
      high: "extensive_testing"
      medium: "standard_testing"
      low: "basic_testing"

outputs:
  - output: "diagnostic_report"
    format: "markdown"
    includes:
      - "issue_summary"
      - "root_cause_analysis"
      - "solution_implemented"
      - "test_results"
      - "performance_metrics"
      
  - output: "incident_report"
    format: "pdf"
    includes:
      - "timeline"
      - "impact_assessment"
      - "resolution_steps"
      - "preventive_measures"
      
  - output: "knowledge_base_article"
    format: "html"
    includes:
      - "problem_symptoms"
      - "troubleshooting_steps"
      - "solution"
      - "related_articles"

success_criteria:
  - "Issue completely resolved"
  - "No performance degradation"
  - "No new issues introduced"
  - "Documentation completed"
  - "Monitoring in place"
  - "Stakeholders satisfied"

rollback_plan:
  triggers:
    - "New critical issues detected"
    - "Performance degradation > 20%"
    - "Data corruption detected"
    
  steps:
    - "Stop current deployment"
    - "Restore from backup"
    - "Revert code changes"
    - "Verify system stability"
    - "Notify stakeholders"

tools_required:
  diagnostic:
    - "bench doctor"
    - "MySQL query analyzer"
    - "Redis CLI"
    - "System monitoring tools"
    
  performance:
    - "New Relic / APM tools"
    - "Query profiler"
    - "Load testing tools"
    
  debugging:
    - "Python debugger"
    - "Browser DevTools"
    - "Network analyzer"

best_practices:
  - "Always backup before making changes"
  - "Test fixes in staging first"
  - "Document every step taken"
  - "Communicate status regularly"
  - "Follow change management process"
  - "Conduct post-mortem for major issues"